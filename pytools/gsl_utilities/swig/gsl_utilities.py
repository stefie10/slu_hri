# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gsl_utilities')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gsl_utilities')
    _gsl_utilities = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gsl_utilities', [dirname(__file__)])
        except ImportError:
            import _gsl_utilities
            return _gsl_utilities
        try:
            _mod = imp.load_module('_gsl_utilities', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gsl_utilities = swig_import_helper()
    del swig_import_helper
else:
    import _gsl_utilities
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



def tklib_vector_leq(vec, value):
    return _gsl_utilities.tklib_vector_leq(vec, value)
tklib_vector_leq = _gsl_utilities.tklib_vector_leq

def tklib_vector_geq(vec, value):
    return _gsl_utilities.tklib_vector_geq(vec, value)
tklib_vector_geq = _gsl_utilities.tklib_vector_geq

def tklib_inverse(M):
    return _gsl_utilities.tklib_inverse(M)
tklib_inverse = _gsl_utilities.tklib_inverse

def tklib_double_to_gsl_vector(myarray, length):
    return _gsl_utilities.tklib_double_to_gsl_vector(myarray, length)
tklib_double_to_gsl_vector = _gsl_utilities.tklib_double_to_gsl_vector

def tklib_rtheta_to_xy(pose, reading):
    return _gsl_utilities.tklib_rtheta_to_xy(pose, reading)
tklib_rtheta_to_xy = _gsl_utilities.tklib_rtheta_to_xy

def tklib_rtheta_to_xy_matrix(pose, RTh):
    return _gsl_utilities.tklib_rtheta_to_xy_matrix(pose, RTh)
tklib_rtheta_to_xy_matrix = _gsl_utilities.tklib_rtheta_to_xy_matrix

def tklib_xy_to_rtheta(curr_pose, features):
    return _gsl_utilities.tklib_xy_to_rtheta(curr_pose, features)
tklib_xy_to_rtheta = _gsl_utilities.tklib_xy_to_rtheta

def tklib_matrix_get(M, Ir, Ic):
    return _gsl_utilities.tklib_matrix_get(M, Ir, Ic)
tklib_matrix_get = _gsl_utilities.tklib_matrix_get

def tklib_matrix_get_vector(M, Ir, Ic):
    return _gsl_utilities.tklib_matrix_get_vector(M, Ir, Ic)
tklib_matrix_get_vector = _gsl_utilities.tklib_matrix_get_vector

def tklib_matrix_get_columns(M, I):
    return _gsl_utilities.tklib_matrix_get_columns(M, I)
tklib_matrix_get_columns = _gsl_utilities.tklib_matrix_get_columns

def tklib_matrix_get_rows(M, I):
    return _gsl_utilities.tklib_matrix_get_rows(M, I)
tklib_matrix_get_rows = _gsl_utilities.tklib_matrix_get_rows

def tklib_vector_get(V, I):
    return _gsl_utilities.tklib_vector_get(V, I)
tklib_vector_get = _gsl_utilities.tklib_vector_get

def tklib_matrix_float_get_columns(M, I):
    return _gsl_utilities.tklib_matrix_float_get_columns(M, I)
tklib_matrix_float_get_columns = _gsl_utilities.tklib_matrix_float_get_columns

def tklib_matrix_float_get_rows(M, I):
    return _gsl_utilities.tklib_matrix_float_get_rows(M, I)
tklib_matrix_float_get_rows = _gsl_utilities.tklib_matrix_float_get_rows

def tklib_vector_log(vec):
    return _gsl_utilities.tklib_vector_log(vec)
tklib_vector_log = _gsl_utilities.tklib_vector_log

def tklib_vector_exp(vec):
    return _gsl_utilities.tklib_vector_exp(vec)
tklib_vector_exp = _gsl_utilities.tklib_vector_exp

def tklib_exp(mat):
    return _gsl_utilities.tklib_exp(mat)
tklib_exp = _gsl_utilities.tklib_exp

def tklib_log_float(mat):
    return _gsl_utilities.tklib_log_float(mat)
tklib_log_float = _gsl_utilities.tklib_log_float

def tklib_log(mat):
    return _gsl_utilities.tklib_log(mat)
tklib_log = _gsl_utilities.tklib_log

def tklib_exp_float(mat):
    return _gsl_utilities.tklib_exp_float(mat)
tklib_exp_float = _gsl_utilities.tklib_exp_float

def tklib_sin(angles):
    return _gsl_utilities.tklib_sin(angles)
tklib_sin = _gsl_utilities.tklib_sin

def tklib_cos(angles):
    return _gsl_utilities.tklib_cos(angles)
tklib_cos = _gsl_utilities.tklib_cos

def tklib_arctan2(Y, X):
    return _gsl_utilities.tklib_arctan2(Y, X)
tklib_arctan2 = _gsl_utilities.tklib_arctan2

def tklib_range(start, end, increment):
    return _gsl_utilities.tklib_range(start, end, increment)
tklib_range = _gsl_utilities.tklib_range

def tklib_linalg_cholesky_decomp(A):
    return _gsl_utilities.tklib_linalg_cholesky_decomp(A)
tklib_linalg_cholesky_decomp = _gsl_utilities.tklib_linalg_cholesky_decomp

def tklib_linalg_det(A):
    return _gsl_utilities.tklib_linalg_det(A)
tklib_linalg_det = _gsl_utilities.tklib_linalg_det

def tklib_sse(mat, opts):
    return _gsl_utilities.tklib_sse(mat, opts)
tklib_sse = _gsl_utilities.tklib_sse

def tklib_trace(mat):
    return _gsl_utilities.tklib_trace(mat)
tklib_trace = _gsl_utilities.tklib_trace

def tklib_eye(n1, n2):
    return _gsl_utilities.tklib_eye(n1, n2)
tklib_eye = _gsl_utilities.tklib_eye

def tklib_subtract_mean(pts):
    return _gsl_utilities.tklib_subtract_mean(pts)
tklib_subtract_mean = _gsl_utilities.tklib_subtract_mean

def tklib_euclidean_distance(pt1, pt2):
    return _gsl_utilities.tklib_euclidean_distance(pt1, pt2)
tklib_euclidean_distance = _gsl_utilities.tklib_euclidean_distance

def tklib_get_distance(X, pt):
    return _gsl_utilities.tklib_get_distance(X, pt)
tklib_get_distance = _gsl_utilities.tklib_get_distance

def tklib_permutation_to_vector(permutation):
    return _gsl_utilities.tklib_permutation_to_vector(permutation)
tklib_permutation_to_vector = _gsl_utilities.tklib_permutation_to_vector

def tklib_diag(vec):
    return _gsl_utilities.tklib_diag(vec)
tklib_diag = _gsl_utilities.tklib_diag

def tklib_mean(pts, dimension):
    return _gsl_utilities.tklib_mean(pts, dimension)
tklib_mean = _gsl_utilities.tklib_mean

def tklib_get_centroid(x_st, x_end):
    return _gsl_utilities.tklib_get_centroid(x_st, x_end)
tklib_get_centroid = _gsl_utilities.tklib_get_centroid

def tklib_matrix_sum(A, dimension):
    return _gsl_utilities.tklib_matrix_sum(A, dimension)
tklib_matrix_sum = _gsl_utilities.tklib_matrix_sum

def tklib_matrix_prod(A, dimension):
    return _gsl_utilities.tklib_matrix_prod(A, dimension)
tklib_matrix_prod = _gsl_utilities.tklib_matrix_prod

def tklib_vector_sum(vec):
    return _gsl_utilities.tklib_vector_sum(vec)
tklib_vector_sum = _gsl_utilities.tklib_vector_sum

def tklib_vector_prod(vec):
    return _gsl_utilities.tklib_vector_prod(vec)
tklib_vector_prod = _gsl_utilities.tklib_vector_prod

def tklib_vector_sqrt(vec):
    return _gsl_utilities.tklib_vector_sqrt(vec)
tklib_vector_sqrt = _gsl_utilities.tklib_vector_sqrt

def tklib_matrix_sqrt(X):
    return _gsl_utilities.tklib_matrix_sqrt(X)
tklib_matrix_sqrt = _gsl_utilities.tklib_matrix_sqrt

def tklib_matrix_argmin(A, dimension):
    return _gsl_utilities.tklib_matrix_argmin(A, dimension)
tklib_matrix_argmin = _gsl_utilities.tklib_matrix_argmin

def tklib_matrix_min(A, dimension):
    return _gsl_utilities.tklib_matrix_min(A, dimension)
tklib_matrix_min = _gsl_utilities.tklib_matrix_min

def tklib_matrix_printf(themat):
    return _gsl_utilities.tklib_matrix_printf(themat)
tklib_matrix_printf = _gsl_utilities.tklib_matrix_printf

def tklib_matrix_float_printf(themat):
    return _gsl_utilities.tklib_matrix_float_printf(themat)
tklib_matrix_float_printf = _gsl_utilities.tklib_matrix_float_printf

def tklib_vector_printf(thevec):
    return _gsl_utilities.tklib_vector_printf(thevec)
tklib_vector_printf = _gsl_utilities.tklib_vector_printf

def tklib_permutation_printf(thevec):
    return _gsl_utilities.tklib_permutation_printf(thevec)
tklib_permutation_printf = _gsl_utilities.tklib_permutation_printf

def tklib_const_matrix_printf(themat):
    return _gsl_utilities.tklib_const_matrix_printf(themat)
tklib_const_matrix_printf = _gsl_utilities.tklib_const_matrix_printf

def tklib_matrix_mul_vec(pts, vec):
    return _gsl_utilities.tklib_matrix_mul_vec(pts, vec)
tklib_matrix_mul_vec = _gsl_utilities.tklib_matrix_mul_vec

def tklib_matrix_mul_vec_inplace(pts, vec):
    return _gsl_utilities.tklib_matrix_mul_vec_inplace(pts, vec)
tklib_matrix_mul_vec_inplace = _gsl_utilities.tklib_matrix_mul_vec_inplace

def tklib_matrix_add_vec(pts, vec, alpha, beta):
    return _gsl_utilities.tklib_matrix_add_vec(pts, vec, alpha, beta)
tklib_matrix_add_vec = _gsl_utilities.tklib_matrix_add_vec

def tklib_matrix_add_vec_M(pts, vec, alpha, beta):
    return _gsl_utilities.tklib_matrix_add_vec_M(pts, vec, alpha, beta)
tklib_matrix_add_vec_M = _gsl_utilities.tklib_matrix_add_vec_M

def tklib_vector_union(mask1, mask2, dest):
    return _gsl_utilities.tklib_vector_union(mask1, mask2, dest)
tklib_vector_union = _gsl_utilities.tklib_vector_union

def tklib_vector_intersect(mask1, mask2, dest):
    return _gsl_utilities.tklib_vector_intersect(mask1, mask2, dest)
tklib_vector_intersect = _gsl_utilities.tklib_vector_intersect

def tklib_apply_mask_lp(mask, log_probs, dest):
    return _gsl_utilities.tklib_apply_mask_lp(mask, log_probs, dest)
tklib_apply_mask_lp = _gsl_utilities.tklib_apply_mask_lp

def tklib_normalize_theta(theta):
    return _gsl_utilities.tklib_normalize_theta(theta)
tklib_normalize_theta = _gsl_utilities.tklib_normalize_theta

def tklib_normalize_theta_array(theta):
    return _gsl_utilities.tklib_normalize_theta_array(theta)
tklib_normalize_theta_array = _gsl_utilities.tklib_normalize_theta_array

def tklib_ones(d1, d2):
    return _gsl_utilities.tklib_ones(d1, d2)
tklib_ones = _gsl_utilities.tklib_ones

def tklib_transpose(m):
    return _gsl_utilities.tklib_transpose(m)
tklib_transpose = _gsl_utilities.tklib_transpose

def tklib_matrix_dot(m1, m2):
    return _gsl_utilities.tklib_matrix_dot(m1, m2)
tklib_matrix_dot = _gsl_utilities.tklib_matrix_dot

def tklib_vector_dot(v1, v2):
    return _gsl_utilities.tklib_vector_dot(v1, v2)
tklib_vector_dot = _gsl_utilities.tklib_vector_dot

def tklib_vector_argmin(vector):
    return _gsl_utilities.tklib_vector_argmin(vector)
tklib_vector_argmin = _gsl_utilities.tklib_vector_argmin

def tklib_vector_argmax(vector):
    return _gsl_utilities.tklib_vector_argmax(vector)
tklib_vector_argmax = _gsl_utilities.tklib_vector_argmax

def tklib_vector_mean(vector):
    return _gsl_utilities.tklib_vector_mean(vector)
tklib_vector_mean = _gsl_utilities.tklib_vector_mean

def tklib_vector_stddev(vector):
    return _gsl_utilities.tklib_vector_stddev(vector)
tklib_vector_stddev = _gsl_utilities.tklib_vector_stddev

def tklib_vector_variance(vector):
    return _gsl_utilities.tklib_vector_variance(vector)
tklib_vector_variance = _gsl_utilities.tklib_vector_variance

def tklib_vector_equal(v1, g2):
    return _gsl_utilities.tklib_vector_equal(v1, g2)
tklib_vector_equal = _gsl_utilities.tklib_vector_equal

def tklib_vector_linspace(start, stop, num_units):
    return _gsl_utilities.tklib_vector_linspace(start, stop, num_units)
tklib_vector_linspace = _gsl_utilities.tklib_vector_linspace

def tklib_vector_bisect(v, value):
    return _gsl_utilities.tklib_vector_bisect(v, value)
tklib_vector_bisect = _gsl_utilities.tklib_vector_bisect
# This file is compatible with both classic and new-style classes.


