"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import waypoint_id_t

class navigator_plan_t(object):
    __slots__ = ["utime", "num_waypoints", "waypoints", "checkpoint_index", "checkpoints_remaining"]

    def __init__(self):
        self.utime = 0
        self.num_waypoints = 0
        self.waypoints = []
        self.checkpoint_index = 0
        self.checkpoints_remaining = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(navigator_plan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_waypoints))
        for i0 in range(self.num_waypoints):
            self.waypoints[i0]._encode_one(buf)
        buf.write(struct.pack(">ii", self.checkpoint_index, self.checkpoints_remaining))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != navigator_plan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return navigator_plan_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = navigator_plan_t()
        self.utime, self.num_waypoints = struct.unpack(">qi", buf.read(12))
        self.waypoints = []
        for i0 in range(self.num_waypoints):
            self.waypoints.append(waypoint_id_t.waypoint_id_t._decode_one(buf))
        self.checkpoint_index, self.checkpoints_remaining = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if navigator_plan_t in parents: return 0
        newparents = parents + [navigator_plan_t]
        tmphash = (0x33d26d028ce87136+ waypoint_id_t.waypoint_id_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if navigator_plan_t._packed_fingerprint is None:
            navigator_plan_t._packed_fingerprint = struct.pack(">Q", navigator_plan_t._get_hash_recursive([]))
        return navigator_plan_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

