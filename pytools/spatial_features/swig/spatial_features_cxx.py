# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spatial_features_cxx', [dirname(__file__)])
        except ImportError:
            import _spatial_features_cxx
            return _spatial_features_cxx
        if fp is not None:
            try:
                _mod = imp.load_module('_spatial_features_cxx', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spatial_features_cxx = swig_import_helper()
    del swig_import_helper
else:
    import _spatial_features_cxx
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spatial_features_cxx.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _spatial_features_cxx.SwigPyIterator_value(self)
    def incr(self, n = 1): return _spatial_features_cxx.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _spatial_features_cxx.SwigPyIterator_decr(self, n)
    def distance(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator_distance(self, *args, **kwargs)
    def equal(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator_equal(self, *args, **kwargs)
    def copy(self): return _spatial_features_cxx.SwigPyIterator_copy(self)
    def next(self): return _spatial_features_cxx.SwigPyIterator_next(self)
    def __next__(self): return _spatial_features_cxx.SwigPyIterator___next__(self)
    def previous(self): return _spatial_features_cxx.SwigPyIterator_previous(self)
    def advance(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator_advance(self, *args, **kwargs)
    def __eq__(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator___eq__(self, *args, **kwargs)
    def __ne__(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator___ne__(self, *args, **kwargs)
    def __iadd__(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator___iadd__(self, *args, **kwargs)
    def __isub__(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator___isub__(self, *args, **kwargs)
    def __add__(self, *args, **kwargs): return _spatial_features_cxx.SwigPyIterator___add__(self, *args, **kwargs)
    def __sub__(self, *args): return _spatial_features_cxx.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _spatial_features_cxx.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _spatial_features_cxx.new_doubleArray(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args, **kwargs): return _spatial_features_cxx.doubleArray___getitem__(self, *args, **kwargs)
    def __setitem__(self, *args, **kwargs): return _spatial_features_cxx.doubleArray___setitem__(self, *args, **kwargs)
    def cast(self): return _spatial_features_cxx.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _spatial_features_cxx.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_spatial_features_cxx.doubleArray_frompointer)
doubleArray_swigregister = _spatial_features_cxx.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args, **kwargs):
  return _spatial_features_cxx.doubleArray_frompointer(*args, **kwargs)
doubleArray_frompointer = _spatial_features_cxx.doubleArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _spatial_features_cxx.new_floatArray(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args, **kwargs): return _spatial_features_cxx.floatArray___getitem__(self, *args, **kwargs)
    def __setitem__(self, *args, **kwargs): return _spatial_features_cxx.floatArray___setitem__(self, *args, **kwargs)
    def cast(self): return _spatial_features_cxx.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _spatial_features_cxx.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_spatial_features_cxx.floatArray_frompointer)
floatArray_swigregister = _spatial_features_cxx.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args, **kwargs):
  return _spatial_features_cxx.floatArray_frompointer(*args, **kwargs)
floatArray_frompointer = _spatial_features_cxx.floatArray_frompointer

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _spatial_features_cxx.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _spatial_features_cxx.vectori___nonzero__(self)
    def __bool__(self): return _spatial_features_cxx.vectori___bool__(self)
    def __len__(self): return _spatial_features_cxx.vectori___len__(self)
    def pop(self): return _spatial_features_cxx.vectori_pop(self)
    def __getslice__(self, *args, **kwargs): return _spatial_features_cxx.vectori___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _spatial_features_cxx.vectori___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _spatial_features_cxx.vectori___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _spatial_features_cxx.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _spatial_features_cxx.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _spatial_features_cxx.vectori___setitem__(self, *args)
    def append(self, *args, **kwargs): return _spatial_features_cxx.vectori_append(self, *args, **kwargs)
    def empty(self): return _spatial_features_cxx.vectori_empty(self)
    def size(self): return _spatial_features_cxx.vectori_size(self)
    def clear(self): return _spatial_features_cxx.vectori_clear(self)
    def swap(self, *args, **kwargs): return _spatial_features_cxx.vectori_swap(self, *args, **kwargs)
    def get_allocator(self): return _spatial_features_cxx.vectori_get_allocator(self)
    def begin(self): return _spatial_features_cxx.vectori_begin(self)
    def end(self): return _spatial_features_cxx.vectori_end(self)
    def rbegin(self): return _spatial_features_cxx.vectori_rbegin(self)
    def rend(self): return _spatial_features_cxx.vectori_rend(self)
    def pop_back(self): return _spatial_features_cxx.vectori_pop_back(self)
    def erase(self, *args): return _spatial_features_cxx.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _spatial_features_cxx.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _spatial_features_cxx.vectori_push_back(self, *args, **kwargs)
    def front(self): return _spatial_features_cxx.vectori_front(self)
    def back(self): return _spatial_features_cxx.vectori_back(self)
    def assign(self, *args, **kwargs): return _spatial_features_cxx.vectori_assign(self, *args, **kwargs)
    def resize(self, *args): return _spatial_features_cxx.vectori_resize(self, *args)
    def insert(self, *args): return _spatial_features_cxx.vectori_insert(self, *args)
    def reserve(self, *args, **kwargs): return _spatial_features_cxx.vectori_reserve(self, *args, **kwargs)
    def capacity(self): return _spatial_features_cxx.vectori_capacity(self)
    __swig_destroy__ = _spatial_features_cxx.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _spatial_features_cxx.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _spatial_features_cxx.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _spatial_features_cxx.vectord___nonzero__(self)
    def __bool__(self): return _spatial_features_cxx.vectord___bool__(self)
    def __len__(self): return _spatial_features_cxx.vectord___len__(self)
    def pop(self): return _spatial_features_cxx.vectord_pop(self)
    def __getslice__(self, *args, **kwargs): return _spatial_features_cxx.vectord___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _spatial_features_cxx.vectord___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _spatial_features_cxx.vectord___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _spatial_features_cxx.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _spatial_features_cxx.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _spatial_features_cxx.vectord___setitem__(self, *args)
    def append(self, *args, **kwargs): return _spatial_features_cxx.vectord_append(self, *args, **kwargs)
    def empty(self): return _spatial_features_cxx.vectord_empty(self)
    def size(self): return _spatial_features_cxx.vectord_size(self)
    def clear(self): return _spatial_features_cxx.vectord_clear(self)
    def swap(self, *args, **kwargs): return _spatial_features_cxx.vectord_swap(self, *args, **kwargs)
    def get_allocator(self): return _spatial_features_cxx.vectord_get_allocator(self)
    def begin(self): return _spatial_features_cxx.vectord_begin(self)
    def end(self): return _spatial_features_cxx.vectord_end(self)
    def rbegin(self): return _spatial_features_cxx.vectord_rbegin(self)
    def rend(self): return _spatial_features_cxx.vectord_rend(self)
    def pop_back(self): return _spatial_features_cxx.vectord_pop_back(self)
    def erase(self, *args): return _spatial_features_cxx.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _spatial_features_cxx.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _spatial_features_cxx.vectord_push_back(self, *args, **kwargs)
    def front(self): return _spatial_features_cxx.vectord_front(self)
    def back(self): return _spatial_features_cxx.vectord_back(self)
    def assign(self, *args, **kwargs): return _spatial_features_cxx.vectord_assign(self, *args, **kwargs)
    def resize(self, *args): return _spatial_features_cxx.vectord_resize(self, *args)
    def insert(self, *args): return _spatial_features_cxx.vectord_insert(self, *args)
    def reserve(self, *args, **kwargs): return _spatial_features_cxx.vectord_reserve(self, *args, **kwargs)
    def capacity(self): return _spatial_features_cxx.vectord_capacity(self)
    __swig_destroy__ = _spatial_features_cxx.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _spatial_features_cxx.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _spatial_features_cxx.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _spatial_features_cxx.vectors___nonzero__(self)
    def __bool__(self): return _spatial_features_cxx.vectors___bool__(self)
    def __len__(self): return _spatial_features_cxx.vectors___len__(self)
    def pop(self): return _spatial_features_cxx.vectors_pop(self)
    def __getslice__(self, *args, **kwargs): return _spatial_features_cxx.vectors___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _spatial_features_cxx.vectors___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _spatial_features_cxx.vectors___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _spatial_features_cxx.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _spatial_features_cxx.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _spatial_features_cxx.vectors___setitem__(self, *args)
    def append(self, *args, **kwargs): return _spatial_features_cxx.vectors_append(self, *args, **kwargs)
    def empty(self): return _spatial_features_cxx.vectors_empty(self)
    def size(self): return _spatial_features_cxx.vectors_size(self)
    def clear(self): return _spatial_features_cxx.vectors_clear(self)
    def swap(self, *args, **kwargs): return _spatial_features_cxx.vectors_swap(self, *args, **kwargs)
    def get_allocator(self): return _spatial_features_cxx.vectors_get_allocator(self)
    def begin(self): return _spatial_features_cxx.vectors_begin(self)
    def end(self): return _spatial_features_cxx.vectors_end(self)
    def rbegin(self): return _spatial_features_cxx.vectors_rbegin(self)
    def rend(self): return _spatial_features_cxx.vectors_rend(self)
    def pop_back(self): return _spatial_features_cxx.vectors_pop_back(self)
    def erase(self, *args): return _spatial_features_cxx.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _spatial_features_cxx.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _spatial_features_cxx.vectors_push_back(self, *args, **kwargs)
    def front(self): return _spatial_features_cxx.vectors_front(self)
    def back(self): return _spatial_features_cxx.vectors_back(self)
    def assign(self, *args, **kwargs): return _spatial_features_cxx.vectors_assign(self, *args, **kwargs)
    def resize(self, *args): return _spatial_features_cxx.vectors_resize(self, *args)
    def insert(self, *args): return _spatial_features_cxx.vectors_insert(self, *args)
    def reserve(self, *args, **kwargs): return _spatial_features_cxx.vectors_reserve(self, *args, **kwargs)
    def capacity(self): return _spatial_features_cxx.vectors_capacity(self)
    __swig_destroy__ = _spatial_features_cxx.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _spatial_features_cxx.vectors_swigregister
vectors_swigregister(vectors)

class axes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, axes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, axes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major_st"] = _spatial_features_cxx.axes_major_st_set
    __swig_getmethods__["major_st"] = _spatial_features_cxx.axes_major_st_get
    if _newclass:major_st = _swig_property(_spatial_features_cxx.axes_major_st_get, _spatial_features_cxx.axes_major_st_set)
    __swig_setmethods__["major_end"] = _spatial_features_cxx.axes_major_end_set
    __swig_getmethods__["major_end"] = _spatial_features_cxx.axes_major_end_get
    if _newclass:major_end = _swig_property(_spatial_features_cxx.axes_major_end_get, _spatial_features_cxx.axes_major_end_set)
    __swig_setmethods__["minor_st"] = _spatial_features_cxx.axes_minor_st_set
    __swig_getmethods__["minor_st"] = _spatial_features_cxx.axes_minor_st_get
    if _newclass:minor_st = _swig_property(_spatial_features_cxx.axes_minor_st_get, _spatial_features_cxx.axes_minor_st_set)
    __swig_setmethods__["minor_end"] = _spatial_features_cxx.axes_minor_end_set
    __swig_getmethods__["minor_end"] = _spatial_features_cxx.axes_minor_end_get
    if _newclass:minor_end = _swig_property(_spatial_features_cxx.axes_minor_end_get, _spatial_features_cxx.axes_minor_end_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_axes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_axes
    __del__ = lambda self : None;
axes_swigregister = _spatial_features_cxx.axes_swigregister
axes_swigregister(axes)


def math2d_double_equal(*args, **kwargs):
  return _spatial_features_cxx.math2d_double_equal(*args, **kwargs)
math2d_double_equal = _spatial_features_cxx.math2d_double_equal

def math2d_point_equal(*args, **kwargs):
  return _spatial_features_cxx.math2d_point_equal(*args, **kwargs)
math2d_point_equal = _spatial_features_cxx.math2d_point_equal

def math2d_between(*args, **kwargs):
  return _spatial_features_cxx.math2d_between(*args, **kwargs)
math2d_between = _spatial_features_cxx.math2d_between

def math2d_bbox(*args, **kwargs):
  return _spatial_features_cxx.math2d_bbox(*args, **kwargs)
math2d_bbox = _spatial_features_cxx.math2d_bbox

def math2d_bbox_to_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_bbox_to_polygon(*args, **kwargs)
math2d_bbox_to_polygon = _spatial_features_cxx.math2d_bbox_to_polygon

def math2d_bbox_area(*args, **kwargs):
  return _spatial_features_cxx.math2d_bbox_area(*args, **kwargs)
math2d_bbox_area = _spatial_features_cxx.math2d_bbox_area

def math2d_get_scale(*args, **kwargs):
  return _spatial_features_cxx.math2d_get_scale(*args, **kwargs)
math2d_get_scale = _spatial_features_cxx.math2d_get_scale

def math2d_combined_matrix(*args, **kwargs):
  return _spatial_features_cxx.math2d_combined_matrix(*args, **kwargs)
math2d_combined_matrix = _spatial_features_cxx.math2d_combined_matrix

def math2d_closest_point_on_segment_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_closest_point_on_segment_line(*args, **kwargs)
math2d_closest_point_on_segment_line = _spatial_features_cxx.math2d_closest_point_on_segment_line

def math2d_slope(*args, **kwargs):
  return _spatial_features_cxx.math2d_slope(*args, **kwargs)
math2d_slope = _spatial_features_cxx.math2d_slope

def math2d_is_on_segment(*args, **kwargs):
  return _spatial_features_cxx.math2d_is_on_segment(*args, **kwargs)
math2d_is_on_segment = _spatial_features_cxx.math2d_is_on_segment

def math2d_is_on_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_is_on_line(*args, **kwargs)
math2d_is_on_line = _spatial_features_cxx.math2d_is_on_line

def math2d_is_on_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_is_on_polygon(*args, **kwargs)
math2d_is_on_polygon = _spatial_features_cxx.math2d_is_on_polygon

def math2d_closest_point_on_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_closest_point_on_line(*args, **kwargs)
math2d_closest_point_on_line = _spatial_features_cxx.math2d_closest_point_on_line

def math2d_closest_point_on_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_closest_point_on_polygon(*args, **kwargs)
math2d_closest_point_on_polygon = _spatial_features_cxx.math2d_closest_point_on_polygon

def math2d_compute_axes(*args, **kwargs):
  return _spatial_features_cxx.math2d_compute_axes(*args, **kwargs)
math2d_compute_axes = _spatial_features_cxx.math2d_compute_axes

def math2d_intersect_segments(*args, **kwargs):
  return _spatial_features_cxx.math2d_intersect_segments(*args, **kwargs)
math2d_intersect_segments = _spatial_features_cxx.math2d_intersect_segments

def math2d_perpendicular_segment(*args, **kwargs):
  return _spatial_features_cxx.math2d_perpendicular_segment(*args, **kwargs)
math2d_perpendicular_segment = _spatial_features_cxx.math2d_perpendicular_segment

def math2d_closest_point_on_segment(*args, **kwargs):
  return _spatial_features_cxx.math2d_closest_point_on_segment(*args, **kwargs)
math2d_closest_point_on_segment = _spatial_features_cxx.math2d_closest_point_on_segment

def math2d_intersect_polygon_line_analytic(*args, **kwargs):
  return _spatial_features_cxx.math2d_intersect_polygon_line_analytic(*args, **kwargs)
math2d_intersect_polygon_line_analytic = _spatial_features_cxx.math2d_intersect_polygon_line_analytic

def math2d_intersect_polygon_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_intersect_polygon_line(*args, **kwargs)
math2d_intersect_polygon_line = _spatial_features_cxx.math2d_intersect_polygon_line

def math2d_polygon_to_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_polygon_to_line(*args, **kwargs)
math2d_polygon_to_line = _spatial_features_cxx.math2d_polygon_to_line

def math2d_intersect_lines(*args, **kwargs):
  return _spatial_features_cxx.math2d_intersect_lines(*args, **kwargs)
math2d_intersect_lines = _spatial_features_cxx.math2d_intersect_lines

def math2d_intersect_line_segment_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_intersect_line_segment_line(*args, **kwargs)
math2d_intersect_line_segment_line = _spatial_features_cxx.math2d_intersect_line_segment_line

def math2d_is_interior_point(*args, **kwargs):
  return _spatial_features_cxx.math2d_is_interior_point(*args, **kwargs)
math2d_is_interior_point = _spatial_features_cxx.math2d_is_interior_point

def math2d_line_equation(*args, **kwargs):
  return _spatial_features_cxx.math2d_line_equation(*args, **kwargs)
math2d_line_equation = _spatial_features_cxx.math2d_line_equation

def math2d_compute_boundary_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_compute_boundary_line(*args, **kwargs)
math2d_compute_boundary_line = _spatial_features_cxx.math2d_compute_boundary_line

def math2d_square_dist(*args, **kwargs):
  return _spatial_features_cxx.math2d_square_dist(*args, **kwargs)
math2d_square_dist = _spatial_features_cxx.math2d_square_dist

def math2d_dist(*args, **kwargs):
  return _spatial_features_cxx.math2d_dist(*args, **kwargs)
math2d_dist = _spatial_features_cxx.math2d_dist

def math2d_line_length(*args, **kwargs):
  return _spatial_features_cxx.math2d_line_length(*args, **kwargs)
math2d_line_length = _spatial_features_cxx.math2d_line_length

def math2d_step_along_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_step_along_line(*args, **kwargs)
math2d_step_along_line = _spatial_features_cxx.math2d_step_along_line

def math2d_step_along_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_step_along_polygon(*args, **kwargs)
math2d_step_along_polygon = _spatial_features_cxx.math2d_step_along_polygon

def math2d_angle_between_segments(*args, **kwargs):
  return _spatial_features_cxx.math2d_angle_between_segments(*args, **kwargs)
math2d_angle_between_segments = _spatial_features_cxx.math2d_angle_between_segments

def math2d_perimeter(*args, **kwargs):
  return _spatial_features_cxx.math2d_perimeter(*args, **kwargs)
math2d_perimeter = _spatial_features_cxx.math2d_perimeter

def math2d_dist_between_points_along_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_dist_between_points_along_line(*args, **kwargs)
math2d_dist_between_points_along_line = _spatial_features_cxx.math2d_dist_between_points_along_line

def math2d_dist_between_points_along_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_dist_between_points_along_polygon(*args, **kwargs)
math2d_dist_between_points_along_polygon = _spatial_features_cxx.math2d_dist_between_points_along_polygon

def math2d_trim_polygon(*args, **kwargs):
  return _spatial_features_cxx.math2d_trim_polygon(*args, **kwargs)
math2d_trim_polygon = _spatial_features_cxx.math2d_trim_polygon

def math2d_trim_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_trim_line(*args, **kwargs)
math2d_trim_line = _spatial_features_cxx.math2d_trim_line
class eigenstuff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eigenstuff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eigenstuff, name)
    __repr__ = _swig_repr
    __swig_setmethods__["evals"] = _spatial_features_cxx.eigenstuff_evals_set
    __swig_getmethods__["evals"] = _spatial_features_cxx.eigenstuff_evals_get
    if _newclass:evals = _swig_property(_spatial_features_cxx.eigenstuff_evals_get, _spatial_features_cxx.eigenstuff_evals_set)
    __swig_setmethods__["evecs"] = _spatial_features_cxx.eigenstuff_evecs_set
    __swig_getmethods__["evecs"] = _spatial_features_cxx.eigenstuff_evecs_get
    if _newclass:evecs = _swig_property(_spatial_features_cxx.eigenstuff_evecs_get, _spatial_features_cxx.eigenstuff_evecs_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_eigenstuff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_eigenstuff
    __del__ = lambda self : None;
eigenstuff_swigregister = _spatial_features_cxx.eigenstuff_swigregister
eigenstuff_swigregister(eigenstuff)


def math2d_free_eigenstuff(*args, **kwargs):
  return _spatial_features_cxx.math2d_free_eigenstuff(*args, **kwargs)
math2d_free_eigenstuff = _spatial_features_cxx.math2d_free_eigenstuff

def math2d_eigenvectors(*args, **kwargs):
  return _spatial_features_cxx.math2d_eigenvectors(*args, **kwargs)
math2d_eigenvectors = _spatial_features_cxx.math2d_eigenvectors

def math2d_centroid(*args, **kwargs):
  return _spatial_features_cxx.math2d_centroid(*args, **kwargs)
math2d_centroid = _spatial_features_cxx.math2d_centroid

def math2d_signed_area(*args, **kwargs):
  return _spatial_features_cxx.math2d_signed_area(*args, **kwargs)
math2d_signed_area = _spatial_features_cxx.math2d_signed_area

def math2d_area(*args, **kwargs):
  return _spatial_features_cxx.math2d_area(*args, **kwargs)
math2d_area = _spatial_features_cxx.math2d_area

def math2d_eigen_axes(*args, **kwargs):
  return _spatial_features_cxx.math2d_eigen_axes(*args, **kwargs)
math2d_eigen_axes = _spatial_features_cxx.math2d_eigen_axes

def math2d_axes_free(*args, **kwargs):
  return _spatial_features_cxx.math2d_axes_free(*args, **kwargs)
math2d_axes_free = _spatial_features_cxx.math2d_axes_free
class fit_line_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fit_line_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fit_line_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["slope"] = _spatial_features_cxx.fit_line_result_slope_set
    __swig_getmethods__["slope"] = _spatial_features_cxx.fit_line_result_slope_get
    if _newclass:slope = _swig_property(_spatial_features_cxx.fit_line_result_slope_get, _spatial_features_cxx.fit_line_result_slope_set)
    __swig_setmethods__["intercept"] = _spatial_features_cxx.fit_line_result_intercept_set
    __swig_getmethods__["intercept"] = _spatial_features_cxx.fit_line_result_intercept_get
    if _newclass:intercept = _swig_property(_spatial_features_cxx.fit_line_result_intercept_get, _spatial_features_cxx.fit_line_result_intercept_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_fit_line_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_fit_line_result
    __del__ = lambda self : None;
fit_line_result_swigregister = _spatial_features_cxx.fit_line_result_swigregister
fit_line_result_swigregister(fit_line_result)


def math2d_fit_line(*args, **kwargs):
  return _spatial_features_cxx.math2d_fit_line(*args, **kwargs)
math2d_fit_line = _spatial_features_cxx.math2d_fit_line

def math2d_set_point(*args, **kwargs):
  return _spatial_features_cxx.math2d_set_point(*args, **kwargs)
math2d_set_point = _spatial_features_cxx.math2d_set_point

def math2d_point(*args, **kwargs):
  return _spatial_features_cxx.math2d_point(*args, **kwargs)
math2d_point = _spatial_features_cxx.math2d_point

def math2d_center_of_mass(*args, **kwargs):
  return _spatial_features_cxx.math2d_center_of_mass(*args, **kwargs)
math2d_center_of_mass = _spatial_features_cxx.math2d_center_of_mass

def math2d_points_printf(*args, **kwargs):
  return _spatial_features_cxx.math2d_points_printf(*args, **kwargs)
math2d_points_printf = _spatial_features_cxx.math2d_points_printf

def math2d_vector_printf(*args, **kwargs):
  return _spatial_features_cxx.math2d_vector_printf(*args, **kwargs)
math2d_vector_printf = _spatial_features_cxx.math2d_vector_printf

def math2d_vector_sum(*args, **kwargs):
  return _spatial_features_cxx.math2d_vector_sum(*args, **kwargs)
math2d_vector_sum = _spatial_features_cxx.math2d_vector_sum
class math2d_range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math2d_range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math2d_range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_i"] = _spatial_features_cxx.math2d_range_start_i_set
    __swig_getmethods__["start_i"] = _spatial_features_cxx.math2d_range_start_i_get
    if _newclass:start_i = _swig_property(_spatial_features_cxx.math2d_range_start_i_get, _spatial_features_cxx.math2d_range_start_i_set)
    __swig_setmethods__["end_i"] = _spatial_features_cxx.math2d_range_end_i_set
    __swig_getmethods__["end_i"] = _spatial_features_cxx.math2d_range_end_i_get
    if _newclass:end_i = _swig_property(_spatial_features_cxx.math2d_range_end_i_get, _spatial_features_cxx.math2d_range_end_i_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_math2d_range()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_math2d_range
    __del__ = lambda self : None;
math2d_range_swigregister = _spatial_features_cxx.math2d_range_swigregister
math2d_range_swigregister(math2d_range)


def math2d_smallest_window(*args, **kwargs):
  return _spatial_features_cxx.math2d_smallest_window(*args, **kwargs)
math2d_smallest_window = _spatial_features_cxx.math2d_smallest_window

def math2d_point_on_segment(*args, **kwargs):
  return _spatial_features_cxx.math2d_point_on_segment(*args, **kwargs)
math2d_point_on_segment = _spatial_features_cxx.math2d_point_on_segment

def math2d_top(*args, **kwargs):
  return _spatial_features_cxx.math2d_top(*args, **kwargs)
math2d_top = _spatial_features_cxx.math2d_top

def math2d_vector_to_unit_vector(*args, **kwargs):
  return _spatial_features_cxx.math2d_vector_to_unit_vector(*args, **kwargs)
math2d_vector_to_unit_vector = _spatial_features_cxx.math2d_vector_to_unit_vector

def math2d_is_visible(*args, **kwargs):
  return _spatial_features_cxx.math2d_is_visible(*args, **kwargs)
math2d_is_visible = _spatial_features_cxx.math2d_is_visible

def math2d_lowest_point(*args, **kwargs):
  return _spatial_features_cxx.math2d_lowest_point(*args, **kwargs)
math2d_lowest_point = _spatial_features_cxx.math2d_lowest_point

def math2d_highest_point(*args, **kwargs):
  return _spatial_features_cxx.math2d_highest_point(*args, **kwargs)
math2d_highest_point = _spatial_features_cxx.math2d_highest_point

def math2d_height_in_direction(*args, **kwargs):
  return _spatial_features_cxx.math2d_height_in_direction(*args, **kwargs)
math2d_height_in_direction = _spatial_features_cxx.math2d_height_in_direction

def math2d_point_length(*args, **kwargs):
  return _spatial_features_cxx.math2d_point_length(*args, **kwargs)
math2d_point_length = _spatial_features_cxx.math2d_point_length

def math2d_angle_between_points(*args, **kwargs):
  return _spatial_features_cxx.math2d_angle_between_points(*args, **kwargs)
math2d_angle_between_points = _spatial_features_cxx.math2d_angle_between_points

def math2d_overlaps(*args, **kwargs):
  return _spatial_features_cxx.math2d_overlaps(*args, **kwargs)
math2d_overlaps = _spatial_features_cxx.math2d_overlaps

def math2d_midpoint_segment(*args, **kwargs):
  return _spatial_features_cxx.math2d_midpoint_segment(*args, **kwargs)
math2d_midpoint_segment = _spatial_features_cxx.math2d_midpoint_segment

def math2d_cmp_points(*args, **kwargs):
  return _spatial_features_cxx.math2d_cmp_points(*args, **kwargs)
math2d_cmp_points = _spatial_features_cxx.math2d_cmp_points

def math2d_cmp(*args, **kwargs):
  return _spatial_features_cxx.math2d_cmp(*args, **kwargs)
math2d_cmp = _spatial_features_cxx.math2d_cmp

def math2d_sort_points(*args, **kwargs):
  return _spatial_features_cxx.math2d_sort_points(*args, **kwargs)
math2d_sort_points = _spatial_features_cxx.math2d_sort_points

def math2d_angle(*args, **kwargs):
  return _spatial_features_cxx.math2d_angle(*args, **kwargs)
math2d_angle = _spatial_features_cxx.math2d_angle

def math2d_rotate(*args, **kwargs):
  return _spatial_features_cxx.math2d_rotate(*args, **kwargs)
math2d_rotate = _spatial_features_cxx.math2d_rotate

def math2d_range_overlaps(*args, **kwargs):
  return _spatial_features_cxx.math2d_range_overlaps(*args, **kwargs)
math2d_range_overlaps = _spatial_features_cxx.math2d_range_overlaps

def math2d_copy_point_list_up_to(*args, **kwargs):
  return _spatial_features_cxx.math2d_copy_point_list_up_to(*args, **kwargs)
math2d_copy_point_list_up_to = _spatial_features_cxx.math2d_copy_point_list_up_to
class math3d_prism_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math3d_prism_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math3d_prism_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["points_xy"] = _spatial_features_cxx.math3d_prism_t_points_xy_set
    __swig_getmethods__["points_xy"] = _spatial_features_cxx.math3d_prism_t_points_xy_get
    if _newclass:points_xy = _swig_property(_spatial_features_cxx.math3d_prism_t_points_xy_get, _spatial_features_cxx.math3d_prism_t_points_xy_set)
    __swig_setmethods__["z_start"] = _spatial_features_cxx.math3d_prism_t_z_start_set
    __swig_getmethods__["z_start"] = _spatial_features_cxx.math3d_prism_t_z_start_get
    if _newclass:z_start = _swig_property(_spatial_features_cxx.math3d_prism_t_z_start_get, _spatial_features_cxx.math3d_prism_t_z_start_set)
    __swig_setmethods__["z_end"] = _spatial_features_cxx.math3d_prism_t_z_end_set
    __swig_getmethods__["z_end"] = _spatial_features_cxx.math3d_prism_t_z_end_get
    if _newclass:z_end = _swig_property(_spatial_features_cxx.math3d_prism_t_z_end_get, _spatial_features_cxx.math3d_prism_t_z_end_set)
    __swig_setmethods__["initialized"] = _spatial_features_cxx.math3d_prism_t_initialized_set
    __swig_getmethods__["initialized"] = _spatial_features_cxx.math3d_prism_t_initialized_get
    if _newclass:initialized = _swig_property(_spatial_features_cxx.math3d_prism_t_initialized_get, _spatial_features_cxx.math3d_prism_t_initialized_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_math3d_prism_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_math3d_prism_t
    __del__ = lambda self : None;
math3d_prism_t_swigregister = _spatial_features_cxx.math3d_prism_t_swigregister
math3d_prism_t_swigregister(math3d_prism_t)


def math3d_prism_init():
  return _spatial_features_cxx.math3d_prism_init()
math3d_prism_init = _spatial_features_cxx.math3d_prism_init

def math3d_prism_free(*args, **kwargs):
  return _spatial_features_cxx.math3d_prism_free(*args, **kwargs)
math3d_prism_free = _spatial_features_cxx.math3d_prism_free

def math3d_higher_than(*args, **kwargs):
  return _spatial_features_cxx.math3d_higher_than(*args, **kwargs)
math3d_higher_than = _spatial_features_cxx.math3d_higher_than

def math3d_starts_higher_than(*args, **kwargs):
  return _spatial_features_cxx.math3d_starts_higher_than(*args, **kwargs)
math3d_starts_higher_than = _spatial_features_cxx.math3d_starts_higher_than

def math3d_supports(*args, **kwargs):
  return _spatial_features_cxx.math3d_supports(*args, **kwargs)
math3d_supports = _spatial_features_cxx.math3d_supports

def math3d_intersect_prisms(*args, **kwargs):
  return _spatial_features_cxx.math3d_intersect_prisms(*args, **kwargs)
math3d_intersect_prisms = _spatial_features_cxx.math3d_intersect_prisms

def math3d_compress(*args, **kwargs):
  return _spatial_features_cxx.math3d_compress(*args, **kwargs)
math3d_compress = _spatial_features_cxx.math3d_compress

def math3d_dist(*args, **kwargs):
  return _spatial_features_cxx.math3d_dist(*args, **kwargs)
math3d_dist = _spatial_features_cxx.math3d_dist

def math3d_square_dist(*args, **kwargs):
  return _spatial_features_cxx.math3d_square_dist(*args, **kwargs)
math3d_square_dist = _spatial_features_cxx.math3d_square_dist

def math3d_intersect_line_plane(*args, **kwargs):
  return _spatial_features_cxx.math3d_intersect_line_plane(*args, **kwargs)
math3d_intersect_line_plane = _spatial_features_cxx.math3d_intersect_line_plane
class avs_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avs_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avs_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vsum"] = _spatial_features_cxx.avs_result_vsum_set
    __swig_getmethods__["vsum"] = _spatial_features_cxx.avs_result_vsum_get
    if _newclass:vsum = _swig_property(_spatial_features_cxx.avs_result_vsum_get, _spatial_features_cxx.avs_result_vsum_set)
    __swig_setmethods__["height_exp"] = _spatial_features_cxx.avs_result_height_exp_set
    __swig_getmethods__["height_exp"] = _spatial_features_cxx.avs_result_height_exp_get
    if _newclass:height_exp = _swig_property(_spatial_features_cxx.avs_result_height_exp_get, _spatial_features_cxx.avs_result_height_exp_set)
    __swig_setmethods__["height"] = _spatial_features_cxx.avs_result_height_set
    __swig_getmethods__["height"] = _spatial_features_cxx.avs_result_height_get
    if _newclass:height = _swig_property(_spatial_features_cxx.avs_result_height_get, _spatial_features_cxx.avs_result_height_set)
    __swig_setmethods__["hightop_height"] = _spatial_features_cxx.avs_result_hightop_height_set
    __swig_getmethods__["hightop_height"] = _spatial_features_cxx.avs_result_hightop_height_get
    if _newclass:hightop_height = _swig_property(_spatial_features_cxx.avs_result_hightop_height_get, _spatial_features_cxx.avs_result_hightop_height_set)
    __swig_setmethods__["lowtop_height"] = _spatial_features_cxx.avs_result_lowtop_height_set
    __swig_getmethods__["lowtop_height"] = _spatial_features_cxx.avs_result_lowtop_height_get
    if _newclass:lowtop_height = _swig_property(_spatial_features_cxx.avs_result_lowtop_height_get, _spatial_features_cxx.avs_result_lowtop_height_set)
    __swig_setmethods__["avsg"] = _spatial_features_cxx.avs_result_avsg_set
    __swig_getmethods__["avsg"] = _spatial_features_cxx.avs_result_avsg_get
    if _newclass:avsg = _swig_property(_spatial_features_cxx.avs_result_avsg_get, _spatial_features_cxx.avs_result_avsg_set)
    __swig_setmethods__["result"] = _spatial_features_cxx.avs_result_result_set
    __swig_getmethods__["result"] = _spatial_features_cxx.avs_result_result_get
    if _newclass:result = _swig_property(_spatial_features_cxx.avs_result_result_get, _spatial_features_cxx.avs_result_result_set)
    def __init__(self): 
        this = _spatial_features_cxx.new_avs_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spatial_features_cxx.delete_avs_result
    __del__ = lambda self : None;
avs_result_swigregister = _spatial_features_cxx.avs_result_swigregister
avs_result_swigregister(avs_result)


def avs_free(*args, **kwargs):
  return _spatial_features_cxx.avs_free(*args, **kwargs)
avs_free = _spatial_features_cxx.avs_free

def avs_avs(*args, **kwargs):
  return _spatial_features_cxx.avs_avs(*args, **kwargs)
avs_avs = _spatial_features_cxx.avs_avs

def avs_sig(*args, **kwargs):
  return _spatial_features_cxx.avs_sig(*args, **kwargs)
avs_sig = _spatial_features_cxx.avs_sig

def avs_height(*args, **kwargs):
  return _spatial_features_cxx.avs_height(*args, **kwargs)
avs_height = _spatial_features_cxx.avs_height

def avs_vector_sum(*args, **kwargs):
  return _spatial_features_cxx.avs_vector_sum(*args, **kwargs)
avs_vector_sum = _spatial_features_cxx.avs_vector_sum

def avs_g(*args, **kwargs):
  return _spatial_features_cxx.avs_g(*args, **kwargs)
avs_g = _spatial_features_cxx.avs_g

def spatial_features_distance_path_to_landmark(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_distance_path_to_landmark(*args, **kwargs)
spatial_features_distance_path_to_landmark = _spatial_features_cxx.spatial_features_distance_path_to_landmark

def spatial_features_overlap_feature(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_overlap_feature(*args, **kwargs)
spatial_features_overlap_feature = _spatial_features_cxx.spatial_features_overlap_feature

def spatial_features_orientation_direction_between(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_orientation_direction_between(*args, **kwargs)
spatial_features_orientation_direction_between = _spatial_features_cxx.spatial_features_orientation_direction_between

def spatial_features_theta_between(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_theta_between(*args, **kwargs)
spatial_features_theta_between = _spatial_features_cxx.spatial_features_theta_between

def spatial_features_axes(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_axes(*args, **kwargs)
spatial_features_axes = _spatial_features_cxx.spatial_features_axes

def spatial_features_displacement_feature(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_displacement_feature(*args, **kwargs)
spatial_features_displacement_feature = _spatial_features_cxx.spatial_features_displacement_feature

def spatial_features_boundary(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_boundary(*args, **kwargs)
spatial_features_boundary = _spatial_features_cxx.spatial_features_boundary

def spatial_features_past_axes(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_past_axes(*args, **kwargs)
spatial_features_past_axes = _spatial_features_cxx.spatial_features_past_axes

def spatial_features_bounding_box(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_bounding_box(*args, **kwargs)
spatial_features_bounding_box = _spatial_features_cxx.spatial_features_bounding_box

def spatial_features_distance_polygon_polygon(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_distance_polygon_polygon(*args, **kwargs)
spatial_features_distance_polygon_polygon = _spatial_features_cxx.spatial_features_distance_polygon_polygon
AVS_DIRECTION_COUNT = _spatial_features_cxx.AVS_DIRECTION_COUNT

def spatial_features_avs_polygon_polygon(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_avs_polygon_polygon(*args, **kwargs)
spatial_features_avs_polygon_polygon = _spatial_features_cxx.spatial_features_avs_polygon_polygon

def spatial_features_names_avs_polygon_polygon():
  return _spatial_features_cxx.spatial_features_names_avs_polygon_polygon()
spatial_features_names_avs_polygon_polygon = _spatial_features_cxx.spatial_features_names_avs_polygon_polygon

def spatial_features_prism_prism(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_prism_prism(*args, **kwargs)
spatial_features_prism_prism = _spatial_features_cxx.spatial_features_prism_prism

def spatial_features_three_polygons(*args, **kwargs):
  return _spatial_features_cxx.spatial_features_three_polygons(*args, **kwargs)
spatial_features_three_polygons = _spatial_features_cxx.spatial_features_three_polygons

def flu_binarize_feature_uniform(*args, **kwargs):
  return _spatial_features_cxx.flu_binarize_feature_uniform(*args, **kwargs)
flu_binarize_feature_uniform = _spatial_features_cxx.flu_binarize_feature_uniform

def sfe_extract_path_path(*args, **kwargs):
  return _spatial_features_cxx.sfe_extract_path_path(*args, **kwargs)
sfe_extract_path_path = _spatial_features_cxx.sfe_extract_path_path

def sfe_extract_f_path_l_polygon(*args, **kwargs):
  return _spatial_features_cxx.sfe_extract_f_path_l_polygon(*args, **kwargs)
sfe_extract_f_path_l_polygon = _spatial_features_cxx.sfe_extract_f_path_l_polygon
NORMALIZATION_NONE = _spatial_features_cxx.NORMALIZATION_NONE
NORMALIZATION_BBOX_ALL = _spatial_features_cxx.NORMALIZATION_BBOX_ALL
NORMALIZATION_BBOX_AREA = _spatial_features_cxx.NORMALIZATION_BBOX_AREA
NORMALIZATION_BBOX_FIGURE = _spatial_features_cxx.NORMALIZATION_BBOX_FIGURE
NORMALIZATION_FIGURE_LENGTH = _spatial_features_cxx.NORMALIZATION_FIGURE_LENGTH
NORMALIZATION_AXES = _spatial_features_cxx.NORMALIZATION_AXES

def sfe_get_normalization_mask(*args, **kwargs):
  return _spatial_features_cxx.sfe_get_normalization_mask(*args, **kwargs)
sfe_get_normalization_mask = _spatial_features_cxx.sfe_get_normalization_mask

def sfe_normalize_feature_vector(*args, **kwargs):
  return _spatial_features_cxx.sfe_normalize_feature_vector(*args, **kwargs)
sfe_normalize_feature_vector = _spatial_features_cxx.sfe_normalize_feature_vector

def sfe_polygon_features(*args, **kwargs):
  return _spatial_features_cxx.sfe_polygon_features(*args, **kwargs)
sfe_polygon_features = _spatial_features_cxx.sfe_polygon_features

def sfe_path_features(*args, **kwargs):
  return _spatial_features_cxx.sfe_path_features(*args, **kwargs)
sfe_path_features = _spatial_features_cxx.sfe_path_features

def sfe_path_polygon_features(*args, **kwargs):
  return _spatial_features_cxx.sfe_path_polygon_features(*args, **kwargs)
sfe_path_polygon_features = _spatial_features_cxx.sfe_path_polygon_features

def sfe_overlap_features(*args, **kwargs):
  return _spatial_features_cxx.sfe_overlap_features(*args, **kwargs)
sfe_overlap_features = _spatial_features_cxx.sfe_overlap_features

def sfe_merge_feature_vectors(*args, **kwargs):
  return _spatial_features_cxx.sfe_merge_feature_vectors(*args, **kwargs)
sfe_merge_feature_vectors = _spatial_features_cxx.sfe_merge_feature_vectors

def sfe_free_features(*args, **kwargs):
  return _spatial_features_cxx.sfe_free_features(*args, **kwargs)
sfe_free_features = _spatial_features_cxx.sfe_free_features

def sfe_polygon_names():
  return _spatial_features_cxx.sfe_polygon_names()
sfe_polygon_names = _spatial_features_cxx.sfe_polygon_names

def sfe_path_names():
  return _spatial_features_cxx.sfe_path_names()
sfe_path_names = _spatial_features_cxx.sfe_path_names

def sfe_overlap_names():
  return _spatial_features_cxx.sfe_overlap_names()
sfe_overlap_names = _spatial_features_cxx.sfe_overlap_names

def sfe_path_path_names():
  return _spatial_features_cxx.sfe_path_path_names()
sfe_path_path_names = _spatial_features_cxx.sfe_path_path_names

def sfe_path_polygon_names():
  return _spatial_features_cxx.sfe_path_polygon_names()
sfe_path_polygon_names = _spatial_features_cxx.sfe_path_polygon_names

def sfe_f_prism_l_prism_names():
  return _spatial_features_cxx.sfe_f_prism_l_prism_names()
sfe_f_prism_l_prism_names = _spatial_features_cxx.sfe_f_prism_l_prism_names

def sfe_f_polygon_l_polygon_names():
  return _spatial_features_cxx.sfe_f_polygon_l_polygon_names()
sfe_f_polygon_l_polygon_names = _spatial_features_cxx.sfe_f_polygon_l_polygon_names

def sfe_f_polygon_l_polygon_l_polygon_names():
  return _spatial_features_cxx.sfe_f_polygon_l_polygon_l_polygon_names()
sfe_f_polygon_l_polygon_l_polygon_names = _spatial_features_cxx.sfe_f_polygon_l_polygon_l_polygon_names

def sfe_f_path_l_polygon_names():
  return _spatial_features_cxx.sfe_f_path_l_polygon_names()
sfe_f_path_l_polygon_names = _spatial_features_cxx.sfe_f_path_l_polygon_names

def sfe_f_polygon_l_polygon(*args, **kwargs):
  return _spatial_features_cxx.sfe_f_polygon_l_polygon(*args, **kwargs)
sfe_f_polygon_l_polygon = _spatial_features_cxx.sfe_f_polygon_l_polygon

def sfe_f_polygon_l_polygon_l_polygon(*args, **kwargs):
  return _spatial_features_cxx.sfe_f_polygon_l_polygon_l_polygon(*args, **kwargs)
sfe_f_polygon_l_polygon_l_polygon = _spatial_features_cxx.sfe_f_polygon_l_polygon_l_polygon

def sfe_f_prism_l_prism(*args, **kwargs):
  return _spatial_features_cxx.sfe_f_prism_l_prism(*args, **kwargs)
sfe_f_prism_l_prism = _spatial_features_cxx.sfe_f_prism_l_prism

def flu_polygon(*args, **kwargs):
  return _spatial_features_cxx.flu_polygon(*args, **kwargs)
flu_polygon = _spatial_features_cxx.flu_polygon

def flu_polygon_names(*args, **kwargs):
  return _spatial_features_cxx.flu_polygon_names(*args, **kwargs)
flu_polygon_names = _spatial_features_cxx.flu_polygon_names

def crf_get_word_features(*args, **kwargs):
  return _spatial_features_cxx.crf_get_word_features(*args, **kwargs)
crf_get_word_features = _spatial_features_cxx.crf_get_word_features

def sfe_score_feature_map(*args, **kwargs):
  return _spatial_features_cxx.sfe_score_feature_map(*args, **kwargs)
sfe_score_feature_map = _spatial_features_cxx.sfe_score_feature_map

cvar = _spatial_features_cxx.cvar

