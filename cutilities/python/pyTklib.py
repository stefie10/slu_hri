# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyTklib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyTklib')
    _pyTklib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyTklib', [dirname(__file__)])
        except ImportError:
            import _pyTklib
            return _pyTklib
        try:
            _mod = imp.load_module('_pyTklib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyTklib = swig_import_helper()
    del swig_import_helper
else:
    import _pyTklib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class carmen_spline_free_request_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_spline_free_request_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_spline_free_request_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _pyTklib.carmen_spline_free_request_message_x0_set
    __swig_getmethods__["x0"] = _pyTklib.carmen_spline_free_request_message_x0_get
    if _newclass:
        x0 = _swig_property(_pyTklib.carmen_spline_free_request_message_x0_get, _pyTklib.carmen_spline_free_request_message_x0_set)
    __swig_setmethods__["y0"] = _pyTklib.carmen_spline_free_request_message_y0_set
    __swig_getmethods__["y0"] = _pyTklib.carmen_spline_free_request_message_y0_get
    if _newclass:
        y0 = _swig_property(_pyTklib.carmen_spline_free_request_message_y0_get, _pyTklib.carmen_spline_free_request_message_y0_set)
    __swig_setmethods__["x1"] = _pyTklib.carmen_spline_free_request_message_x1_set
    __swig_getmethods__["x1"] = _pyTklib.carmen_spline_free_request_message_x1_get
    if _newclass:
        x1 = _swig_property(_pyTklib.carmen_spline_free_request_message_x1_get, _pyTklib.carmen_spline_free_request_message_x1_set)
    __swig_setmethods__["y1"] = _pyTklib.carmen_spline_free_request_message_y1_set
    __swig_getmethods__["y1"] = _pyTklib.carmen_spline_free_request_message_y1_get
    if _newclass:
        y1 = _swig_property(_pyTklib.carmen_spline_free_request_message_y1_get, _pyTklib.carmen_spline_free_request_message_y1_set)
    __swig_setmethods__["start_magnitude"] = _pyTklib.carmen_spline_free_request_message_start_magnitude_set
    __swig_getmethods__["start_magnitude"] = _pyTklib.carmen_spline_free_request_message_start_magnitude_get
    if _newclass:
        start_magnitude = _swig_property(_pyTklib.carmen_spline_free_request_message_start_magnitude_get, _pyTklib.carmen_spline_free_request_message_start_magnitude_set)
    __swig_setmethods__["end_magnitude"] = _pyTklib.carmen_spline_free_request_message_end_magnitude_set
    __swig_getmethods__["end_magnitude"] = _pyTklib.carmen_spline_free_request_message_end_magnitude_get
    if _newclass:
        end_magnitude = _swig_property(_pyTklib.carmen_spline_free_request_message_end_magnitude_get, _pyTklib.carmen_spline_free_request_message_end_magnitude_set)
    __swig_setmethods__["start_theta"] = _pyTklib.carmen_spline_free_request_message_start_theta_set
    __swig_getmethods__["start_theta"] = _pyTklib.carmen_spline_free_request_message_start_theta_get
    if _newclass:
        start_theta = _swig_property(_pyTklib.carmen_spline_free_request_message_start_theta_get, _pyTklib.carmen_spline_free_request_message_start_theta_set)
    __swig_setmethods__["end_theta"] = _pyTklib.carmen_spline_free_request_message_end_theta_set
    __swig_getmethods__["end_theta"] = _pyTklib.carmen_spline_free_request_message_end_theta_get
    if _newclass:
        end_theta = _swig_property(_pyTklib.carmen_spline_free_request_message_end_theta_get, _pyTklib.carmen_spline_free_request_message_end_theta_set)
    __swig_setmethods__["signature"] = _pyTklib.carmen_spline_free_request_message_signature_set
    __swig_getmethods__["signature"] = _pyTklib.carmen_spline_free_request_message_signature_get
    if _newclass:
        signature = _swig_property(_pyTklib.carmen_spline_free_request_message_signature_get, _pyTklib.carmen_spline_free_request_message_signature_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_spline_free_request_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_spline_free_request_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_spline_free_request_message_timestamp_get, _pyTklib.carmen_spline_free_request_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_spline_free_request_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_spline_free_request_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_spline_free_request_message_host_get, _pyTklib.carmen_spline_free_request_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_spline_free_request_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_spline_free_request_message
    __del__ = lambda self: None
carmen_spline_free_request_message_swigregister = _pyTklib.carmen_spline_free_request_message_swigregister
carmen_spline_free_request_message_swigregister(carmen_spline_free_request_message)

CARMEN_SPLINE_FREE_REQUEST_MESSAGE_NAME = _pyTklib.CARMEN_SPLINE_FREE_REQUEST_MESSAGE_NAME
CARMEN_SPLINE_FREE_REQUEST_MESSAGE_FMT = _pyTklib.CARMEN_SPLINE_FREE_REQUEST_MESSAGE_FMT
class carmen_trajopt_curr_spline_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_trajopt_curr_spline_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_trajopt_curr_spline_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _pyTklib.carmen_trajopt_curr_spline_message_x0_set
    __swig_getmethods__["x0"] = _pyTklib.carmen_trajopt_curr_spline_message_x0_get
    if _newclass:
        x0 = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_x0_get, _pyTklib.carmen_trajopt_curr_spline_message_x0_set)
    __swig_setmethods__["y0"] = _pyTklib.carmen_trajopt_curr_spline_message_y0_set
    __swig_getmethods__["y0"] = _pyTklib.carmen_trajopt_curr_spline_message_y0_get
    if _newclass:
        y0 = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_y0_get, _pyTklib.carmen_trajopt_curr_spline_message_y0_set)
    __swig_setmethods__["x1"] = _pyTklib.carmen_trajopt_curr_spline_message_x1_set
    __swig_getmethods__["x1"] = _pyTklib.carmen_trajopt_curr_spline_message_x1_get
    if _newclass:
        x1 = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_x1_get, _pyTklib.carmen_trajopt_curr_spline_message_x1_set)
    __swig_setmethods__["y1"] = _pyTklib.carmen_trajopt_curr_spline_message_y1_set
    __swig_getmethods__["y1"] = _pyTklib.carmen_trajopt_curr_spline_message_y1_get
    if _newclass:
        y1 = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_y1_get, _pyTklib.carmen_trajopt_curr_spline_message_y1_set)
    __swig_setmethods__["start_magnitude"] = _pyTklib.carmen_trajopt_curr_spline_message_start_magnitude_set
    __swig_getmethods__["start_magnitude"] = _pyTklib.carmen_trajopt_curr_spline_message_start_magnitude_get
    if _newclass:
        start_magnitude = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_start_magnitude_get, _pyTklib.carmen_trajopt_curr_spline_message_start_magnitude_set)
    __swig_setmethods__["end_magnitude"] = _pyTklib.carmen_trajopt_curr_spline_message_end_magnitude_set
    __swig_getmethods__["end_magnitude"] = _pyTklib.carmen_trajopt_curr_spline_message_end_magnitude_get
    if _newclass:
        end_magnitude = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_end_magnitude_get, _pyTklib.carmen_trajopt_curr_spline_message_end_magnitude_set)
    __swig_setmethods__["start_theta"] = _pyTklib.carmen_trajopt_curr_spline_message_start_theta_set
    __swig_getmethods__["start_theta"] = _pyTklib.carmen_trajopt_curr_spline_message_start_theta_get
    if _newclass:
        start_theta = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_start_theta_get, _pyTklib.carmen_trajopt_curr_spline_message_start_theta_set)
    __swig_setmethods__["end_theta"] = _pyTklib.carmen_trajopt_curr_spline_message_end_theta_set
    __swig_getmethods__["end_theta"] = _pyTklib.carmen_trajopt_curr_spline_message_end_theta_get
    if _newclass:
        end_theta = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_end_theta_get, _pyTklib.carmen_trajopt_curr_spline_message_end_theta_set)
    __swig_setmethods__["signature"] = _pyTklib.carmen_trajopt_curr_spline_message_signature_set
    __swig_getmethods__["signature"] = _pyTklib.carmen_trajopt_curr_spline_message_signature_get
    if _newclass:
        signature = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_signature_get, _pyTklib.carmen_trajopt_curr_spline_message_signature_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_trajopt_curr_spline_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_trajopt_curr_spline_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_timestamp_get, _pyTklib.carmen_trajopt_curr_spline_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_trajopt_curr_spline_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_trajopt_curr_spline_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_trajopt_curr_spline_message_host_get, _pyTklib.carmen_trajopt_curr_spline_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_trajopt_curr_spline_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_trajopt_curr_spline_message
    __del__ = lambda self: None
carmen_trajopt_curr_spline_message_swigregister = _pyTklib.carmen_trajopt_curr_spline_message_swigregister
carmen_trajopt_curr_spline_message_swigregister(carmen_trajopt_curr_spline_message)

CARMEN_TRAJOPT_CURR_SPLINE_MESSAGE_NAME = _pyTklib.CARMEN_TRAJOPT_CURR_SPLINE_MESSAGE_NAME
CARMEN_TRAJOPT_CURR_SPLINE_MESSAGE_FMT = _pyTklib.CARMEN_TRAJOPT_CURR_SPLINE_MESSAGE_FMT
class carmen_spline_free_response_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_spline_free_response_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_spline_free_response_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _pyTklib.carmen_spline_free_response_message_state_set
    __swig_getmethods__["state"] = _pyTklib.carmen_spline_free_response_message_state_get
    if _newclass:
        state = _swig_property(_pyTklib.carmen_spline_free_response_message_state_get, _pyTklib.carmen_spline_free_response_message_state_set)
    __swig_setmethods__["signature"] = _pyTklib.carmen_spline_free_response_message_signature_set
    __swig_getmethods__["signature"] = _pyTklib.carmen_spline_free_response_message_signature_get
    if _newclass:
        signature = _swig_property(_pyTklib.carmen_spline_free_response_message_signature_get, _pyTklib.carmen_spline_free_response_message_signature_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_spline_free_response_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_spline_free_response_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_spline_free_response_message_timestamp_get, _pyTklib.carmen_spline_free_response_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_spline_free_response_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_spline_free_response_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_spline_free_response_message_host_get, _pyTklib.carmen_spline_free_response_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_spline_free_response_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_spline_free_response_message
    __del__ = lambda self: None
carmen_spline_free_response_message_swigregister = _pyTklib.carmen_spline_free_response_message_swigregister
carmen_spline_free_response_message_swigregister(carmen_spline_free_response_message)

CARMEN_SPLINE_FREE_RESPONSE_MESSAGE_NAME = _pyTklib.CARMEN_SPLINE_FREE_RESPONSE_MESSAGE_NAME
CARMEN_SPLINE_FREE_RESPONSE_MESSAGE_FMT = _pyTklib.CARMEN_SPLINE_FREE_RESPONSE_MESSAGE_FMT
class carmen_ekf_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_ekf_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_ekf_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size_mean"] = _pyTklib.carmen_ekf_message_size_mean_set
    __swig_getmethods__["size_mean"] = _pyTklib.carmen_ekf_message_size_mean_get
    if _newclass:
        size_mean = _swig_property(_pyTklib.carmen_ekf_message_size_mean_get, _pyTklib.carmen_ekf_message_size_mean_set)
    __swig_setmethods__["size_covariance"] = _pyTklib.carmen_ekf_message_size_covariance_set
    __swig_getmethods__["size_covariance"] = _pyTklib.carmen_ekf_message_size_covariance_get
    if _newclass:
        size_covariance = _swig_property(_pyTklib.carmen_ekf_message_size_covariance_get, _pyTklib.carmen_ekf_message_size_covariance_set)
    __swig_setmethods__["mean"] = _pyTklib.carmen_ekf_message_mean_set
    __swig_getmethods__["mean"] = _pyTklib.carmen_ekf_message_mean_get
    if _newclass:
        mean = _swig_property(_pyTklib.carmen_ekf_message_mean_get, _pyTklib.carmen_ekf_message_mean_set)
    __swig_setmethods__["covariance"] = _pyTklib.carmen_ekf_message_covariance_set
    __swig_getmethods__["covariance"] = _pyTklib.carmen_ekf_message_covariance_get
    if _newclass:
        covariance = _swig_property(_pyTklib.carmen_ekf_message_covariance_get, _pyTklib.carmen_ekf_message_covariance_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_ekf_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_ekf_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_ekf_message_timestamp_get, _pyTklib.carmen_ekf_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_ekf_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_ekf_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_ekf_message_host_get, _pyTklib.carmen_ekf_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_ekf_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_ekf_message
    __del__ = lambda self: None
carmen_ekf_message_swigregister = _pyTklib.carmen_ekf_message_swigregister
carmen_ekf_message_swigregister(carmen_ekf_message)

CARMEN_EKF_MESSAGE_NAME = _pyTklib.CARMEN_EKF_MESSAGE_NAME
CARMEN_EKF_MESSAGE_FMT = _pyTklib.CARMEN_EKF_MESSAGE_FMT
class carmen_gridmapping_pose_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_gridmapping_pose_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_gridmapping_pose_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyTklib.carmen_gridmapping_pose_message_x_set
    __swig_getmethods__["x"] = _pyTklib.carmen_gridmapping_pose_message_x_get
    if _newclass:
        x = _swig_property(_pyTklib.carmen_gridmapping_pose_message_x_get, _pyTklib.carmen_gridmapping_pose_message_x_set)
    __swig_setmethods__["y"] = _pyTklib.carmen_gridmapping_pose_message_y_set
    __swig_getmethods__["y"] = _pyTklib.carmen_gridmapping_pose_message_y_get
    if _newclass:
        y = _swig_property(_pyTklib.carmen_gridmapping_pose_message_y_get, _pyTklib.carmen_gridmapping_pose_message_y_set)
    __swig_setmethods__["theta"] = _pyTklib.carmen_gridmapping_pose_message_theta_set
    __swig_getmethods__["theta"] = _pyTklib.carmen_gridmapping_pose_message_theta_get
    if _newclass:
        theta = _swig_property(_pyTklib.carmen_gridmapping_pose_message_theta_get, _pyTklib.carmen_gridmapping_pose_message_theta_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_gridmapping_pose_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_gridmapping_pose_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_gridmapping_pose_message_timestamp_get, _pyTklib.carmen_gridmapping_pose_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_gridmapping_pose_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_gridmapping_pose_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_gridmapping_pose_message_host_get, _pyTklib.carmen_gridmapping_pose_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_gridmapping_pose_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_gridmapping_pose_message
    __del__ = lambda self: None
carmen_gridmapping_pose_message_swigregister = _pyTklib.carmen_gridmapping_pose_message_swigregister
carmen_gridmapping_pose_message_swigregister(carmen_gridmapping_pose_message)

CARMEN_GRIDMAPPING_POSE_NAME = _pyTklib.CARMEN_GRIDMAPPING_POSE_NAME
CARMEN_GRIDMAPPING_POSE_FMT = _pyTklib.CARMEN_GRIDMAPPING_POSE_FMT
class carmen_gridmapping_ray_trace_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_gridmapping_ray_trace_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_gridmapping_ray_trace_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyTklib.carmen_gridmapping_ray_trace_message_x_set
    __swig_getmethods__["x"] = _pyTklib.carmen_gridmapping_ray_trace_message_x_get
    if _newclass:
        x = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_x_get, _pyTklib.carmen_gridmapping_ray_trace_message_x_set)
    __swig_setmethods__["y"] = _pyTklib.carmen_gridmapping_ray_trace_message_y_set
    __swig_getmethods__["y"] = _pyTklib.carmen_gridmapping_ray_trace_message_y_get
    if _newclass:
        y = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_y_get, _pyTklib.carmen_gridmapping_ray_trace_message_y_set)
    __swig_setmethods__["theta"] = _pyTklib.carmen_gridmapping_ray_trace_message_theta_set
    __swig_getmethods__["theta"] = _pyTklib.carmen_gridmapping_ray_trace_message_theta_get
    if _newclass:
        theta = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_theta_get, _pyTklib.carmen_gridmapping_ray_trace_message_theta_set)
    __swig_setmethods__["num_readings"] = _pyTklib.carmen_gridmapping_ray_trace_message_num_readings_set
    __swig_getmethods__["num_readings"] = _pyTklib.carmen_gridmapping_ray_trace_message_num_readings_get
    if _newclass:
        num_readings = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_num_readings_get, _pyTklib.carmen_gridmapping_ray_trace_message_num_readings_set)
    __swig_setmethods__["thetas"] = _pyTklib.carmen_gridmapping_ray_trace_message_thetas_set
    __swig_getmethods__["thetas"] = _pyTklib.carmen_gridmapping_ray_trace_message_thetas_get
    if _newclass:
        thetas = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_thetas_get, _pyTklib.carmen_gridmapping_ray_trace_message_thetas_set)
    __swig_setmethods__["readings"] = _pyTklib.carmen_gridmapping_ray_trace_message_readings_set
    __swig_getmethods__["readings"] = _pyTklib.carmen_gridmapping_ray_trace_message_readings_get
    if _newclass:
        readings = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_readings_get, _pyTklib.carmen_gridmapping_ray_trace_message_readings_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_gridmapping_ray_trace_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_gridmapping_ray_trace_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_timestamp_get, _pyTklib.carmen_gridmapping_ray_trace_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_gridmapping_ray_trace_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_gridmapping_ray_trace_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_gridmapping_ray_trace_message_host_get, _pyTklib.carmen_gridmapping_ray_trace_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_gridmapping_ray_trace_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_gridmapping_ray_trace_message
    __del__ = lambda self: None
carmen_gridmapping_ray_trace_message_swigregister = _pyTklib.carmen_gridmapping_ray_trace_message_swigregister
carmen_gridmapping_ray_trace_message_swigregister(carmen_gridmapping_ray_trace_message)

CARMEN_GRIDMAPPING_RAY_TRACE_NAME = _pyTklib.CARMEN_GRIDMAPPING_RAY_TRACE_NAME
CARMEN_GRIDMAPPING_RAY_TRACE_FMT = _pyTklib.CARMEN_GRIDMAPPING_RAY_TRACE_FMT
class carmen_gridmapping_map_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_gridmapping_map_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_gridmapping_map_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map_length"] = _pyTklib.carmen_gridmapping_map_message_map_length_set
    __swig_getmethods__["map_length"] = _pyTklib.carmen_gridmapping_map_message_map_length_get
    if _newclass:
        map_length = _swig_property(_pyTklib.carmen_gridmapping_map_message_map_length_get, _pyTklib.carmen_gridmapping_map_message_map_length_set)
    __swig_setmethods__["map"] = _pyTklib.carmen_gridmapping_map_message_map_set
    __swig_getmethods__["map"] = _pyTklib.carmen_gridmapping_map_message_map_get
    if _newclass:
        map = _swig_property(_pyTklib.carmen_gridmapping_map_message_map_get, _pyTklib.carmen_gridmapping_map_message_map_set)
    __swig_setmethods__["size1"] = _pyTklib.carmen_gridmapping_map_message_size1_set
    __swig_getmethods__["size1"] = _pyTklib.carmen_gridmapping_map_message_size1_get
    if _newclass:
        size1 = _swig_property(_pyTklib.carmen_gridmapping_map_message_size1_get, _pyTklib.carmen_gridmapping_map_message_size1_set)
    __swig_setmethods__["size2"] = _pyTklib.carmen_gridmapping_map_message_size2_set
    __swig_getmethods__["size2"] = _pyTklib.carmen_gridmapping_map_message_size2_get
    if _newclass:
        size2 = _swig_property(_pyTklib.carmen_gridmapping_map_message_size2_get, _pyTklib.carmen_gridmapping_map_message_size2_set)
    __swig_setmethods__["resolution"] = _pyTklib.carmen_gridmapping_map_message_resolution_set
    __swig_getmethods__["resolution"] = _pyTklib.carmen_gridmapping_map_message_resolution_get
    if _newclass:
        resolution = _swig_property(_pyTklib.carmen_gridmapping_map_message_resolution_get, _pyTklib.carmen_gridmapping_map_message_resolution_set)
    __swig_setmethods__["x_origin"] = _pyTklib.carmen_gridmapping_map_message_x_origin_set
    __swig_getmethods__["x_origin"] = _pyTklib.carmen_gridmapping_map_message_x_origin_get
    if _newclass:
        x_origin = _swig_property(_pyTklib.carmen_gridmapping_map_message_x_origin_get, _pyTklib.carmen_gridmapping_map_message_x_origin_set)
    __swig_setmethods__["y_origin"] = _pyTklib.carmen_gridmapping_map_message_y_origin_set
    __swig_getmethods__["y_origin"] = _pyTklib.carmen_gridmapping_map_message_y_origin_get
    if _newclass:
        y_origin = _swig_property(_pyTklib.carmen_gridmapping_map_message_y_origin_get, _pyTklib.carmen_gridmapping_map_message_y_origin_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_gridmapping_map_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_gridmapping_map_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_gridmapping_map_message_timestamp_get, _pyTklib.carmen_gridmapping_map_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_gridmapping_map_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_gridmapping_map_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_gridmapping_map_message_host_get, _pyTklib.carmen_gridmapping_map_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_gridmapping_map_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_gridmapping_map_message
    __del__ = lambda self: None
carmen_gridmapping_map_message_swigregister = _pyTklib.carmen_gridmapping_map_message_swigregister
carmen_gridmapping_map_message_swigregister(carmen_gridmapping_map_message)

CARMEN_GRIDMAPPING_MAP_NAME = _pyTklib.CARMEN_GRIDMAPPING_MAP_NAME
CARMEN_GRIDMAPPING_MAP_FMT = _pyTklib.CARMEN_GRIDMAPPING_MAP_FMT
class carmen_trajopt_set_destinations_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_trajopt_set_destinations_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_trajopt_set_destinations_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_destinations"] = _pyTklib.carmen_trajopt_set_destinations_message_num_destinations_set
    __swig_getmethods__["num_destinations"] = _pyTklib.carmen_trajopt_set_destinations_message_num_destinations_get
    if _newclass:
        num_destinations = _swig_property(_pyTklib.carmen_trajopt_set_destinations_message_num_destinations_get, _pyTklib.carmen_trajopt_set_destinations_message_num_destinations_set)
    __swig_setmethods__["x"] = _pyTklib.carmen_trajopt_set_destinations_message_x_set
    __swig_getmethods__["x"] = _pyTklib.carmen_trajopt_set_destinations_message_x_get
    if _newclass:
        x = _swig_property(_pyTklib.carmen_trajopt_set_destinations_message_x_get, _pyTklib.carmen_trajopt_set_destinations_message_x_set)
    __swig_setmethods__["y"] = _pyTklib.carmen_trajopt_set_destinations_message_y_set
    __swig_getmethods__["y"] = _pyTklib.carmen_trajopt_set_destinations_message_y_get
    if _newclass:
        y = _swig_property(_pyTklib.carmen_trajopt_set_destinations_message_y_get, _pyTklib.carmen_trajopt_set_destinations_message_y_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_trajopt_set_destinations_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_trajopt_set_destinations_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_trajopt_set_destinations_message_timestamp_get, _pyTklib.carmen_trajopt_set_destinations_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_trajopt_set_destinations_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_trajopt_set_destinations_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_trajopt_set_destinations_message_host_get, _pyTklib.carmen_trajopt_set_destinations_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_trajopt_set_destinations_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_trajopt_set_destinations_message
    __del__ = lambda self: None
carmen_trajopt_set_destinations_message_swigregister = _pyTklib.carmen_trajopt_set_destinations_message_swigregister
carmen_trajopt_set_destinations_message_swigregister(carmen_trajopt_set_destinations_message)

CARMEN_TRAJOPT_SET_DESTINATIONS_NAME = _pyTklib.CARMEN_TRAJOPT_SET_DESTINATIONS_NAME
CARMEN_TRAJOPT_SET_DESTINATIONS_FMT = _pyTklib.CARMEN_TRAJOPT_SET_DESTINATIONS_FMT
class carmen_trajopt_destinations_config_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_trajopt_destinations_config_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_trajopt_destinations_config_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_destinations"] = _pyTklib.carmen_trajopt_destinations_config_message_num_destinations_set
    __swig_getmethods__["num_destinations"] = _pyTklib.carmen_trajopt_destinations_config_message_num_destinations_get
    if _newclass:
        num_destinations = _swig_property(_pyTklib.carmen_trajopt_destinations_config_message_num_destinations_get, _pyTklib.carmen_trajopt_destinations_config_message_num_destinations_set)
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_trajopt_destinations_config_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_trajopt_destinations_config_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_trajopt_destinations_config_message_timestamp_get, _pyTklib.carmen_trajopt_destinations_config_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_trajopt_destinations_config_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_trajopt_destinations_config_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_trajopt_destinations_config_message_host_get, _pyTklib.carmen_trajopt_destinations_config_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_trajopt_destinations_config_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_trajopt_destinations_config_message
    __del__ = lambda self: None
carmen_trajopt_destinations_config_message_swigregister = _pyTklib.carmen_trajopt_destinations_config_message_swigregister
carmen_trajopt_destinations_config_message_swigregister(carmen_trajopt_destinations_config_message)

CARMEN_TRAJOPT_DESTINATIONS_CONFIG_NAME = _pyTklib.CARMEN_TRAJOPT_DESTINATIONS_CONFIG_NAME
CARMEN_TRAJOPT_DESTINATIONS_CONFIG_FMT = _pyTklib.CARMEN_TRAJOPT_DESTINATIONS_CONFIG_FMT
class carmen_trajopt_go_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_trajopt_go_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_trajopt_go_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_trajopt_go_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_trajopt_go_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_trajopt_go_message_timestamp_get, _pyTklib.carmen_trajopt_go_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_trajopt_go_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_trajopt_go_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_trajopt_go_message_host_get, _pyTklib.carmen_trajopt_go_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_trajopt_go_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_trajopt_go_message
    __del__ = lambda self: None
carmen_trajopt_go_message_swigregister = _pyTklib.carmen_trajopt_go_message_swigregister
carmen_trajopt_go_message_swigregister(carmen_trajopt_go_message)

CARMEN_TRAJOPT_GO_NAME = _pyTklib.CARMEN_TRAJOPT_GO_NAME
CARMEN_TRAJOPT_GO_FMT = _pyTklib.CARMEN_TRAJOPT_GO_FMT
class carmen_trajopt_stop_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, carmen_trajopt_stop_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, carmen_trajopt_stop_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _pyTklib.carmen_trajopt_stop_message_timestamp_set
    __swig_getmethods__["timestamp"] = _pyTklib.carmen_trajopt_stop_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(_pyTklib.carmen_trajopt_stop_message_timestamp_get, _pyTklib.carmen_trajopt_stop_message_timestamp_set)
    __swig_setmethods__["host"] = _pyTklib.carmen_trajopt_stop_message_host_set
    __swig_getmethods__["host"] = _pyTklib.carmen_trajopt_stop_message_host_get
    if _newclass:
        host = _swig_property(_pyTklib.carmen_trajopt_stop_message_host_get, _pyTklib.carmen_trajopt_stop_message_host_set)

    def __init__(self):
        this = _pyTklib.new_carmen_trajopt_stop_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_carmen_trajopt_stop_message
    __del__ = lambda self: None
carmen_trajopt_stop_message_swigregister = _pyTklib.carmen_trajopt_stop_message_swigregister
carmen_trajopt_stop_message_swigregister(carmen_trajopt_stop_message)

CARMEN_TRAJOPT_STOP_NAME = _pyTklib.CARMEN_TRAJOPT_STOP_NAME
CARMEN_TRAJOPT_STOP_FMT = _pyTklib.CARMEN_TRAJOPT_STOP_FMT
class procrustes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, procrustes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, procrustes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sse"] = _pyTklib.procrustes_sse_set
    __swig_getmethods__["sse"] = _pyTklib.procrustes_sse_get
    if _newclass:
        sse = _swig_property(_pyTklib.procrustes_sse_get, _pyTklib.procrustes_sse_set)

    def __init__(self):
        this = _pyTklib.new_procrustes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, measured_pts, model_pts):
        return _pyTklib.procrustes_run(self, measured_pts, model_pts)

    def get_translation(self):
        return _pyTklib.procrustes_get_translation(self)

    def get_rotation(self):
        return _pyTklib.procrustes_get_rotation(self)

    def get_rotated_points(self):
        return _pyTklib.procrustes_get_rotated_points(self)
    __swig_destroy__ = _pyTklib.delete_procrustes
    __del__ = lambda self: None
procrustes_swigregister = _pyTklib.procrustes_swigregister
procrustes_swigregister(procrustes)


def procrustesSVD(model_pts, pts, rotated_pts, R, t):
    return _pyTklib.procrustesSVD(model_pts, pts, rotated_pts, R, t)
procrustesSVD = _pyTklib.procrustesSVD

def kmeans(X, iterations, init_means):
    return _pyTklib.kmeans(X, iterations, init_means)
kmeans = _pyTklib.kmeans

def kmeans_autoinit(X, iterations, num_clusters):
    return _pyTklib.kmeans_autoinit(X, iterations, num_clusters)
kmeans_autoinit = _pyTklib.kmeans_autoinit

def kmeans_get_labels(X, means):
    return _pyTklib.kmeans_get_labels(X, means)
kmeans_get_labels = _pyTklib.kmeans_get_labels

def kmeans_get_distances(X, pts):
    return _pyTklib.kmeans_get_distances(X, pts)
kmeans_get_distances = _pyTklib.kmeans_get_distances

def kmeans_compute_mean(X, labels):
    return _pyTklib.kmeans_compute_mean(X, labels)
kmeans_compute_mean = _pyTklib.kmeans_compute_mean

def kmeans_get_log_likelihood(X, u, labels, std):
    return _pyTklib.kmeans_get_log_likelihood(X, u, labels, std)
kmeans_get_log_likelihood = _pyTklib.kmeans_get_log_likelihood

def select_initial_cluster(X, init_clusters):
    return _pyTklib.select_initial_cluster(X, init_clusters)
select_initial_cluster = _pyTklib.select_initial_cluster

def tklib_sample_discrete(P, number_of_samples):
    return _pyTklib.tklib_sample_discrete(P, number_of_samples)
tklib_sample_discrete = _pyTklib.tklib_sample_discrete

def tklib_init_rng(seed):
    return _pyTklib.tklib_init_rng(seed)
tklib_init_rng = _pyTklib.tklib_init_rng

def tklib_randn():
    return _pyTklib.tklib_randn()
tklib_randn = _pyTklib.tklib_randn

def tklib_random():
    return _pyTklib.tklib_random()
tklib_random = _pyTklib.tklib_random

def tklib_randint(start, end):
    return _pyTklib.tklib_randint(start, end)
tklib_randint = _pyTklib.tklib_randint

def tklib_vector_randn(mean, std, n):
    return _pyTklib.tklib_vector_randn(mean, std, n)
tklib_vector_randn = _pyTklib.tklib_vector_randn

def tklib_vector_random(number):
    return _pyTklib.tklib_vector_random(number)
tklib_vector_random = _pyTklib.tklib_vector_random

def tklib_vector_randint(number, start, end):
    return _pyTklib.tklib_vector_randint(number, start, end)
tklib_vector_randint = _pyTklib.tklib_vector_randint

def tklib_get_transition_matrix_maxprob(M, num_steps):
    return _pyTklib.tklib_get_transition_matrix_maxprob(M, num_steps)
tklib_get_transition_matrix_maxprob = _pyTklib.tklib_get_transition_matrix_maxprob

def tklib_viterbi_update(P_prev, T, O_curr):
    return _pyTklib.tklib_viterbi_update(P_prev, T, O_curr)
tklib_viterbi_update = _pyTklib.tklib_viterbi_update

def compute_already_seen(curr_path, vp_i, vp_index_to_topo_index):
    return _pyTklib.compute_already_seen(curr_path, vp_i, vp_index_to_topo_index)
compute_already_seen = _pyTklib.compute_already_seen

def compute_already_seen_topo(curr_path, vp_i, vp_index_to_topo_index):
    return _pyTklib.compute_already_seen_topo(curr_path, vp_i, vp_index_to_topo_index)
compute_already_seen_topo = _pyTklib.compute_already_seen_topo

def tklib_du_get_path(parents, state_idx, time_idx):
    return _pyTklib.tklib_du_get_path(parents, state_idx, time_idx)
tklib_du_get_path = _pyTklib.tklib_du_get_path

def tklib_du_get_path_topN(parents_prev, parents_iN, state_idx, time_idx, iN_idx, N):
    return _pyTklib.tklib_du_get_path_topN(parents_prev, parents_iN, state_idx, time_idx, iN_idx, N)
tklib_du_get_path_topN = _pyTklib.tklib_du_get_path_topN

def tklib_du_update_log(P_log_prev, myparents, used_epsilons, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_index_to_topo_index, topo_i_to_location_mask, path_lengths, num_topologies, allow_multiple_sdcs_per_transition, sdc_is_epsilon, allow_backtracking, max_epsilon_transitions):
    return _pyTklib.tklib_du_update_log(P_log_prev, myparents, used_epsilons, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_index_to_topo_index, topo_i_to_location_mask, path_lengths, num_topologies, allow_multiple_sdcs_per_transition, sdc_is_epsilon, allow_backtracking, max_epsilon_transitions)
tklib_du_update_log = _pyTklib.tklib_du_update_log

def tklib_du_lp_obs(vp1_i, vp2_i, vp_index_to_topo_index, T_log_curr, D_log_curr, SR_log_curr, L_log_curr, O_log_curr, num_topologies):
    return _pyTklib.tklib_du_lp_obs(vp1_i, vp2_i, vp_index_to_topo_index, T_log_curr, D_log_curr, SR_log_curr, L_log_curr, O_log_curr, num_topologies)
tklib_du_lp_obs = _pyTklib.tklib_du_lp_obs

def tklib_du_lp_obs_array(num_viewpoints, vp_index_to_topo_index, T_log_curr, D_log_curr, SR_log_curr, L_log_curr, O_log_curr, topo_i_to_location_mask, num_topologies):
    return _pyTklib.tklib_du_lp_obs_array(num_viewpoints, vp_index_to_topo_index, T_log_curr, D_log_curr, SR_log_curr, L_log_curr, O_log_curr, topo_i_to_location_mask, num_topologies)
tklib_du_lp_obs_array = _pyTklib.tklib_du_lp_obs_array

def tklib_du_lp_sr(vp1_i, vp2_i, vp_index_to_topo_index, SR_log_curr, L_log_curr, O_log_curr, num_topologies):
    return _pyTklib.tklib_du_lp_sr(vp1_i, vp2_i, vp_index_to_topo_index, SR_log_curr, L_log_curr, O_log_curr, num_topologies)
tklib_du_lp_sr = _pyTklib.tklib_du_lp_sr

def tklib_du_lp_sr_array(num_viewpoints, vp_i_to_topo_i, SR_log_curr, L_log_curr, O_log_curr, num_topologies):
    return _pyTklib.tklib_du_lp_sr_array(num_viewpoints, vp_i_to_topo_i, SR_log_curr, L_log_curr, O_log_curr, num_topologies)
tklib_du_lp_sr_array = _pyTklib.tklib_du_lp_sr_array

def tklib_du_marginalize_log(prev_message, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_i_to_topo_i, num_topologies):
    return _pyTklib.tklib_du_marginalize_log(prev_message, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_i_to_topo_i, num_topologies)
tklib_du_marginalize_log = _pyTklib.tklib_du_marginalize_log

def tklib_du_update_log_topN(P_log_prev, myparents_prev, myparents_iN, used_epsilons, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_index_to_topo_index, topo_i_to_location_mask, num_topologies, allow_multiple_sdcs_per_transition, sdc_is_epsilon, allow_backtracking, max_epsilon_transitions, N):
    return _pyTklib.tklib_du_update_log_topN(P_log_prev, myparents_prev, myparents_iN, used_epsilons, T_log_curr, SR_log_curr, D_log_curr, L_log_curr, O_log_curr, vp_index_to_topo_index, topo_i_to_location_mask, num_topologies, allow_multiple_sdcs_per_transition, sdc_is_epsilon, allow_backtracking, max_epsilon_transitions, N)
tklib_du_update_log_topN = _pyTklib.tklib_du_update_log_topN

def NN_all(pt, pts):
    return _pyTklib.NN_all(pt, pts)
NN_all = _pyTklib.NN_all

def NN_all_index(pt, pts):
    return _pyTklib.NN_all_index(pt, pts)
NN_all_index = _pyTklib.NN_all_index

def kNN(pt, pts, k):
    return _pyTklib.kNN(pt, pts, k)
kNN = _pyTklib.kNN

def kNN_index(pt, pts, k):
    return _pyTklib.kNN_index(pt, pts, k)
kNN_index = _pyTklib.kNN_index

def NN(pt, pts):
    return _pyTklib.NN(pt, pts)
NN = _pyTklib.NN

def NNs(pts, model_pts):
    return _pyTklib.NNs(pts, model_pts)
NNs = _pyTklib.NNs

def NNs_index(pts, model_pts):
    return _pyTklib.NNs_index(pts, model_pts)
NNs_index = _pyTklib.NNs_index

def line_perpendicular_distance(pt, m, b):
    return _pyTklib.line_perpendicular_distance(pt, m, b)
line_perpendicular_distance = _pyTklib.line_perpendicular_distance

def get_line_parameters_m_pt(m, pt, m_ret, b_ret):
    return _pyTklib.get_line_parameters_m_pt(m, pt, m_ret, b_ret)
get_line_parameters_m_pt = _pyTklib.get_line_parameters_m_pt

def get_line_parameters_m_b(pt1, pt2, m_ret, b_ret):
    return _pyTklib.get_line_parameters_m_b(pt1, pt2, m_ret, b_ret)
get_line_parameters_m_b = _pyTklib.get_line_parameters_m_b

def box_inwindow(pts, x_st, x_end, box_height, box_dw, width_line_m, width_line_b, height_line_m, height_line_b):
    return _pyTklib.box_inwindow(pts, x_st, x_end, box_height, box_dw, width_line_m, width_line_b, height_line_m, height_line_b)
box_inwindow = _pyTklib.box_inwindow

def box_outwindow(pts, x_st, x_end, box_height, box_dw, width_line_m, width_line_b, height_line_m, height_line_b):
    return _pyTklib.box_outwindow(pts, x_st, x_end, box_height, box_dw, width_line_m, width_line_b, height_line_m, height_line_b)
box_outwindow = _pyTklib.box_outwindow

def pyobject_to_gsl_vector(list):
    return _pyTklib.pyobject_to_gsl_vector(list)
pyobject_to_gsl_vector = _pyTklib.pyobject_to_gsl_vector

def pyobject_to_gsl_matrix(list):
    return _pyTklib.pyobject_to_gsl_matrix(list)
pyobject_to_gsl_matrix = _pyTklib.pyobject_to_gsl_matrix

def gsl_matrix_to_pyobject(matrix_in):
    return _pyTklib.gsl_matrix_to_pyobject(matrix_in)
gsl_matrix_to_pyobject = _pyTklib.gsl_matrix_to_pyobject

def gsl_vector_to_pyobject(vector_in):
    return _pyTklib.gsl_vector_to_pyobject(vector_in)
gsl_vector_to_pyobject = _pyTklib.gsl_vector_to_pyobject

def hurdles_extract(pts, separation, separation_err, window_height, window_dw, min_log_likelihood):
    return _pyTklib.hurdles_extract(pts, separation, separation_err, window_height, window_dw, min_log_likelihood)
hurdles_extract = _pyTklib.hurdles_extract

def hurdles_extract_optimized(pts, separation, separation_err, window_height, window_dw, min_log_likelihood, searchahead):
    return _pyTklib.hurdles_extract_optimized(pts, separation, separation_err, window_height, window_dw, min_log_likelihood, searchahead)
hurdles_extract_optimized = _pyTklib.hurdles_extract_optimized

def hurdles_extract_optimized_search(pts, separation, separation_err, window_height, window_dw, min_log_likelihood, searchahead):
    return _pyTklib.hurdles_extract_optimized_search(pts, separation, separation_err, window_height, window_dw, min_log_likelihood, searchahead)
hurdles_extract_optimized_search = _pyTklib.hurdles_extract_optimized_search

def gaussian_normal_sample(cov, u):
    return _pyTklib.gaussian_normal_sample(cov, u)
gaussian_normal_sample = _pyTklib.gaussian_normal_sample

def gaussian_log_prob(X, u, cov):
    return _pyTklib.gaussian_log_prob(X, u, cov)
gaussian_log_prob = _pyTklib.gaussian_log_prob
class EKF2D_filter_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EKF2D_filter_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EKF2D_filter_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["U"] = _pyTklib.EKF2D_filter_state_U_set
    __swig_getmethods__["U"] = _pyTklib.EKF2D_filter_state_U_get
    if _newclass:
        U = _swig_property(_pyTklib.EKF2D_filter_state_U_get, _pyTklib.EKF2D_filter_state_U_set)
    __swig_setmethods__["SIGMA"] = _pyTklib.EKF2D_filter_state_SIGMA_set
    __swig_getmethods__["SIGMA"] = _pyTklib.EKF2D_filter_state_SIGMA_get
    if _newclass:
        SIGMA = _swig_property(_pyTklib.EKF2D_filter_state_SIGMA_get, _pyTklib.EKF2D_filter_state_SIGMA_set)
    __swig_setmethods__["associations"] = _pyTklib.EKF2D_filter_state_associations_set
    __swig_getmethods__["associations"] = _pyTklib.EKF2D_filter_state_associations_get
    if _newclass:
        associations = _swig_property(_pyTklib.EKF2D_filter_state_associations_get, _pyTklib.EKF2D_filter_state_associations_set)

    def __init__(self):
        this = _pyTklib.new_EKF2D_filter_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_EKF2D_filter_state
    __del__ = lambda self: None
EKF2D_filter_state_swigregister = _pyTklib.EKF2D_filter_state_swigregister
EKF2D_filter_state_swigregister(EKF2D_filter_state)


def EKF2D_measurement_update(measurements, measurement_covariance, alpha, U, SIGMA):
    return _pyTklib.EKF2D_measurement_update(measurements, measurement_covariance, alpha, U, SIGMA)
EKF2D_measurement_update = _pyTklib.EKF2D_measurement_update

def EKF2D_get_transfer_function(measurements, measurement_noise, motion_jacobian, motion_noise, motion_jacobian_zero, motion_noise_zero, alpha, U, SIGMA):
    return _pyTklib.EKF2D_get_transfer_function(measurements, measurement_noise, motion_jacobian, motion_noise, motion_jacobian_zero, motion_noise_zero, alpha, U, SIGMA)
EKF2D_get_transfer_function = _pyTklib.EKF2D_get_transfer_function
class tklib_log_gridmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tklib_log_gridmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tklib_log_gridmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x_size"] = _pyTklib.tklib_log_gridmap_x_size_set
    __swig_getmethods__["x_size"] = _pyTklib.tklib_log_gridmap_x_size_get
    if _newclass:
        x_size = _swig_property(_pyTklib.tklib_log_gridmap_x_size_get, _pyTklib.tklib_log_gridmap_x_size_set)
    __swig_setmethods__["y_size"] = _pyTklib.tklib_log_gridmap_y_size_set
    __swig_getmethods__["y_size"] = _pyTklib.tklib_log_gridmap_y_size_get
    if _newclass:
        y_size = _swig_property(_pyTklib.tklib_log_gridmap_y_size_get, _pyTklib.tklib_log_gridmap_y_size_set)
    __swig_setmethods__["resolution"] = _pyTklib.tklib_log_gridmap_resolution_set
    __swig_getmethods__["resolution"] = _pyTklib.tklib_log_gridmap_resolution_get
    if _newclass:
        resolution = _swig_property(_pyTklib.tklib_log_gridmap_resolution_get, _pyTklib.tklib_log_gridmap_resolution_set)
    __swig_setmethods__["x_offset"] = _pyTklib.tklib_log_gridmap_x_offset_set
    __swig_getmethods__["x_offset"] = _pyTklib.tklib_log_gridmap_x_offset_get
    if _newclass:
        x_offset = _swig_property(_pyTklib.tklib_log_gridmap_x_offset_get, _pyTklib.tklib_log_gridmap_x_offset_set)
    __swig_setmethods__["y_offset"] = _pyTklib.tklib_log_gridmap_y_offset_set
    __swig_getmethods__["y_offset"] = _pyTklib.tklib_log_gridmap_y_offset_get
    if _newclass:
        y_offset = _swig_property(_pyTklib.tklib_log_gridmap_y_offset_get, _pyTklib.tklib_log_gridmap_y_offset_set)
    __swig_setmethods__["theta_offset"] = _pyTklib.tklib_log_gridmap_theta_offset_set
    __swig_getmethods__["theta_offset"] = _pyTklib.tklib_log_gridmap_theta_offset_get
    if _newclass:
        theta_offset = _swig_property(_pyTklib.tklib_log_gridmap_theta_offset_get, _pyTklib.tklib_log_gridmap_theta_offset_set)

    def __init__(self, *args):
        this = _pyTklib.new_tklib_log_gridmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_tklib_log_gridmap
    __del__ = lambda self: None

    def get_max_range(self):
        return _pyTklib.tklib_log_gridmap_get_max_range(self)

    def get_x_size(self):
        return _pyTklib.tklib_log_gridmap_get_x_size(self)

    def get_y_size(self):
        return _pyTklib.tklib_log_gridmap_get_y_size(self)

    def get_map_width(self):
        return _pyTklib.tklib_log_gridmap_get_map_width(self)

    def get_map_height(self):
        return _pyTklib.tklib_log_gridmap_get_map_height(self)

    def get_value(self, i, j):
        return _pyTklib.tklib_log_gridmap_get_value(self, i, j)

    def get_value_probability(self, i, j):
        return _pyTklib.tklib_log_gridmap_get_value_probability(self, i, j)

    def set_value(self, i, j, value):
        return _pyTklib.tklib_log_gridmap_set_value(self, i, j, value)

    def to_xy(self, ind):
        return _pyTklib.tklib_log_gridmap_to_xy(self, ind)

    def to_index(self, xy):
        return _pyTklib.tklib_log_gridmap_to_index(self, xy)

    def downsample_map(self, ds):
        return _pyTklib.tklib_log_gridmap_downsample_map(self, ds)

    def xy_to_ind(self, xy, ind):
        return _pyTklib.tklib_log_gridmap_xy_to_ind(self, xy, ind)

    def ind_to_xy(self, ind, xy):
        return _pyTklib.tklib_log_gridmap_ind_to_xy(self, ind, xy)

    def downsize_and_save_map(self, tofilename, ds):
        return _pyTklib.tklib_log_gridmap_downsize_and_save_map(self, tofilename, ds)

    def load_carmen_map(self, filename):
        return _pyTklib.tklib_log_gridmap_load_carmen_map(self, filename)

    def save_carmen_map(self, filename):
        return _pyTklib.tklib_log_gridmap_save_carmen_map(self, filename)

    def to_carmen_map_noalloc(self):
        return _pyTklib.tklib_log_gridmap_to_carmen_map_noalloc(self)

    def to_probability_map(self):
        return _pyTklib.tklib_log_gridmap_to_probability_map(self)

    def to_probability_map_carmen(self):
        return _pyTklib.tklib_log_gridmap_to_probability_map_carmen(self)

    def get_probability_submap(self, start_i, start_j, stride_i, stride_j):
        return _pyTklib.tklib_log_gridmap_get_probability_submap(self, start_i, start_j, stride_i, stride_j)

    def get_likelihood_map(self):
        return _pyTklib.tklib_log_gridmap_get_likelihood_map(self)

    def to_likelihood_map(self, probability_map):
        return _pyTklib.tklib_log_gridmap_to_likelihood_map(self, probability_map)

    def copy(self, omap):
        return _pyTklib.tklib_log_gridmap_copy(self, omap)

    def publish(self):
        return _pyTklib.tklib_log_gridmap_publish(self)

    def path_free(self, thespline):
        return _pyTklib.tklib_log_gridmap_path_free(self, thespline)

    def ind_free(self, ind):
        return _pyTklib.tklib_log_gridmap_ind_free(self, ind)

    def ind_occupied(self, ind):
        return _pyTklib.tklib_log_gridmap_ind_occupied(self, ind)

    def location_free(self, xy):
        return _pyTklib.tklib_log_gridmap_location_free(self, xy)

    def location_free_radius(self, xy, radius):
        return _pyTklib.tklib_log_gridmap_location_free_radius(self, xy, radius)

    def location_occupied(self, xy):
        return _pyTklib.tklib_log_gridmap_location_occupied(self, xy)

    def get_free_locations(self):
        return _pyTklib.tklib_log_gridmap_get_free_locations(self)

    def get_free_inds(self):
        return _pyTklib.tklib_log_gridmap_get_free_inds(self)

    def get_occupied_locations(self):
        return _pyTklib.tklib_log_gridmap_get_occupied_locations(self)

    def get_occupied_inds(self):
        return _pyTklib.tklib_log_gridmap_get_occupied_inds(self)

    def get_random_open_location(self, radius):
        return _pyTklib.tklib_log_gridmap_get_random_open_location(self, radius)

    def get_random_open_location_from_pt(self, pt, distance, box_radius):
        return _pyTklib.tklib_log_gridmap_get_random_open_location_from_pt(self, pt, distance, box_radius)

    def get_random_open_locations(self, num_samples, radius):
        return _pyTklib.tklib_log_gridmap_get_random_open_locations(self, num_samples, radius)

    def ray_trace(self, startx, starty, thetas):
        return _pyTklib.tklib_log_gridmap_ray_trace(self, startx, starty, thetas)

    def is_visible(self, pt1, pt2):
        return _pyTklib.tklib_log_gridmap_is_visible(self, pt1, pt2)

    def min_range(self, from_pt):
        return _pyTklib.tklib_log_gridmap_min_range(self, from_pt)

    def get_hurdles(self):
        return _pyTklib.tklib_log_gridmap_get_hurdles(self)

    def add_hurdle(self, hurdle_width, hurdle_size):
        return _pyTklib.tklib_log_gridmap_add_hurdle(self, hurdle_width, hurdle_size)

    def add_hurdles(self, hurdle_width, hurdle_size, N):
        return _pyTklib.tklib_log_gridmap_add_hurdles(self, hurdle_width, hurdle_size, N)

    def get_frontiers(self):
        return _pyTklib.tklib_log_gridmap_get_frontiers(self)
tklib_log_gridmap_swigregister = _pyTklib.tklib_log_gridmap_swigregister
tklib_log_gridmap_swigregister(tklib_log_gridmap)

class occupancy_grid_mapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, occupancy_grid_mapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, occupancy_grid_mapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map"] = _pyTklib.occupancy_grid_mapper_map_set
    __swig_getmethods__["map"] = _pyTklib.occupancy_grid_mapper_map_get
    if _newclass:
        map = _swig_property(_pyTklib.occupancy_grid_mapper_map_get, _pyTklib.occupancy_grid_mapper_map_set)

    def __init__(self, p_occ, p_free, p_nought_occ, x_size, y_size, resolution, start_pose, alpha_in):
        this = _pyTklib.new_occupancy_grid_mapper(p_occ, p_free, p_nought_occ, x_size, y_size, resolution, start_pose, alpha_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_occupancy_grid_mapper
    __del__ = lambda self: None

    def get_pose(self):
        return _pyTklib.occupancy_grid_mapper_get_pose(self)

    def update(self, from_pose, reading, rel_start_angle, rel_end_angle):
        return _pyTklib.occupancy_grid_mapper_update(self, from_pose, reading, rel_start_angle, rel_end_angle)
occupancy_grid_mapper_swigregister = _pyTklib.occupancy_grid_mapper_swigregister
occupancy_grid_mapper_swigregister(occupancy_grid_mapper)

class noise_model2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, noise_model2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, noise_model2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyTklib.new_noise_model2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getmean(self, tv, rv):
        return _pyTklib.noise_model2D_getmean(self, tv, rv)

    def getvar(self, tv, rv):
        return _pyTklib.noise_model2D_getvar(self, tv, rv)

    def getstd(self, tv, rv):
        return _pyTklib.noise_model2D_getstd(self, tv, rv)

    def copy(self, other_noise_model):
        return _pyTklib.noise_model2D_copy(self, other_noise_model)
    __swig_destroy__ = _pyTklib.delete_noise_model2D
    __del__ = lambda self: None
noise_model2D_swigregister = _pyTklib.noise_model2D_swigregister
noise_model2D_swigregister(noise_model2D)

class motion_noise_model_slip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, motion_noise_model_slip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, motion_noise_model_slip, name)
    __repr__ = _swig_repr
    __swig_setmethods__["slip_noise_model"] = _pyTklib.motion_noise_model_slip_slip_noise_model_set
    __swig_getmethods__["slip_noise_model"] = _pyTklib.motion_noise_model_slip_slip_noise_model_get
    if _newclass:
        slip_noise_model = _swig_property(_pyTklib.motion_noise_model_slip_slip_noise_model_get, _pyTklib.motion_noise_model_slip_slip_noise_model_set)

    def __init__(self, *args):
        this = _pyTklib.new_motion_noise_model_slip(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self, onm):
        return _pyTklib.motion_noise_model_slip_copy(self, onm)

    def getmean(self, dr, dth):
        return _pyTklib.motion_noise_model_slip_getmean(self, dr, dth)

    def getvariance(self, dr, dth):
        return _pyTklib.motion_noise_model_slip_getvariance(self, dr, dth)

    def getstd(self, dr, dth):
        return _pyTklib.motion_noise_model_slip_getstd(self, dr, dth)

    def update(self, curr_pose, dr, dth, ds):
        return _pyTklib.motion_noise_model_slip_update(self, curr_pose, dr, dth, ds)

    def update_mean(self, curr_pose, dr, dth):
        return _pyTklib.motion_noise_model_slip_update_mean(self, curr_pose, dr, dth)

    def update_mean_copy(self, curr_pose, dr, dth):
        return _pyTklib.motion_noise_model_slip_update_mean_copy(self, curr_pose, dr, dth)

    def update_sample(self, curr_pose, dr, dth):
        return _pyTklib.motion_noise_model_slip_update_sample(self, curr_pose, dr, dth)

    def update_sample_copy(self, curr_pose, dr, dth):
        return _pyTklib.motion_noise_model_slip_update_sample_copy(self, curr_pose, dr, dth)
    __swig_destroy__ = _pyTklib.delete_motion_noise_model_slip
    __del__ = lambda self: None
motion_noise_model_slip_swigregister = _pyTklib.motion_noise_model_slip_swigregister
motion_noise_model_slip_swigregister(motion_noise_model_slip)

class point_feature_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_feature_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_feature_model, name)
    __repr__ = _swig_repr

    def __init__(self, std_r_in, std_phi_in, std_signature_in):
        this = _pyTklib.new_point_feature_model(std_r_in, std_phi_in, std_signature_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getvariance(self):
        return _pyTklib.point_feature_model_getvariance(self)

    def getstd(self):
        return _pyTklib.point_feature_model_getstd(self)

    def copy(self, onm):
        return _pyTklib.point_feature_model_copy(self, onm)
    __swig_destroy__ = _pyTklib.delete_point_feature_model
    __del__ = lambda self: None
point_feature_model_swigregister = _pyTklib.point_feature_model_swigregister
point_feature_model_swigregister(point_feature_model)

class simulator2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulator2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulator2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["map"] = _pyTklib.simulator2D_map_set
    __swig_getmethods__["map"] = _pyTklib.simulator2D_map_get
    if _newclass:
        map = _swig_property(_pyTklib.simulator2D_map_get, _pyTklib.simulator2D_map_set)

    def __init__(self, mnm_in, laser_noise_std, map_filename_in):
        this = _pyTklib.new_simulator2D(mnm_in, laser_noise_std, map_filename_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_simulator2D
    __del__ = lambda self: None

    def get_map(self):
        return _pyTklib.simulator2D_get_map(self)

    def get_true_pose(self):
        return _pyTklib.simulator2D_get_true_pose(self)

    def get_pose(self):
        return _pyTklib.simulator2D_get_pose(self)

    def reset_pose(self, new_pose):
        return _pyTklib.simulator2D_reset_pose(self, new_pose)

    def no_obstacle(self):
        return _pyTklib.simulator2D_no_obstacle(self)

    def get_random_open_location(self, radius):
        return _pyTklib.simulator2D_get_random_open_location(self, radius)

    def get_random_open_location_from_pt(self, pt, distance, box_radius):
        return _pyTklib.simulator2D_get_random_open_location_from_pt(self, pt, distance, box_radius)

    def simulate_measurements(self):
        return _pyTklib.simulator2D_simulate_measurements(self)

    def simulate_measurements_pose(self, curr_pose):
        return _pyTklib.simulator2D_simulate_measurements_pose(self, curr_pose)

    def simulate_motion(self, tv, rv, dt):
        return _pyTklib.simulator2D_simulate_motion(self, tv, rv, dt)

    def get_hurdles_true(self):
        return _pyTklib.simulator2D_get_hurdles_true(self)

    def add_hurdles(self, hurdle_width, pole_size, num_hurdles):
        return _pyTklib.simulator2D_add_hurdles(self, hurdle_width, pole_size, num_hurdles)

    def hurdles_visible_update(self):
        return _pyTklib.simulator2D_hurdles_visible_update(self)

    def hurdles_visible_get(self):
        return _pyTklib.simulator2D_hurdles_visible_get(self)

    def simulate_extracted_hurdles(self):
        return _pyTklib.simulator2D_simulate_extracted_hurdles(self)

    def min_range(self):
        return _pyTklib.simulator2D_min_range(self)
simulator2D_swigregister = _pyTklib.simulator2D_swigregister
simulator2D_swigregister(simulator2D)


def carmen_util_read_gridmap(filename):
    return _pyTklib.carmen_util_read_gridmap(filename)
carmen_util_read_gridmap = _pyTklib.carmen_util_read_gridmap

def carmen_util_reading_to_xy(mypose, myreading, rel_start_angle, rel_end_angle):
    return _pyTklib.carmen_util_reading_to_xy(mypose, myreading, rel_start_angle, rel_end_angle)
carmen_util_reading_to_xy = _pyTklib.carmen_util_reading_to_xy

def carmen_util_write_gridmap(filename, probability, resolution):
    return _pyTklib.carmen_util_write_gridmap(filename, probability, resolution)
carmen_util_write_gridmap = _pyTklib.carmen_util_write_gridmap

def carmen_util_init_vasco(laser_type):
    return _pyTklib.carmen_util_init_vasco(laser_type)
carmen_util_init_vasco = _pyTklib.carmen_util_init_vasco

def carmen_util_vasco_scan_match(curr_pose, range, angle, first):
    return _pyTklib.carmen_util_vasco_scan_match(curr_pose, range, angle, first)
carmen_util_vasco_scan_match = _pyTklib.carmen_util_vasco_scan_match
class SplineC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplineC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplineC, name)
    __repr__ = _swig_repr

    def __init__(self, start_pose, end_pose, start_magnitude, end_magnitude):
        this = _pyTklib.new_SplineC(start_pose, end_pose, start_magnitude, end_magnitude)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def at_destination(self, curr_pt, epsilon):
        return _pyTklib.SplineC_at_destination(self, curr_pt, epsilon)

    def get_start_pose(self):
        return _pyTklib.SplineC_get_start_pose(self)

    def get_end_pose(self):
        return _pyTklib.SplineC_get_end_pose(self)

    def get_start_derivative(self):
        return _pyTklib.SplineC_get_start_derivative(self)

    def get_end_derivative(self):
        return _pyTklib.SplineC_get_end_derivative(self)

    def get_start_magnitude(self):
        return _pyTklib.SplineC_get_start_magnitude(self)

    def get_end_magnitude(self):
        return _pyTklib.SplineC_get_end_magnitude(self)

    def value(self, t):
        return _pyTklib.SplineC_value(self, t)

    def getCoefX(self):
        return _pyTklib.SplineC_getCoefX(self)

    def getCoefY(self):
        return _pyTklib.SplineC_getCoefY(self)
    __swig_destroy__ = _pyTklib.delete_SplineC
    __del__ = lambda self: None
SplineC_swigregister = _pyTklib.SplineC_swigregister
SplineC_swigregister(SplineC)

class pyTklibHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyTklibHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyTklibHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == pyTklibHandler:
            _self = None
        else:
            _self = self
        this = _pyTklib.new_pyTklibHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyTklib.delete_pyTklibHandler
    __del__ = lambda self: None

    def run_cb(self, type, msg):
        return _pyTklib.pyTklibHandler_run_cb(self, type, msg)

    def set_spline_free_request_message(self, msg):
        return _pyTklib.pyTklibHandler_set_spline_free_request_message(self, msg)

    def spline_free_request_message(self):
        return _pyTklib.pyTklibHandler_spline_free_request_message(self)

    def set_spline_free_response_message(self, msg):
        return _pyTklib.pyTklibHandler_set_spline_free_response_message(self, msg)

    def spline_free_response_message(self):
        return _pyTklib.pyTklibHandler_spline_free_response_message(self)

    def set_ekf_message(self, msg):
        return _pyTklib.pyTklibHandler_set_ekf_message(self, msg)

    def get_carmen_ekf_message(self):
        return _pyTklib.pyTklibHandler_get_carmen_ekf_message(self)

    def set_gridmapping_pose_message(self, msg):
        return _pyTklib.pyTklibHandler_set_gridmapping_pose_message(self, msg)

    def get_gridmapping_pose_message(self):
        return _pyTklib.pyTklibHandler_get_gridmapping_pose_message(self)

    def set_gridmapping_ray_trace_message(self, msg):
        return _pyTklib.pyTklibHandler_set_gridmapping_ray_trace_message(self, msg)

    def get_gridmapping_ray_trace_message(self):
        return _pyTklib.pyTklibHandler_get_gridmapping_ray_trace_message(self)

    def set_gridmapping_map_message(self, msg):
        return _pyTklib.pyTklibHandler_set_gridmapping_map_message(self, msg)

    def get_gridmapping_map_message(self):
        return _pyTklib.pyTklibHandler_get_gridmapping_map_message(self)

    def set_trajopt_config_message(self, msg):
        return _pyTklib.pyTklibHandler_set_trajopt_config_message(self, msg)

    def get_trajopt_config_message(self):
        return _pyTklib.pyTklibHandler_get_trajopt_config_message(self)

    def set_trajopt_destinations_message(self, msg):
        return _pyTklib.pyTklibHandler_set_trajopt_destinations_message(self, msg)

    def get_trajopt_destinations_message(self):
        return _pyTklib.pyTklibHandler_get_trajopt_destinations_message(self)

    def set_trajopt_go_message(self, msg):
        return _pyTklib.pyTklibHandler_set_trajopt_go_message(self, msg)

    def get_trajopt_go_message(self):
        return _pyTklib.pyTklibHandler_get_trajopt_go_message(self)

    def set_trajopt_stop_message(self, msg):
        return _pyTklib.pyTklibHandler_set_trajopt_stop_message(self, msg)

    def get_trajopt_stop_message(self):
        return _pyTklib.pyTklibHandler_get_trajopt_stop_message(self)

    def set_curr_spline_message(self, msg):
        return _pyTklib.pyTklibHandler_set_curr_spline_message(self, msg)

    def get_curr_spline_message(self):
        return _pyTklib.pyTklibHandler_get_curr_spline_message(self)
    def __disown__(self):
        self.this.disown()
        _pyTklib.disown_pyTklibHandler(self)
        return weakref_proxy(self)
pyTklibHandler_swigregister = _pyTklib.pyTklibHandler_swigregister
pyTklibHandler_swigregister(pyTklibHandler)

class subscribe_spline_free_request_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_spline_free_request_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_spline_free_request_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_spline_free_request_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_spline_free_request_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_spline_free_request_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_spline_free_request_message
    __del__ = lambda self: None
subscribe_spline_free_request_message_swigregister = _pyTklib.subscribe_spline_free_request_message_swigregister
subscribe_spline_free_request_message_swigregister(subscribe_spline_free_request_message)

def subscribe_spline_free_request_message_my_handler(msg):
    return _pyTklib.subscribe_spline_free_request_message_my_handler(msg)
subscribe_spline_free_request_message_my_handler = _pyTklib.subscribe_spline_free_request_message_my_handler

class subscribe_spline_free_response_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_spline_free_response_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_spline_free_response_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_spline_free_response_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_spline_free_response_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_spline_free_response_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_spline_free_response_message
    __del__ = lambda self: None
subscribe_spline_free_response_message_swigregister = _pyTklib.subscribe_spline_free_response_message_swigregister
subscribe_spline_free_response_message_swigregister(subscribe_spline_free_response_message)

def subscribe_spline_free_response_message_my_handler(msg):
    return _pyTklib.subscribe_spline_free_response_message_my_handler(msg)
subscribe_spline_free_response_message_my_handler = _pyTklib.subscribe_spline_free_response_message_my_handler

class subscribe_ekf_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_ekf_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_ekf_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_ekf_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_ekf_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_ekf_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_ekf_message
    __del__ = lambda self: None
subscribe_ekf_message_swigregister = _pyTklib.subscribe_ekf_message_swigregister
subscribe_ekf_message_swigregister(subscribe_ekf_message)

def subscribe_ekf_message_my_handler(msg):
    return _pyTklib.subscribe_ekf_message_my_handler(msg)
subscribe_ekf_message_my_handler = _pyTklib.subscribe_ekf_message_my_handler

class subscribe_gridmapping_pose_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_gridmapping_pose_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_gridmapping_pose_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_gridmapping_pose_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_gridmapping_pose_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_gridmapping_pose_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_gridmapping_pose_message
    __del__ = lambda self: None
subscribe_gridmapping_pose_message_swigregister = _pyTklib.subscribe_gridmapping_pose_message_swigregister
subscribe_gridmapping_pose_message_swigregister(subscribe_gridmapping_pose_message)

def subscribe_gridmapping_pose_message_my_handler(msg):
    return _pyTklib.subscribe_gridmapping_pose_message_my_handler(msg)
subscribe_gridmapping_pose_message_my_handler = _pyTklib.subscribe_gridmapping_pose_message_my_handler

class subscribe_gridmapping_ray_trace_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_gridmapping_ray_trace_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_gridmapping_ray_trace_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_gridmapping_ray_trace_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_gridmapping_ray_trace_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_gridmapping_ray_trace_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_gridmapping_ray_trace_message
    __del__ = lambda self: None
subscribe_gridmapping_ray_trace_message_swigregister = _pyTklib.subscribe_gridmapping_ray_trace_message_swigregister
subscribe_gridmapping_ray_trace_message_swigregister(subscribe_gridmapping_ray_trace_message)

def subscribe_gridmapping_ray_trace_message_my_handler(msg):
    return _pyTklib.subscribe_gridmapping_ray_trace_message_my_handler(msg)
subscribe_gridmapping_ray_trace_message_my_handler = _pyTklib.subscribe_gridmapping_ray_trace_message_my_handler

class subscribe_gridmapping_map_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_gridmapping_map_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_gridmapping_map_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_gridmapping_map_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_gridmapping_map_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_gridmapping_map_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_gridmapping_map_message
    __del__ = lambda self: None
subscribe_gridmapping_map_message_swigregister = _pyTklib.subscribe_gridmapping_map_message_swigregister
subscribe_gridmapping_map_message_swigregister(subscribe_gridmapping_map_message)

def subscribe_gridmapping_map_message_my_handler(msg):
    return _pyTklib.subscribe_gridmapping_map_message_my_handler(msg)
subscribe_gridmapping_map_message_my_handler = _pyTklib.subscribe_gridmapping_map_message_my_handler

class subscribe_trajopt_config_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_trajopt_config_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_trajopt_config_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_trajopt_config_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_trajopt_config_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_trajopt_config_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_trajopt_config_message
    __del__ = lambda self: None
subscribe_trajopt_config_message_swigregister = _pyTklib.subscribe_trajopt_config_message_swigregister
subscribe_trajopt_config_message_swigregister(subscribe_trajopt_config_message)

def subscribe_trajopt_config_message_my_handler(msg):
    return _pyTklib.subscribe_trajopt_config_message_my_handler(msg)
subscribe_trajopt_config_message_my_handler = _pyTklib.subscribe_trajopt_config_message_my_handler

class subscribe_trajopt_destinations_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_trajopt_destinations_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_trajopt_destinations_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_trajopt_destinations_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_trajopt_destinations_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_trajopt_destinations_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_trajopt_destinations_message
    __del__ = lambda self: None
subscribe_trajopt_destinations_message_swigregister = _pyTklib.subscribe_trajopt_destinations_message_swigregister
subscribe_trajopt_destinations_message_swigregister(subscribe_trajopt_destinations_message)

def subscribe_trajopt_destinations_message_my_handler(msg):
    return _pyTklib.subscribe_trajopt_destinations_message_my_handler(msg)
subscribe_trajopt_destinations_message_my_handler = _pyTklib.subscribe_trajopt_destinations_message_my_handler

class subscribe_trajopt_go_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_trajopt_go_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_trajopt_go_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_trajopt_go_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_trajopt_go_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_trajopt_go_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_trajopt_go_message
    __del__ = lambda self: None
subscribe_trajopt_go_message_swigregister = _pyTklib.subscribe_trajopt_go_message_swigregister
subscribe_trajopt_go_message_swigregister(subscribe_trajopt_go_message)

def subscribe_trajopt_go_message_my_handler(msg):
    return _pyTklib.subscribe_trajopt_go_message_my_handler(msg)
subscribe_trajopt_go_message_my_handler = _pyTklib.subscribe_trajopt_go_message_my_handler

class subscribe_trajopt_stop_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_trajopt_stop_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_trajopt_stop_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_trajopt_stop_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_trajopt_stop_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_trajopt_stop_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_trajopt_stop_message
    __del__ = lambda self: None
subscribe_trajopt_stop_message_swigregister = _pyTklib.subscribe_trajopt_stop_message_swigregister
subscribe_trajopt_stop_message_swigregister(subscribe_trajopt_stop_message)

def subscribe_trajopt_stop_message_my_handler(msg):
    return _pyTklib.subscribe_trajopt_stop_message_my_handler(msg)
subscribe_trajopt_stop_message_my_handler = _pyTklib.subscribe_trajopt_stop_message_my_handler

class subscribe_trajopt_curr_spline_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subscribe_trajopt_curr_spline_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subscribe_trajopt_curr_spline_message, name)
    __repr__ = _swig_repr

    def __init__(self, cb):
        this = _pyTklib.new_subscribe_trajopt_curr_spline_message(cb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        my_handler = staticmethod(_pyTklib.subscribe_trajopt_curr_spline_message_my_handler)
    else:
        my_handler = _pyTklib.subscribe_trajopt_curr_spline_message_my_handler
    __swig_destroy__ = _pyTklib.delete_subscribe_trajopt_curr_spline_message
    __del__ = lambda self: None
subscribe_trajopt_curr_spline_message_swigregister = _pyTklib.subscribe_trajopt_curr_spline_message_swigregister
subscribe_trajopt_curr_spline_message_swigregister(subscribe_trajopt_curr_spline_message)

def subscribe_trajopt_curr_spline_message_my_handler(msg):
    return _pyTklib.subscribe_trajopt_curr_spline_message_my_handler(msg)
subscribe_trajopt_curr_spline_message_my_handler = _pyTklib.subscribe_trajopt_curr_spline_message_my_handler


def carmen_publish_define_messages():
    return _pyTklib.carmen_publish_define_messages()
carmen_publish_define_messages = _pyTklib.carmen_publish_define_messages

def carmen_publish_spline_free_request_message(curr_spline):
    return _pyTklib.carmen_publish_spline_free_request_message(curr_spline)
carmen_publish_spline_free_request_message = _pyTklib.carmen_publish_spline_free_request_message

def carmen_publish_spline_free_response_message(response, signature):
    return _pyTklib.carmen_publish_spline_free_response_message(response, signature)
carmen_publish_spline_free_response_message = _pyTklib.carmen_publish_spline_free_response_message

def carmen_publish_ekf_message(mean, covariance):
    return _pyTklib.carmen_publish_ekf_message(mean, covariance)
carmen_publish_ekf_message = _pyTklib.carmen_publish_ekf_message

def carmen_publish_gridmapping_pose_message(x, y, theta):
    return _pyTklib.carmen_publish_gridmapping_pose_message(x, y, theta)
carmen_publish_gridmapping_pose_message = _pyTklib.carmen_publish_gridmapping_pose_message

def carmen_publish_gridmapping_ray_trace_message(robot_pose, thetas, readings):
    return _pyTklib.carmen_publish_gridmapping_ray_trace_message(robot_pose, thetas, readings)
carmen_publish_gridmapping_ray_trace_message = _pyTklib.carmen_publish_gridmapping_ray_trace_message

def carmen_publish_gridmapping_map_message(themap, x_origin, y_origin, resolution):
    return _pyTklib.carmen_publish_gridmapping_map_message(themap, x_origin, y_origin, resolution)
carmen_publish_gridmapping_map_message = _pyTklib.carmen_publish_gridmapping_map_message

def carmen_publish_current_spline_message(curr_spline):
    return _pyTklib.carmen_publish_current_spline_message(curr_spline)
carmen_publish_current_spline_message = _pyTklib.carmen_publish_current_spline_message

def carmen_publish_trajopt_config_message(num_destinations):
    return _pyTklib.carmen_publish_trajopt_config_message(num_destinations)
carmen_publish_trajopt_config_message = _pyTklib.carmen_publish_trajopt_config_message

def carmen_publish_trajopt_set_destinations_message(destinations):
    return _pyTklib.carmen_publish_trajopt_set_destinations_message(destinations)
carmen_publish_trajopt_set_destinations_message = _pyTklib.carmen_publish_trajopt_set_destinations_message

def carmen_publish_trajopt_go_message():
    return _pyTklib.carmen_publish_trajopt_go_message()
carmen_publish_trajopt_go_message = _pyTklib.carmen_publish_trajopt_go_message

def carmen_publish_trajopt_stop_message():
    return _pyTklib.carmen_publish_trajopt_stop_message()
carmen_publish_trajopt_stop_message = _pyTklib.carmen_publish_trajopt_stop_message

def tklib_vector_leq(vec, value):
    return _pyTklib.tklib_vector_leq(vec, value)
tklib_vector_leq = _pyTklib.tklib_vector_leq

def tklib_vector_geq(vec, value):
    return _pyTklib.tklib_vector_geq(vec, value)
tklib_vector_geq = _pyTklib.tklib_vector_geq

def tklib_inverse(M):
    return _pyTklib.tklib_inverse(M)
tklib_inverse = _pyTklib.tklib_inverse

def tklib_double_to_gsl_vector(myarray, length):
    return _pyTklib.tklib_double_to_gsl_vector(myarray, length)
tklib_double_to_gsl_vector = _pyTklib.tklib_double_to_gsl_vector

def tklib_rtheta_to_xy(pose, reading):
    return _pyTklib.tklib_rtheta_to_xy(pose, reading)
tklib_rtheta_to_xy = _pyTklib.tklib_rtheta_to_xy

def tklib_rtheta_to_xy_matrix(pose, RTh):
    return _pyTklib.tklib_rtheta_to_xy_matrix(pose, RTh)
tklib_rtheta_to_xy_matrix = _pyTklib.tklib_rtheta_to_xy_matrix

def tklib_xy_to_rtheta(curr_pose, features):
    return _pyTklib.tklib_xy_to_rtheta(curr_pose, features)
tklib_xy_to_rtheta = _pyTklib.tklib_xy_to_rtheta

def tklib_matrix_get(M, Ir, Ic):
    return _pyTklib.tklib_matrix_get(M, Ir, Ic)
tklib_matrix_get = _pyTklib.tklib_matrix_get

def tklib_matrix_get_vector(M, Ir, Ic):
    return _pyTklib.tklib_matrix_get_vector(M, Ir, Ic)
tklib_matrix_get_vector = _pyTklib.tklib_matrix_get_vector

def tklib_matrix_get_columns(M, I):
    return _pyTklib.tklib_matrix_get_columns(M, I)
tklib_matrix_get_columns = _pyTklib.tklib_matrix_get_columns

def tklib_matrix_get_rows(M, I):
    return _pyTklib.tklib_matrix_get_rows(M, I)
tklib_matrix_get_rows = _pyTklib.tklib_matrix_get_rows

def tklib_vector_get(V, I):
    return _pyTklib.tklib_vector_get(V, I)
tklib_vector_get = _pyTklib.tklib_vector_get

def tklib_matrix_float_get_columns(M, I):
    return _pyTklib.tklib_matrix_float_get_columns(M, I)
tklib_matrix_float_get_columns = _pyTklib.tklib_matrix_float_get_columns

def tklib_matrix_float_get_rows(M, I):
    return _pyTklib.tklib_matrix_float_get_rows(M, I)
tklib_matrix_float_get_rows = _pyTklib.tklib_matrix_float_get_rows

def tklib_vector_log(vec):
    return _pyTklib.tklib_vector_log(vec)
tklib_vector_log = _pyTklib.tklib_vector_log

def tklib_vector_exp(vec):
    return _pyTklib.tklib_vector_exp(vec)
tklib_vector_exp = _pyTklib.tklib_vector_exp

def tklib_exp(mat):
    return _pyTklib.tklib_exp(mat)
tklib_exp = _pyTklib.tklib_exp

def tklib_log_float(mat):
    return _pyTklib.tklib_log_float(mat)
tklib_log_float = _pyTklib.tklib_log_float

def tklib_log(mat):
    return _pyTklib.tklib_log(mat)
tklib_log = _pyTklib.tklib_log

def tklib_exp_float(mat):
    return _pyTklib.tklib_exp_float(mat)
tklib_exp_float = _pyTklib.tklib_exp_float

def tklib_sin(angles):
    return _pyTklib.tklib_sin(angles)
tklib_sin = _pyTklib.tklib_sin

def tklib_cos(angles):
    return _pyTklib.tklib_cos(angles)
tklib_cos = _pyTklib.tklib_cos

def tklib_arctan2(Y, X):
    return _pyTklib.tklib_arctan2(Y, X)
tklib_arctan2 = _pyTklib.tklib_arctan2

def tklib_range(start, end, increment):
    return _pyTklib.tklib_range(start, end, increment)
tklib_range = _pyTklib.tklib_range

def tklib_linalg_cholesky_decomp(A):
    return _pyTklib.tklib_linalg_cholesky_decomp(A)
tklib_linalg_cholesky_decomp = _pyTklib.tklib_linalg_cholesky_decomp

def tklib_linalg_det(A):
    return _pyTklib.tklib_linalg_det(A)
tklib_linalg_det = _pyTklib.tklib_linalg_det

def tklib_sse(mat, opts):
    return _pyTklib.tklib_sse(mat, opts)
tklib_sse = _pyTklib.tklib_sse

def tklib_trace(mat):
    return _pyTklib.tklib_trace(mat)
tklib_trace = _pyTklib.tklib_trace

def tklib_eye(n1, n2):
    return _pyTklib.tklib_eye(n1, n2)
tklib_eye = _pyTklib.tklib_eye

def tklib_subtract_mean(pts):
    return _pyTklib.tklib_subtract_mean(pts)
tklib_subtract_mean = _pyTklib.tklib_subtract_mean

def tklib_euclidean_distance(pt1, pt2):
    return _pyTklib.tklib_euclidean_distance(pt1, pt2)
tklib_euclidean_distance = _pyTklib.tklib_euclidean_distance

def tklib_get_distance(X, pt):
    return _pyTklib.tklib_get_distance(X, pt)
tklib_get_distance = _pyTklib.tklib_get_distance

def tklib_permutation_to_vector(permutation):
    return _pyTklib.tklib_permutation_to_vector(permutation)
tklib_permutation_to_vector = _pyTklib.tklib_permutation_to_vector

def tklib_diag(vec):
    return _pyTklib.tklib_diag(vec)
tklib_diag = _pyTklib.tklib_diag

def tklib_mean(pts, dimension):
    return _pyTklib.tklib_mean(pts, dimension)
tklib_mean = _pyTklib.tklib_mean

def tklib_get_centroid(x_st, x_end):
    return _pyTklib.tklib_get_centroid(x_st, x_end)
tklib_get_centroid = _pyTklib.tklib_get_centroid

def tklib_matrix_sum(A, dimension):
    return _pyTklib.tklib_matrix_sum(A, dimension)
tklib_matrix_sum = _pyTklib.tklib_matrix_sum

def tklib_matrix_prod(A, dimension):
    return _pyTklib.tklib_matrix_prod(A, dimension)
tklib_matrix_prod = _pyTklib.tklib_matrix_prod

def tklib_vector_sum(vec):
    return _pyTklib.tklib_vector_sum(vec)
tklib_vector_sum = _pyTklib.tklib_vector_sum

def tklib_vector_prod(vec):
    return _pyTklib.tklib_vector_prod(vec)
tklib_vector_prod = _pyTklib.tklib_vector_prod

def tklib_vector_sqrt(vec):
    return _pyTklib.tklib_vector_sqrt(vec)
tklib_vector_sqrt = _pyTklib.tklib_vector_sqrt

def tklib_matrix_sqrt(X):
    return _pyTklib.tklib_matrix_sqrt(X)
tklib_matrix_sqrt = _pyTklib.tklib_matrix_sqrt

def tklib_matrix_argmin(A, dimension):
    return _pyTklib.tklib_matrix_argmin(A, dimension)
tklib_matrix_argmin = _pyTklib.tklib_matrix_argmin

def tklib_matrix_min(A, dimension):
    return _pyTklib.tklib_matrix_min(A, dimension)
tklib_matrix_min = _pyTklib.tklib_matrix_min

def tklib_matrix_printf(themat):
    return _pyTklib.tklib_matrix_printf(themat)
tklib_matrix_printf = _pyTklib.tklib_matrix_printf

def tklib_matrix_float_printf(themat):
    return _pyTklib.tklib_matrix_float_printf(themat)
tklib_matrix_float_printf = _pyTklib.tklib_matrix_float_printf

def tklib_vector_printf(thevec):
    return _pyTklib.tklib_vector_printf(thevec)
tklib_vector_printf = _pyTklib.tklib_vector_printf

def tklib_permutation_printf(thevec):
    return _pyTklib.tklib_permutation_printf(thevec)
tklib_permutation_printf = _pyTklib.tklib_permutation_printf

def tklib_const_matrix_printf(themat):
    return _pyTklib.tklib_const_matrix_printf(themat)
tklib_const_matrix_printf = _pyTklib.tklib_const_matrix_printf

def tklib_matrix_mul_vec(pts, vec):
    return _pyTklib.tklib_matrix_mul_vec(pts, vec)
tklib_matrix_mul_vec = _pyTklib.tklib_matrix_mul_vec

def tklib_matrix_mul_vec_inplace(pts, vec):
    return _pyTklib.tklib_matrix_mul_vec_inplace(pts, vec)
tklib_matrix_mul_vec_inplace = _pyTklib.tklib_matrix_mul_vec_inplace

def tklib_matrix_add_vec(pts, vec, alpha, beta):
    return _pyTklib.tklib_matrix_add_vec(pts, vec, alpha, beta)
tklib_matrix_add_vec = _pyTklib.tklib_matrix_add_vec

def tklib_matrix_add_vec_M(pts, vec, alpha, beta):
    return _pyTklib.tklib_matrix_add_vec_M(pts, vec, alpha, beta)
tklib_matrix_add_vec_M = _pyTklib.tklib_matrix_add_vec_M

def tklib_vector_union(mask1, mask2, dest):
    return _pyTklib.tklib_vector_union(mask1, mask2, dest)
tklib_vector_union = _pyTklib.tklib_vector_union

def tklib_vector_intersect(mask1, mask2, dest):
    return _pyTklib.tklib_vector_intersect(mask1, mask2, dest)
tklib_vector_intersect = _pyTklib.tklib_vector_intersect

def tklib_apply_mask_lp(mask, log_probs, dest):
    return _pyTklib.tklib_apply_mask_lp(mask, log_probs, dest)
tklib_apply_mask_lp = _pyTklib.tklib_apply_mask_lp

def tklib_normalize_theta(theta):
    return _pyTklib.tklib_normalize_theta(theta)
tklib_normalize_theta = _pyTklib.tklib_normalize_theta

def tklib_normalize_theta_array(theta):
    return _pyTklib.tklib_normalize_theta_array(theta)
tklib_normalize_theta_array = _pyTklib.tklib_normalize_theta_array

def tklib_ones(d1, d2):
    return _pyTklib.tklib_ones(d1, d2)
tklib_ones = _pyTklib.tklib_ones

def tklib_transpose(m):
    return _pyTklib.tklib_transpose(m)
tklib_transpose = _pyTklib.tklib_transpose

def tklib_matrix_dot(m1, m2):
    return _pyTklib.tklib_matrix_dot(m1, m2)
tklib_matrix_dot = _pyTklib.tklib_matrix_dot

def tklib_vector_dot(v1, v2):
    return _pyTklib.tklib_vector_dot(v1, v2)
tklib_vector_dot = _pyTklib.tklib_vector_dot

def tklib_vector_argmin(vector):
    return _pyTklib.tklib_vector_argmin(vector)
tklib_vector_argmin = _pyTklib.tklib_vector_argmin

def tklib_vector_argmax(vector):
    return _pyTklib.tklib_vector_argmax(vector)
tklib_vector_argmax = _pyTklib.tklib_vector_argmax

def tklib_vector_mean(vector):
    return _pyTklib.tklib_vector_mean(vector)
tklib_vector_mean = _pyTklib.tklib_vector_mean

def tklib_vector_stddev(vector):
    return _pyTklib.tklib_vector_stddev(vector)
tklib_vector_stddev = _pyTklib.tklib_vector_stddev

def tklib_vector_variance(vector):
    return _pyTklib.tklib_vector_variance(vector)
tklib_vector_variance = _pyTklib.tklib_vector_variance

def tklib_vector_equal(v1, g2):
    return _pyTklib.tklib_vector_equal(v1, g2)
tklib_vector_equal = _pyTklib.tklib_vector_equal

def tklib_vector_linspace(start, stop, num_units):
    return _pyTklib.tklib_vector_linspace(start, stop, num_units)
tklib_vector_linspace = _pyTklib.tklib_vector_linspace

def tklib_vector_bisect(v, value):
    return _pyTklib.tklib_vector_bisect(v, value)
tklib_vector_bisect = _pyTklib.tklib_vector_bisect
CARMEN_UNSUBSCRIBE = _pyTklib.CARMEN_UNSUBSCRIBE
CARMEN_SUBSCRIBE_LATEST = _pyTklib.CARMEN_SUBSCRIBE_LATEST
CARMEN_SUBSCRIBE_ALL = _pyTklib.CARMEN_SUBSCRIBE_ALL

def carmen_subscribe_message(message_name, message_fmt, message_mem, message_size, handler, subscribe_how):
    return _pyTklib.carmen_subscribe_message(message_name, message_fmt, message_mem, message_size, handler, subscribe_how)
carmen_subscribe_message = _pyTklib.carmen_subscribe_message

def carmen_unsubscribe_message(message_name, handler):
    return _pyTklib.carmen_unsubscribe_message(message_name, handler)
carmen_unsubscribe_message = _pyTklib.carmen_unsubscribe_message

def carmen_ipc_subscribe_fd(fd, handler):
    return _pyTklib.carmen_ipc_subscribe_fd(fd, handler)
carmen_ipc_subscribe_fd = _pyTklib.carmen_ipc_subscribe_fd

def carmen_ipc_unsubscribe_fd(fd, handler):
    return _pyTklib.carmen_ipc_unsubscribe_fd(fd, handler)
carmen_ipc_unsubscribe_fd = _pyTklib.carmen_ipc_unsubscribe_fd

def carmen_ipc_connect_locked(module_name):
    return _pyTklib.carmen_ipc_connect_locked(module_name)
carmen_ipc_connect_locked = _pyTklib.carmen_ipc_connect_locked

def carmen_ipc_connect(module_name):
    return _pyTklib.carmen_ipc_connect(module_name)
carmen_ipc_connect = _pyTklib.carmen_ipc_connect

def carmen_ipc_connect_long(module_name, host, port):
    return _pyTklib.carmen_ipc_connect_long(module_name, host, port)
carmen_ipc_connect_long = _pyTklib.carmen_ipc_connect_long

def carmen_ipc_initialize_locked(argc, argv):
    return _pyTklib.carmen_ipc_initialize_locked(argc, argv)
carmen_ipc_initialize_locked = _pyTklib.carmen_ipc_initialize_locked

def carmen_ipc_initialize_locked_with_name(argc, argv, name):
    return _pyTklib.carmen_ipc_initialize_locked_with_name(argc, argv, name)
carmen_ipc_initialize_locked_with_name = _pyTklib.carmen_ipc_initialize_locked_with_name

def carmen_ipc_initialize(argc, argv):
    return _pyTklib.carmen_ipc_initialize(argc, argv)
carmen_ipc_initialize = _pyTklib.carmen_ipc_initialize

def carmen_ipc_dispatch():
    return _pyTklib.carmen_ipc_dispatch()
carmen_ipc_dispatch = _pyTklib.carmen_ipc_dispatch

def carmen_ipc_sleep(timeout):
    return _pyTklib.carmen_ipc_sleep(timeout)
carmen_ipc_sleep = _pyTklib.carmen_ipc_sleep

def carmen_ipc_listen_clear(timeout):
    return _pyTklib.carmen_ipc_listen_clear(timeout)
carmen_ipc_listen_clear = _pyTklib.carmen_ipc_listen_clear

def carmen_ipc_disconnect():
    return _pyTklib.carmen_ipc_disconnect()
carmen_ipc_disconnect = _pyTklib.carmen_ipc_disconnect

def carmen_ipc_addPeriodicTimer(interval, handler, clientData):
    return _pyTklib.carmen_ipc_addPeriodicTimer(interval, handler, clientData)
carmen_ipc_addPeriodicTimer = _pyTklib.carmen_ipc_addPeriodicTimer

def carmen_publish_heartbeat(module_name):
    return _pyTklib.carmen_publish_heartbeat(module_name)
carmen_publish_heartbeat = _pyTklib.carmen_publish_heartbeat

def carmen_subscribe_heartbeat_message(heartbeat, handler, subscribe_how):
    return _pyTklib.carmen_subscribe_heartbeat_message(heartbeat, handler, subscribe_how)
carmen_subscribe_heartbeat_message = _pyTklib.carmen_subscribe_heartbeat_message

def carmen_ipc_registerExitProc(proc):
    return _pyTklib.carmen_ipc_registerExitProc(proc)
carmen_ipc_registerExitProc = _pyTklib.carmen_ipc_registerExitProc
# This file is compatible with both classic and new-style classes.

cvar = _pyTklib.cvar

