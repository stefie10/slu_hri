 /*********************************************************
 *
 * This source code is part of the Carnegie Mellon Robot
 * Navigation Toolkit (CARMEN)
 *
 * CARMEN Copyright (c) 2002 Michael Montemerlo, Nicholas
 * Roy, Sebastian Thrun, Dirk Haehnel, Cyrill Stachniss,
 * and Jared Glover
 *
 * CARMEN is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option)
 * any later version.
 *
 * CARMEN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General 
 * Public License along with CARMEN; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, 
 * Suite 330, Boston, MA  02111-1307 USA
 *
 ********************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class formatters */

#ifndef _Included_formatters
#define _Included_formatters
#ifdef __cplusplus
extern "C" {
#endif
#undef formatters_PrimitiveFMT
#define formatters_PrimitiveFMT 0L
#undef formatters_LengthFMT
#define formatters_LengthFMT 1L
#undef formatters_StructFMT
#define formatters_StructFMT 2L
#undef formatters_PointerFMT
#define formatters_PointerFMT 3L
#undef formatters_FixedArrayFMT
#define formatters_FixedArrayFMT 4L
#undef formatters_VarArrayFMT
#define formatters_VarArrayFMT 5L
#undef formatters_BadFormatFMT
#define formatters_BadFormatFMT 6L
#undef formatters_NamedFMT
#define formatters_NamedFMT 7L
#undef formatters_EnumFMT
#define formatters_EnumFMT 8L
/* Inaccessible static: class_00024java_00024lang_00024Integer */
/* Inaccessible static: class_00024java_00024lang_00024Boolean */
/* Inaccessible static: class_00024java_00024lang_00024Float */
/* Inaccessible static: class_00024java_00024lang_00024Double */
/* Inaccessible static: class_00024java_00024lang_00024Byte */
/* Inaccessible static: class_00024java_00024lang_00024String */
/* Inaccessible static: class_00024java_00024lang_00024Short */
/* Inaccessible static: class_00024java_00024lang_00024Long */
/*
 * Class:     formatters
 * Method:    formatType
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatType
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    formatPrimitiveProc
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatPrimitiveProc
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    formatChoosePtrFormat
 * Signature: (II)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatChoosePtrFormat
  (JNIEnv *, jclass, ptraddr, ptraddr);

/*
 * Class:     formatters
 * Method:    formatFormatArray
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatFormatArray
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    formatFormatArrayMax
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatFormatArrayMax
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    formatFormatArrayItem
 * Signature: (II)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_formatFormatArrayItem
  (JNIEnv *, jclass, ptraddr, jint);

/*
 * Class:     formatters
 * Method:    findNamedFormat
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_findNamedFormat
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    checkMarshallStatus
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_IPC_formatters_checkMarshallStatus
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    createBuffer
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_createBuffer
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    freeBuffer
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_IPC_formatters_freeBuffer
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    bufferLength
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_IPC_formatters_bufferLength
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    createByteArray
 * Signature: (I)I
 */
JNIEXPORT ptraddr JNICALL Java_IPC_formatters_createByteArray
  (JNIEnv *, jclass, jint);

/*
 * Class:     formatters
 * Method:    rewindBuffer
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_IPC_formatters_rewindBuffer
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    printBuffer
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_IPC_formatters_printBuffer
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     formatters
 * Method:    printByteArray
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_IPC_formatters_printByteArray
  (JNIEnv *, jclass, ptraddr, jint);

/*
 * Class:     formatters
 * Method:    parseFormat
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_IPC_formatters_parseFormat
  (JNIEnv *, jclass, jstring);

#ifdef __cplusplus
}
#endif
#endif
