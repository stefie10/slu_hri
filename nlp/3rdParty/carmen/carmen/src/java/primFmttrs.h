 /*********************************************************
 *
 * This source code is part of the Carnegie Mellon Robot
 * Navigation Toolkit (CARMEN)
 *
 * CARMEN Copyright (c) 2002 Michael Montemerlo, Nicholas
 * Roy, Sebastian Thrun, Dirk Haehnel, Cyrill Stachniss,
 * and Jared Glover
 *
 * CARMEN is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option)
 * any later version.
 *
 * CARMEN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied 
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more 
 * details.
 *
 * You should have received a copy of the GNU General 
 * Public License along with CARMEN; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, 
 * Suite 330, Boston, MA  02111-1307 USA
 *
 ********************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class primFmttrs */

#ifndef _Included_primFmttrs
#define _Included_primFmttrs
#ifdef __cplusplus
extern "C" {
#endif
#undef primFmttrs_INT_FMT
#define primFmttrs_INT_FMT 1L
#undef primFmttrs_BOOLEAN_FMT
#define primFmttrs_BOOLEAN_FMT 2L
#undef primFmttrs_FLOAT_FMT
#define primFmttrs_FLOAT_FMT 3L
#undef primFmttrs_DOUBLE_FMT
#define primFmttrs_DOUBLE_FMT 4L
#undef primFmttrs_BYTE_FMT
#define primFmttrs_BYTE_FMT 5L
#undef primFmttrs_STR_FMT
#define primFmttrs_STR_FMT 7L
#undef primFmttrs_UBYTE_FMT
#define primFmttrs_UBYTE_FMT 9L
#undef primFmttrs_CHAR_FMT
#define primFmttrs_CHAR_FMT 16L
#undef primFmttrs_SHORT_FMT
#define primFmttrs_SHORT_FMT 17L
#undef primFmttrs_LONG_FMT
#define primFmttrs_LONG_FMT 18L
#undef primFmttrs_USHORT_FMT
#define primFmttrs_USHORT_FMT 28L
#undef primFmttrs_UINT_FMT
#define primFmttrs_UINT_FMT 29L
#undef primFmttrs_ULONG_FMT
#define primFmttrs_ULONG_FMT 30L
#undef primFmttrs_MAXFORMATTERS
#define primFmttrs_MAXFORMATTERS 31L
#undef primFmttrs_CHAR_SIZE
#define primFmttrs_CHAR_SIZE 1L
#undef primFmttrs_BYTE_SIZE
#define primFmttrs_BYTE_SIZE 1L
#undef primFmttrs_SHORT_SIZE
#define primFmttrs_SHORT_SIZE 2L
#undef primFmttrs_INT_SIZE
#define primFmttrs_INT_SIZE 4L
#undef primFmttrs_LONG_SIZE
#define primFmttrs_LONG_SIZE 4L
#undef primFmttrs_FLOAT_SIZE
#define primFmttrs_FLOAT_SIZE 4L
#undef primFmttrs_DOUBLE_SIZE
#define primFmttrs_DOUBLE_SIZE 8L
#undef primFmttrs_PTR_SIZE
#define primFmttrs_PTR_SIZE 4L
/* Inaccessible static: strTrans */
/* Inaccessible static: byteTrans */
/* Inaccessible static: ubyteTrans */
/* Inaccessible static: shortTrans */
/* Inaccessible static: intTrans */
/* Inaccessible static: charTrans */
/* Inaccessible static: floatTrans */
/* Inaccessible static: doubleTrans */
/* Inaccessible static: booleanTrans */
/* Inaccessible static: ushortTrans */
/* Inaccessible static: uintTrans */
/* Inaccessible static: longTrans */
/* Inaccessible static: class_00024java_00024lang_00024String */
/* Inaccessible static: class_00024java_00024lang_00024Object */
/*
 * Class:     primFmttrs
 * Method:    formatGetChar
 * Signature: (I)C
 */
JNIEXPORT jchar JNICALL Java_IPC_primFmttrs_formatGetChar
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutChar
 * Signature: (IC)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutChar
  (JNIEnv *, jclass, ptraddr, jchar);

/*
 * Class:     primFmttrs
 * Method:    formatGetBoolean
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_IPC_primFmttrs_formatGetBoolean
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutBoolean
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutBoolean
  (JNIEnv *, jclass, ptraddr, jboolean);

/*
 * Class:     primFmttrs
 * Method:    formatGetByte
 * Signature: (I)B
 */
JNIEXPORT jbyte JNICALL Java_IPC_primFmttrs_formatGetByte
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutByte
 * Signature: (IB)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutByte
  (JNIEnv *, jclass, ptraddr, jbyte);

/*
 * Class:     primFmttrs
 * Method:    formatGetUByte
 * Signature: (I)B
 */
JNIEXPORT jbyte JNICALL Java_IPC_primFmttrs_formatGetUByte
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutUByte
 * Signature: (IB)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutUByte
  (JNIEnv *, jclass, ptraddr, jbyte);

/*
 * Class:     primFmttrs
 * Method:    formatGetShort
 * Signature: (I)S
 */
JNIEXPORT jshort JNICALL Java_IPC_primFmttrs_formatGetShort
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutShort
 * Signature: (IS)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutShort
  (JNIEnv *, jclass, ptraddr, jshort);

/*
 * Class:     primFmttrs
 * Method:    formatGetUShort
 * Signature: (I)S
 */
JNIEXPORT jshort JNICALL Java_IPC_primFmttrs_formatGetUShort
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutUShort
 * Signature: (IS)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutUShort
  (JNIEnv *, jclass, ptraddr, jshort);

/*
 * Class:     primFmttrs
 * Method:    formatGetInt
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_IPC_primFmttrs_formatGetInt
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutInt
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutInt
  (JNIEnv *, jclass, ptraddr, jint);

/*
 * Class:     primFmttrs
 * Method:    formatGetUInt
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_IPC_primFmttrs_formatGetUInt
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutUInt
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutUInt
  (JNIEnv *, jclass, ptraddr, jint);

/*
 * Class:     primFmttrs
 * Method:    formatGetLong
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_IPC_primFmttrs_formatGetLong
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutLong
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutLong
  (JNIEnv *, jclass, ptraddr, jlong);

/*
 * Class:     primFmttrs
 * Method:    formatGetFloat
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_IPC_primFmttrs_formatGetFloat
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutFloat
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutFloat
  (JNIEnv *, jclass, ptraddr, jfloat);

/*
 * Class:     primFmttrs
 * Method:    formatGetDouble
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_IPC_primFmttrs_formatGetDouble
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutDouble
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutDouble
  (JNIEnv *, jclass, ptraddr, jdouble);

/*
 * Class:     primFmttrs
 * Method:    formatGetString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_IPC_primFmttrs_formatGetString
  (JNIEnv *, jclass, ptraddr);

/*
 * Class:     primFmttrs
 * Method:    formatPutString
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_IPC_primFmttrs_formatPutString
  (JNIEnv *, jclass, ptraddr, jstring);

#ifdef __cplusplus
}
#endif
#endif
