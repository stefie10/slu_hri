<!--AUTO_INSERT_HEADER-->

<h3>Misc</h3>
<p><ul>
<li>Introduction
<li><a href="#simulator">Simulating Robots and People to Test Programs</a>
<li><a href="#logger">Logging Data and Playing It Back</a>
</ul>
<h3><A name=simulator>Simulating Robots and People to Test Programs</a></h3><p>
The CARMEN robot simulator allows the testing of some CARMEN programs without using an actual robot. Once started, a graphic display of the mapfile in use with param_server will appear. 
<p>
Left-click on the position you wish the robot to start. Center-click near the robot to set its facing. Right-clicking will add simulated people: green circles which will move randomly through the open areas of the map. 
<p>
Note that there are actually two overlapping circles. The red circle is the robot position indicator: where the simulated robot "really" is. The grey indicator represents the position in which the robot would be according to odometry alone. Unless the odometry error parameters (odom_a1 through odom_a4 for localize) are set to zero, these indicators will slowly diverge as the robot moves through the map.
<p> 
<img src=images/simulator.gif>
<p>

<h3><A name=logger>Logging Data and Playing It Back</a></h3>
<p>
Recording data in CARMEN is made simple with the <b>logger</b> program. When you are ready to start logging data, simply start the logger program with the following command. At the very least, <b>central</b> and <param_server</b> must be running.
<p>
<pre>
  ./logger [filename].log[.gz]
</pre>
<p>
[filename] specifies a filename for the sensor log. If the file already exists, the program will ask to overwrite it. If an answer other than "Y" or "y" is given, then the logger will quit. There is no way for this program to append new data to an old logfile.
<p>
The logfile will begin with the following message, which explains the format of the file. After that, the file is simply a list of CARMEN messages in the order they were received.
<p>
<pre>
# CARMEN Logfile
# file format is one message per line
# message_name [message contents] ipc_timestamp ipc_hostname logger_timestamp
# message formats defined    : PARAM SYNC ODOM RAWLASER1 RAWLASER2 RAWLASER3 RAWLASER4 
#                              ROBOTLASER1 ROBOTLASER2
# old message formats defined: FLASER RLASER LASER3 LASER4
# PARAM param_name param_value
# SYNC tagname
# ODOM x y theta tv rv accel
# TRUEPOS true_x true_y true_theta odom_x odom_y odom_theta
# RAWLASER1 laser_type start_angle field_of_view angular_resolution 
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] num_remissions [remission values]
# RAWLASER2 laser_type start_angle field_of_view angular_resolution 
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] num_remissions [remission values]
# RAWLASER3 laser_type start_angle field_of_view angular_resolution 
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] num_remissions [remission values]
# RAWLASER4 laser_type start_angle field_of_view angular_resolution 
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] num_remissions [remission values]
# ROBOTLASER1 laser_type start_angle field_of_view angular_resolution
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] laser_pose_x laser_pose_y laser_pose_theta
#   robot_pose_x robot_pose_y robot_pose_theta 
#   laser_tv laser_rv forward_safety_dist side_safty_dist
# ROBOTLASER2 laser_type start_angle field_of_view angular_resolution
#   maximum_range accuracy remission_mode 
#   num_readings [range_readings] laser_pose_x laser_pose_y laser_pose_theta
#   robot_pose_x robot_pose_y robot_pose_theta 
#   laser_tv laser_rv forward_safety_dist side_safty_dist
# 
# OLD LOG MESSAGES: 
# (old) # FLASER num_readings [range_readings] x y theta odom_x odom_y odom_theta
# (old) # RLASER num_readings [range_readings] x y theta odom_x odom_y odom_theta
# (old) # LASER3 num_readings [range_readings]
# (old) # LASER4 num_readings [range_readings]
# (old) # REMISSIONFLASER num_readings [range_readings remission_value]
# (old) # REMISSIONRLASER num_readings [range_readings remission_value]
# (old) # REMISSIONLASER3 num_readings [range_readings remission_value]
# (old) # REMISSIONLASER4 num_readings [range_readings remission_value]
# robot: b21rmit
</pre>
<p>
There is no way to pause recording; to stop simply type "ctrl-C" in the window in which <b>logger</b> is running.
<p>
To start a playback of the data, then start the main CARMEN programs normally, except replace <b>base_services</b> or <b>simulator</b> with the program <b>playback</b> as follows:
<p>
<pre>
  ./playback [filename].log[.gz]
</pre>
<p>
This program will immediately start sending messages from the logfile to <b>central</b>, to be passed to other programs.
<p>
To have more control over the playback, running <b>playback_control</b> to call up a graphic user interface, as below.
<p>
<img src=images/playback_control.gif>
<p>
The double arrows advance or rewind the playback by 100 front laser scan messages, the single arrows by a single laserscan. The square stops the playback, the arrow starts the playback. The "R" resets the playback to the begining of the file. Note that <b>playback</b> starts up playing the logfile, so it is a good idea to have playback control running first, to stop the playback until you are ready.


<!--AUTO_INSERT_FOOTER-->
