 /* This file has been generated by pyprops.py.
       (feel free to edit it and pyprops will feel free to undo your changes). */
#include "../relief.hpp"



/****** TMeasureAttribute_relief *****/

void *PTMeasureAttribute_Needs(void *);

TPropertyDescription TMeasureAttribute_relief_properties[] = {
  {"k", "number of neighbours", &typeid(float), NULL, offsetof(TMeasureAttribute_relief, k), false, false, 0},
  {"m", "number of reference examples", &typeid(float), NULL, offsetof(TMeasureAttribute_relief, m), false, false, 0},
  {"checkCachedData", "tells whether to check the checksum of the data before reusing the cached neighbours", &typeid(bool), NULL, offsetof(TMeasureAttribute_relief, checkCachedData), false, false, 0},
  {"needs", " describes what kind of data is needed for computation", &typeid(int), NULL, offsetof(TMeasureAttribute_relief, needs), false, false, PTMeasureAttribute_Needs},
  {"handlesDiscrete", "tells whether the measure can handle discrete attributes", &typeid(bool), NULL, offsetof(TMeasureAttribute_relief, handlesDiscrete), false, false, 0},
  {"handlesContinuous", "tells whether the measure can handle continuous attributes", &typeid(bool), NULL, offsetof(TMeasureAttribute_relief, handlesContinuous), false, false, 0},
  {"computesThresholds", "tells whether the measure can compute threshold functions/maxima for continuous attributes", &typeid(bool), NULL, offsetof(TMeasureAttribute_relief, computesThresholds), false, false, 0},
  {NULL}
};

size_t const TMeasureAttribute_relief_components[] = { 0};
TClassDescription TMeasureAttribute_relief::st_classDescription = { "TMeasureAttribute_relief", &typeid(TMeasureAttribute_relief), &TMeasureAttribute::st_classDescription, TMeasureAttribute_relief_properties, TMeasureAttribute_relief_components };
TClassDescription const *TMeasureAttribute_relief::classDescription() const { return &TMeasureAttribute_relief::st_classDescription; }
TOrange *TMeasureAttribute_relief::clone() const { return mlnew TMeasureAttribute_relief(*this); }
