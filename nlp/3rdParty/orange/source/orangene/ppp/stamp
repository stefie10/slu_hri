(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
g15
S'constructs a classifier for imputation of discrete values'
p16
I0
I0
I00
Ntp17
a(S'TLearner'
p18
S'learnerForContinuous'
p19
g19
S'constructs a classifier for imputation of continuous values'
p20
I0
I0
I00
Ntp21
a(S'bool'
p22
S'classIsOuter'
p23
g23
S'tells whether the class is the outer variable in contingencies'
p24
I0
I0
I01
Ntp25
asS'constants'
p26
(dp27
sbsS'TRuleDataStoppingCriteria_NoPositives'
p28
(i__main__
ClassDefinition
p29
(dp30
g4
I1
sg5
I01
sg6
g28
sg7
S'TRuleDataStoppingCriteria'
p31
sg9
I00
sg10
(lp32
sg12
(lp33
sg26
(dp34
sbsS'TExampleCluster'
p35
(i__main__
ClassDefinition
p36
(dp37
g4
I1
sg5
I01
sg6
g35
sg7
S'TOrange'
p38
sg9
I00
sg10
(lp39
sg12
(lp40
(S'TExampleCluster'
p41
S'left'
p42
g42
S"'left' cluster"
p43
I0
I0
I00
Ntp44
a(S'TExampleCluster'
p45
S'right'
p46
g46
S"'right' cluster"
p47
I0
I0
I00
Ntp48
a(S'float'
p49
S'distance'
p50
g50
S'distance between the two clusters (not defined for leaves)'
p51
I0
I0
I01
Ntp52
a(S'TExample'
p53
S'centroid'
p54
g54
S"cluster's centroid (always defined for leaves)"
p55
I0
I0
I00
Ntp56
asg26
(dp57
sbsS'TClassifierByLookupTableN'
p58
(i__main__
ClassDefinition
p59
(dp60
g4
I1
sg5
I01
sg6
g58
sg7
S'TClassifierByLookupTable'
p61
sg9
I00
sg10
(lp62
sg12
(lp63
(S'TVarList'
p64
S'variables'
p65
g65
S'attributes'
p66
I01
I0
I00
Ntp67
a(S'TIntList'
p68
S'noOfValues'
p69
g69
S'number of values for each attribute'
p70
I01
I0
I00
Ntp71
a(S'TEFMDataDescription'
p72
S'dataDescription'
p73
g73
S'data description'
p74
I0
I0
I00
Ntp75
a(S'TValueList'
p76
S'lookupTable'
p77
g77
S'a list of class values, one for each attribute value'
p78
I01
I0
I00
Ntp79
a(S'TDistributionList'
p80
S'distributions'
p81
g81
S'a list of class distributions, one for each attribute value'
p82
I01
I0
I00
Ntp83
a(S'TVariable'
p84
S'classVar'
p85
g85
S'class variable'
p86
I0
I0
I00
Ntp87
a(S'bool'
p88
S'computesProbabilities'
p89
g89
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p90
I0
I0
I01
Ntp91
asg26
(dp92
sbsS'TLearner_Python'
p93
(i__main__
ClassDefinition
p94
(dp95
g4
I1
sg5
I01
sg6
g93
sg7
S'TLearner'
p96
sg9
I00
sg10
(lp97
sg12
(lp98
(S'int'
p99
S'needs'
p100
g100
S'the kind of data that learner needs'
p101
I01
I0
I01
Ntp102
asg26
(dp103
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p104
(i__main__
ClassDefinition
p105
(dp106
g4
I1
sg5
I01
sg6
g104
sg7
S'TConditionalProbabilityEstimator'
p107
sg9
I00
sg10
(lp108
sg12
(lp109
(S'TContingency'
p110
S'probabilities'
p111
g111
S'Contingency that stores conditional probabilities'
p112
I0
I0
I00
Ntp113
a(S'bool'
p114
S'supportsDiscrete'
p115
g115
S'can estimate probabilities of discrete attributes'
p116
I01
I0
I01
Ntp117
a(S'bool'
p118
S'supportsContinuous'
p119
g119
S'can estimate probabilities of continuous attributes'
p120
I01
I0
I01
Ntp121
asg26
(dp122
sbsS'THeatmapList'
p123
(ipyprops
ClassDefinition
p124
(dp125
g4
I0
sg5
I01
sg6
g123
sg7
S'TOrange'
p126
sg9
I0
sg10
(lp127
sg12
(lp128
sg26
(dp129
sbsS'TFeatureInducer'
p130
(i__main__
ClassDefinition
p131
(dp132
g4
I1
sg5
I01
sg6
g130
sg7
S'TOrange'
p133
sg9
I01
sg10
(lp134
sg12
(lp135
sg26
(dp136
sbsS'TImputerConstruct_Python'
p137
(i__main__
ClassDefinition
p138
(dp139
g4
I1
sg5
I01
sg6
g137
sg7
S'TImputerConstructor'
p140
sg9
I00
sg10
(lp141
sg12
(lp142
(S'bool'
p143
S'imputeClass'
p144
g144
S'tells whether to impute the class value (default: true)'
p145
I0
I0
I01
Ntp146
asg26
(dp147
sbsS'TExampleGeneratorList'
p148
(ipyprops
ClassDefinition
p149
(dp150
g4
I0
sg5
I01
sg6
g148
sg7
g126
sg9
I0
sg10
(lp151
sg12
(lp152
sg26
(dp153
sbsS'TIMByRowsConstructor'
p154
(i__main__
ClassDefinition
p155
(dp156
g4
I1
sg5
I01
sg6
g154
sg7
S'TOrange'
p157
sg9
I01
sg10
(lp158
sg12
(lp159
sg26
(dp160
sbsS'TSubsetsGenerator_withRestrictions'
p161
(i__main__
ClassDefinition
p162
(dp163
g4
I1
sg5
I01
sg6
g161
sg7
S'TSubsetsGenerator'
p164
sg9
I00
sg10
(lp165
sg12
(lp166
(S'TSubsetsGenerator'
p167
S'subGenerator'
p168
g168
S'subset generator'
p169
I0
I0
I00
Ntp170
a(S'TVarList'
p171
S'required'
p172
g172
S'set of required attributes'
p173
I0
I0
I00
Ntp174
a(S'TVarList'
p175
S'forbidden'
p176
g176
S'set of forbidden attributes'
p177
I0
I0
I00
Ntp178
a(S'TVarListList'
p179
S'forbiddenSubSubsets'
p180
g180
S'set of forbidden subsets (attributes that must not occur together)'
p181
I0
I0
I00
Ntp182
a(S'TVarList'
p183
S'varList'
p184
g184
S'a set of attributes from which subsets are generated'
p185
I0
I0
I00
Ntp186
asg26
(dp187
sbsS'TEVDistList'
p188
(ipyprops
ClassDefinition
p189
(dp190
g4
I0
sg5
I01
sg6
g188
sg7
g126
sg9
I0
sg10
(lp191
sg12
(lp192
sg26
(dp193
sbsS'TValueFilterList'
p194
(ipyprops
ClassDefinition
p195
(dp196
g4
I0
sg5
I01
sg6
g194
sg7
g126
sg9
I0
sg10
(lp197
sg12
(lp198
sg26
(dp199
sbsS'TRuleBeamFilter_Python'
p200
(i__main__
ClassDefinition
p201
(dp202
g4
I1
sg5
I01
sg6
g200
sg7
S'TRuleBeamFilter'
p203
sg9
I00
sg10
(lp204
sg12
(lp205
sg26
(dp206
sbsS'TTreeExampleSplitter'
p207
(i__main__
ClassDefinition
p208
(dp209
g4
I1
sg5
I01
sg6
g207
sg7
S'TOrange'
p210
sg9
I01
sg10
(lp211
sg12
(lp212
sg26
(dp213
sbsS'TSVMClassifier'
p214
(i__main__
ClassDefinition
p215
(dp216
g4
I1
sg5
I01
sg6
g214
sg7
S'TClassifierFD'
p217
sg9
I00
sg10
(lp218
sg12
(lp219
(S'TIntList'
p220
S'nSV'
p221
g221
S'nSV'
p222
I0
I0
I00
Ntp223
a(S'TFloatList'
p224
S'rho'
p225
g225
S'rho'
p226
I0
I0
I00
Ntp227
a(S'TFloatListList'
p228
S'coef'
p229
g229
S'coef'
p230
I0
I0
I00
Ntp231
a(S'TFloatList'
p232
S'probA'
p233
g233
S'probA - pairwise probability information'
p234
I0
I0
I00
Ntp235
a(S'TFloatList'
p236
S'probB'
p237
g237
S'probB - pairwise probability information'
p238
I0
I0
I00
Ntp239
a(S'TExampleTable'
p240
S'supportVectors'
p241
g241
S'support vectors'
p242
I0
I0
I00
Ntp243
a(S'TExampleTable'
p244
S'examples'
p245
g245
S'examples used to train the classifier'
p246
I0
I0
I00
Ntp247
a(S'TKernelFunc'
p248
S'kernelFunc'
p249
g249
S'custom kernel function'
p250
I0
I0
I00
Ntp251
a(S'TDomain'
p252
S'domain'
p253
g253
S'domain'
p254
I0
I0
I00
Ntp255
ag87
ag91
asg26
(dp256
sbsS'TFilteredGenerator'
p257
(i__main__
ClassDefinition
p258
(dp259
g4
I1
sg5
I01
sg6
g257
sg7
S'TAdapterGenerator'
p260
sg9
I00
sg10
(lp261
sg12
(lp262
(S'TFilter'
p263
S'filter'
p264
g264
S'decides which examples are skipped'
p265
I0
I0
I00
Ntp266
a(S'TDomain'
p267
S'domain'
p268
g268
S'domain'
p269
I0
I0
I00
Ntp270
a(S'int'
p271
S'version'
p272
g272
S'unique version identifier'
p273
I01
I0
I01
Ntp274
asg26
(dp275
sbsS'TPythonVariable'
p276
(i__main__
ClassDefinition
p277
(dp278
g4
I1
sg5
I01
sg6
g276
sg7
S'TVariable'
p279
sg9
I00
sg10
(lp280
sg12
(lp281
(S'bool'
p282
S'usePickle'
p283
g283
S'tells whether to use pickle for saving to/loading from files'
p284
I0
I0
I01
Ntp285
a(S'bool'
p286
S'useSomeValue'
p287
g287
S'tells whether the Variable will operate on Value or SomeValue (default)'
p288
I0
I0
I01
Ntp289
a(S'string'
p290
S'name'
p291
g291
S"variable's name"
p292
I0
I0
I01
Ntp293
a(S'int'
p294
S'varType'
p295
g295
S' variable type'
p296
I0
I0
I01
S'Variable_Type'
p297
tp298
a(S'bool'
p299
S'ordered'
p300
g300
S'variable values are ordered'
p301
I0
I0
I01
Ntp302
a(S'bool'
p303
S'distributed'
p304
g304
S'variable values are distributions'
p305
I0
I0
I01
Ntp306
a(S'int'
p307
S'defaultMetaId'
p308
g308
S'default (proposed, suggested...) meta id for this variable'
p309
I0
I0
I01
Ntp310
a(S'TRandomGenerator'
p311
S'randomGenerator'
p312
g312
S'random generator for random values (initialized when first needed)'
p313
I0
I0
I00
Ntp314
a(S'TVariable'
p315
S'sourceVariable'
p316
g316
S'The attribute that this attribute is computed from (when applicable)'
p317
I0
I0
I00
Ntp318
a(S'TClassifier'
p319
S'getValueFrom'
p320
g320
S'Function to compute the value from values of other variables'
p321
I0
I0
I00
Ntp322
asg26
(dp323
sbsS'TTreeLearner'
p324
(i__main__
ClassDefinition
p325
(dp326
g4
I1
sg5
I01
sg6
g324
sg7
S'TLearner'
p327
sg9
I00
sg10
(lp328
sg12
(lp329
(S'TTreeSplitConstructor'
p330
S'split'
p331
g331
S'split criterion'
p332
I0
I0
I00
Ntp333
a(S'TTreeStopCriteria'
p334
S'stop'
p335
g335
S'stop criterion'
p336
I0
I0
I00
Ntp337
a(S'TComputeDomainContingency'
p338
S'contingencyComputer'
p339
g339
S'computes contingency matrix'
p340
I0
I0
I00
Ntp341
a(S'TLearner'
p342
S'nodeLearner'
p343
g343
S'node learner'
p344
I0
I0
I00
Ntp345
a(S'TTreeExampleSplitter'
p346
S'exampleSplitter'
p347
g347
S'splits examples to branches'
p348
I0
I0
I00
Ntp349
a(S'int'
p350
S'maxDepth'
p351
g351
S'maximal tree depth (0 = root only, -1 = no limit)'
p352
I0
I0
I01
Ntp353
a(S'bool'
p354
S'storeExamples'
p355
g355
S'if true (default: false), learning examples in nodes are stored'
p356
I0
I0
I01
Ntp357
a(S'bool'
p358
S'storeDistributions'
p359
g359
S'if true (default), class distributions of learning examples in nodes are stored'
p360
I0
I0
I01
Ntp361
a(S'bool'
p362
S'storeContingencies'
p363
g363
S'if true (default), contingency matrices for examples are stored'
p364
I0
I0
I01
Ntp365
a(S'bool'
p366
S'storeNodeClassifier'
p367
g367
S'if true (default), the internal nodes have classifiers; needed for pruning'
p368
I0
I0
I01
Ntp369
a(S'TTreeDescender'
p370
S'descender'
p371
g371
S'descends down the tree'
p372
I0
I0
I00
Ntp373
ag102
asg26
(dp374
sbsS'TPreprocessor_shuffle'
p375
(i__main__
ClassDefinition
p376
(dp377
g4
I1
sg5
I01
sg6
g375
sg7
S'TPreprocessor'
p378
sg9
I00
sg10
(lp379
sg12
(lp380
(S'TVarList'
p381
S'attributes'
p382
g382
S'tells which attributes to shuffle'
p383
I0
I0
I00
Ntp384
a(S'TRandomGenerator'
p385
S'randomGenerator'
p386
g386
S'random number generator'
p387
I0
I0
I00
Ntp388
asg26
(dp389
sbsS'TLearner'
p390
(i__main__
ClassDefinition
p391
(dp392
g4
I1
sg5
I01
sg6
g390
sg7
S'TOrange'
p393
sg9
I00
sg10
(lp394
sg12
(lp395
g102
asg26
(dp396
sbsS'TExamplesDistance_Maximal'
p397
(i__main__
ClassDefinition
p398
(dp399
g4
I1
sg5
I01
sg6
g397
sg7
S'TExamplesDistance_Normalized'
p400
sg9
I00
sg10
(lp401
sg12
(lp402
(S'TAttributedFloatList'
p403
S'normalizers'
p404
g404
S'normalizing factors for attributes'
p405
I0
I0
I00
Ntp406
a(S'TAttributedFloatList'
p407
S'bases'
p408
g408
S'lowest values for attributes'
p409
I0
I0
I00
Ntp410
a(S'TAttributedFloatList'
p411
S'averages'
p412
g412
S'average values for continuous attribute values'
p413
I0
I0
I00
Ntp414
a(S'TAttributedFloatList'
p415
S'variances'
p416
g416
S'variations for continuous attribute values'
p417
I0
I0
I00
Ntp418
a(S'int'
p419
S'domainVersion'
p420
g420
S'version of domain on which the ranges were computed'
p421
I0
I0
I01
Ntp422
a(S'bool'
p423
S'normalize'
p424
g424
S'tells whether to normalize distances between attributes'
p425
I0
I0
I01
Ntp426
a(S'bool'
p427
S'ignoreUnknowns'
p428
g428
S'if true (default: false) unknown values are ignored in computation'
p429
I0
I0
I01
Ntp430
asg26
(dp431
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p432
(i__main__
ClassDefinition
p433
(dp434
g4
I1
sg5
I01
sg6
g432
sg7
S'TSubsetsGenerator_iterator'
p435
sg9
I00
sg10
(lp436
sg12
(lp437
(S'TSubsetsGenerator_iterator'
p438
S'subGenerator_iterator'
p439
g439
S'subset generator'
p440
I0
I0
I00
Ntp441
a(S'TVarList'
p442
S'required'
p443
g443
S'set of required attributes'
p444
I0
I0
I00
Ntp445
a(S'TVarList'
p446
S'forbidden'
p447
g447
S'set of forbidden attributes'
p448
I0
I0
I00
Ntp449
a(S'TVarListList'
p450
S'forbiddenSubSubsets'
p451
g451
S'set of forbidden subsets (attributes that must not occur together)'
p452
I0
I0
I00
Ntp453
a(S'TVarList'
p454
S'varList'
p455
g455
S'a set of attributes from which subsets are generated'
p456
I0
I0
I00
Ntp457
asg26
(dp458
sbsS'TPreprocessor_addClassNoise'
p459
(i__main__
ClassDefinition
p460
(dp461
g4
I1
sg5
I01
sg6
g459
sg7
S'TPreprocessor'
p462
sg9
I00
sg10
(lp463
sg12
(lp464
(S'float'
p465
S'proportion'
p466
g466
S'proportion of changed class values'
p467
I0
I0
I01
Ntp468
a(S'TRandomGenerator'
p469
S'randomGenerator'
p470
g470
S'random number generator'
p471
I0
I0
I00
Ntp472
asg26
(dp473
sbsS'TPreprocessor_discretize'
p474
(i__main__
ClassDefinition
p475
(dp476
g4
I1
sg5
I01
sg6
g474
sg7
S'TPreprocessor'
p477
sg9
I00
sg10
(lp478
sg12
(lp479
(S'TVarList'
p480
S'attributes'
p481
g481
S'attributes to be discretized (all, if not defined or empty)'
p482
I0
I0
I00
Ntp483
a(S'bool'
p484
S'discretizeClass'
p485
g485
S'also discretize the class attribute (default: false)'
p486
I0
I0
I01
Ntp487
a(S'TDiscretization'
p488
S'method'
p489
g489
S'discretization method'
p490
I0
I0
I00
Ntp491
asg26
(dp492
sbsS'TRuleClassifier_logit'
p493
(i__main__
ClassDefinition
p494
(dp495
g4
I1
sg5
I01
sg6
g493
sg7
S'TRuleClassifier'
p496
sg9
I00
sg10
(lp497
sg12
(lp498
(S'TDistribution'
p499
S'prior'
p500
g500
S'prior distribution'
p501
I0
I0
I00
Ntp502
a(S'TDomain'
p503
S'domain'
p504
g504
S'Domain'
p505
I0
I0
I00
Ntp506
a(S'TFloatList'
p507
S'ruleBetas'
p508
g508
S'Rule betas'
p509
I0
I0
I00
Ntp510
a(S'float'
p511
S'minStep'
p512
g512
S'minimal step value'
p513
I0
I0
I01
Ntp514
a(S'float'
p515
S'minSignificance'
p516
g516
S'minimum requested significance for betas. '
p517
I0
I0
I01
Ntp518
a(S'float'
p519
S'minBeta'
p520
g520
S'minimum beta by rule to be included in the model. '
p521
I0
I0
I01
Ntp522
a(S'TClassifier'
p523
S'priorClassifier'
p524
g524
S'prior classifier used if provided'
p525
I0
I0
I00
Ntp526
a(S'TRuleList'
p527
S'prefixRules'
p528
g528
S'rules that trigger before logit sum.'
p529
I0
I0
I00
Ntp530
a(S'TRuleList'
p531
S'rules'
p532
g532
S''
p533
I0
I0
I00
Ntp534
a(S'TExampleTable'
p535
S'examples'
p536
g536
g533
I0
I0
I00
Ntp537
a(S'int'
p538
S'weightID'
p539
g539
g533
I0
I0
I01
Ntp540
ag87
ag91
asg26
(dp541
sbsS'TProgressCallback_Python'
p542
(i__main__
ClassDefinition
p543
(dp544
g4
I1
sg5
I01
sg6
g542
sg7
S'TProgressCallback'
p545
sg9
I00
sg10
(lp546
sg12
(lp547
sg26
(dp548
sbsS'TImputeClassifier'
p549
(i__main__
ClassDefinition
p550
(dp551
g4
I1
sg5
I01
sg6
g549
sg7
S'TClassifier'
p552
sg9
I00
sg10
(lp553
sg12
(lp554
(S'TClassifierFromVar'
p555
S'classifierFromVar'
p556
g556
S'ClassifierFromVar that is used to retrieve defined values'
p557
I0
I0
I00
Ntp558
a(S'TClassifier'
p559
S'imputer'
p560
g560
S'classifier that is used to determine the missing values '
p561
I0
I0
I00
Ntp562
ag87
ag91
asg26
(dp563
sbsS'TStopDistributionClustering'
p564
(i__main__
ClassDefinition
p565
(dp566
g4
I1
sg5
I01
sg6
g564
sg7
S'TOrange'
p567
sg9
I01
sg10
(lp568
sg12
(lp569
sg26
(dp570
sbsS'TFilterList'
p571
(ipyprops
ClassDefinition
p572
(dp573
g4
I0
sg5
I01
sg6
g571
sg7
g126
sg9
I0
sg10
(lp574
sg12
(lp575
sg26
(dp576
sbsS'TPythonValue'
p577
(i__main__
ClassDefinition
p578
(dp579
g4
I1
sg5
I01
sg6
g577
sg7
S'TSomeValue'
p580
sg9
I00
sg10
(lp581
sg12
(lp582
sg26
(dp583
sbsS'TAssociationRulesSparseInducer'
p584
(i__main__
ClassDefinition
p585
(dp586
g4
I1
sg5
I01
sg6
g584
sg7
S'TOrange'
p587
sg9
I00
sg10
(lp588
sg12
(lp589
(S'int'
p590
S'maxItemSets'
p591
g591
S'maximal number of itemsets (increase if you want)'
p592
I0
I0
I01
Ntp593
a(S'float'
p594
S'confidence'
p595
g595
S'required confidence'
p596
I0
I0
I01
Ntp597
a(S'float'
p598
S'support'
p599
g599
S'required support'
p600
I0
I0
I01
Ntp601
a(S'bool'
p602
S'storeExamples'
p603
g603
S'stores examples corresponding to rules'
p604
I0
I0
I01
Ntp605
asg26
(dp606
sbsS'TFilter_sameExample'
p607
(i__main__
ClassDefinition
p608
(dp609
g4
I1
sg5
I01
sg6
g607
sg7
S'TFilter'
p610
sg9
I00
sg10
(lp611
sg12
(lp612
(S'TExample'
p613
S'example'
p614
g614
S'example with which examples are compared'
p615
I0
I0
I00
Ntp616
a(S'bool'
p617
S'negate'
p618
g618
S'if true, filter output should be negated.'
p619
I0
I0
I01
Ntp620
a(S'TDomain'
p621
S'domain'
p622
g622
S'domain to which the examples are converted (if needed)'
p623
I0
I0
I00
Ntp624
asg26
(dp625
sbsS'TRuleClassifierConstructor'
p626
(i__main__
ClassDefinition
p627
(dp628
g4
I1
sg5
I01
sg6
g626
sg7
S'TOrange'
p629
sg9
I01
sg10
(lp630
sg12
(lp631
sg26
(dp632
sbsS'TMakeRandomIndicesMultiple'
p633
(i__main__
ClassDefinition
p634
(dp635
g4
I1
sg5
I01
sg6
g633
sg7
S'TMakeRandomIndices'
p636
sg9
I00
sg10
(lp637
sg12
(lp638
(S'int'
p639
S'stratified'
p640
g640
S' requests stratified distributions'
p641
I0
I0
I01
S'MakeRandomIndices_Stratification'
p642
tp643
a(S'int'
p644
S'randseed'
p645
g645
S'a seed for random generator'
p646
I0
I0
I01
Ntp647
a(S'TRandomGenerator'
p648
S'randomGenerator'
p649
g649
S'a random generator'
p650
I0
I0
I00
Ntp651
asg26
(dp652
sbsS'TLearnerFD'
p653
(i__main__
ClassDefinition
p654
(dp655
g4
I1
sg5
I01
sg6
g653
sg7
S'TLearner'
p656
sg9
I00
sg10
(lp657
sg12
(lp658
(S'TDomain'
p659
S'domain'
p660
g660
S'domain'
p661
I0
I0
I00
Ntp662
ag102
asg26
(dp663
sbsS'TP2NN'
p664
(i__main__
ClassDefinition
p665
(dp666
g4
I1
sg5
I01
sg6
g664
sg7
S'TPNN'
p667
sg9
I00
sg10
(lp668
sg12
(lp669
(S'int'
p670
S'dimensions'
p671
g671
S'the number of dimensions'
p672
I01
I0
I01
Ntp673
a(S'TFloatList'
p674
S'offsets'
p675
g675
S'offsets to subtract from the attribute values'
p676
I0
I0
I00
Ntp677
a(S'TFloatList'
p678
S'normalizers'
p679
g679
S'number to divide the values by'
p680
I0
I0
I00
Ntp681
a(S'TFloatList'
p682
S'averages'
p683
g683
S'numbers to use instead of the missing'
p684
I0
I0
I00
Ntp685
a(S'bool'
p686
S'normalizeExamples'
p687
g687
S'if true, attribute values are divided to sum up to 1'
p688
I0
I0
I01
Ntp689
a(S'int'
p690
S'nExamples'
p691
g691
S'the number of examples'
p692
I01
I0
I01
Ntp693
a(S'int'
p694
S'law'
p695
g695
S'law'
p696
I0
I0
I01
Ntp697
ag255
ag87
ag91
asg26
(dp698
sbsS'TTreeSplitConstructor'
p699
(i__main__
ClassDefinition
p700
(dp701
g4
I1
sg5
I01
sg6
g699
sg7
S'TOrange'
p702
sg9
I01
sg10
(lp703
sg12
(lp704
(S'float'
p705
S'minSubset'
p706
g706
S'minimal number of examples in a subset'
p707
I0
I0
I01
Ntp708
asg26
(dp709
sbsS'TProbabilityEstimatorList'
p710
(ipyprops
ClassDefinition
p711
(dp712
g4
I0
sg5
I01
sg6
g710
sg7
g126
sg9
I0
sg10
(lp713
sg12
(lp714
sg26
(dp715
sbsS'TMapIntValue'
p716
(i__main__
ClassDefinition
p717
(dp718
g4
I1
sg5
I01
sg6
g716
sg7
S'TTransformValue'
p719
sg9
I00
sg10
(lp720
sg12
(lp721
(S'TIntList'
p722
S'mapping'
p723
g723
S'a lookup table'
p724
I0
I0
I00
Ntp725
a(S'TTransformValue'
p726
S'subTransform'
p727
g727
S'transformation executed prior to this'
p728
I0
I0
I00
Ntp729
asg26
(dp730
sbsS'TDistributionAssessor_Kramer'
p731
(i__main__
ClassDefinition
p732
(dp733
g4
I1
sg5
I01
sg6
g731
sg7
S'TDistributionAssessor'
p734
sg9
I00
sg10
(lp735
sg12
(lp736
sg26
(dp737
sbsS'TIM'
p738
(i__main__
ClassDefinition
p739
(dp740
g4
I1
sg5
I01
sg6
g738
sg7
S'TOrange'
p741
sg9
I00
sg10
(lp742
sg12
(lp743
(S'int'
p744
S'varType'
p745
g745
S' class variable type'
p746
I0
I0
I01
S'Variable_Type'
p747
tp748
a(S'TExampleTable'
p749
S'rowExamples'
p750
g750
S'examples with free attributes for each row'
p751
I0
I0
I00
Ntp752
asg26
(dp753
sbsS'TSymMatrix'
p754
(i__main__
ClassDefinition
p755
(dp756
g4
I1
sg5
I01
sg6
g754
sg7
S'TOrange'
p757
sg9
I00
sg10
(lp758
sg12
(lp759
(S'int'
p760
S'dim'
p761
g761
S'matrix dimension'
p762
I01
I0
I01
Ntp763
a(S'int'
p764
S'matrixType'
p765
g765
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p766
I0
I0
I01
S'SymMatrix_Shape'
p767
tp768
asg26
(dp769
S'Shape'
p770
(lp771
(S'Lower'
p772
I0
tp773
a(S'Upper'
p774
I1
tp775
a(S'Symmetric'
p776
I2
tp777
a(S'LowerFilled'
p778
I3
tp779
a(S'UpperFilled'
p780
I4
tp781
assbsS'TEVDistGetter_Standard'
p782
(i__main__
ClassDefinition
p783
(dp784
g4
I1
sg5
I01
sg6
g782
sg7
S'TEVDistGetter'
p785
sg9
I00
sg10
(lp786
sg12
(lp787
(S'TEVDistList'
p788
S'dists'
p789
g789
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p790
I0
I0
I00
Ntp791
asg26
(dp792
sbsS'TFeatureByIM'
p793
(i__main__
ClassDefinition
p794
(dp795
g4
I1
sg5
I01
sg6
g793
sg7
S'TFeatureInducer'
p796
sg9
I00
sg10
(lp797
sg12
(lp798
(S'TIMConstructor'
p799
S'IMconstructor'
p800
g800
S'incompatibility matrix constructor'
p801
I0
I0
I00
Ntp802
a(S'TClustersFromIM'
p803
S'clustersFromIM'
p804
g804
S'clustering algorithm'
p805
I0
I0
I00
Ntp806
a(S'int'
p807
S'completion'
p808
g808
S' decides how to determine the class for points not covered by any cluster'
p809
I0
I0
I01
S'FeatureByIM_Completion'
p810
tp811
asg26
(dp812
S'Completion'
p813
(lp814
(S'NoCompletion'
p815
S'completion_no'
p816
tp817
a(S'CompletionByDefault'
p818
S'completion_default'
p819
tp820
a(S'CompletionByBayes'
p821
S'completion_bayes'
p822
tp823
assbsS'TMeasureAttributeFromProbabilities'
p824
(i__main__
ClassDefinition
p825
(dp826
g4
I1
sg5
I01
sg6
g824
sg7
S'TMeasureAttribute'
p827
sg9
I01
sg10
(lp828
sg12
(lp829
(S'TProbabilityEstimatorConstructor'
p830
S'estimatorConstructor'
p831
g831
S'probability estimator (none by default)'
p832
I0
I0
I00
Ntp833
a(S'TConditionalProbabilityEstimatorConstructor'
p834
S'conditionalEstimatorConstructor'
p835
g835
S'conditional probability estimator (none by default)'
p836
I0
I0
I00
Ntp837
a(S'int'
p838
S'unknownsTreatment'
p839
g839
S' treatment of unknown values'
p840
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p841
tp842
a(S'int'
p843
S'needs'
p844
g844
S' describes what kind of data is needed for computation'
p845
I0
I0
I01
S'MeasureAttribute_Needs'
p846
tp847
a(S'bool'
p848
S'handlesDiscrete'
p849
g849
S'tells whether the measure can handle discrete attributes'
p850
I0
I0
I01
Ntp851
a(S'bool'
p852
S'handlesContinuous'
p853
g853
S'tells whether the measure can handle continuous attributes'
p854
I0
I0
I01
Ntp855
a(S'bool'
p856
S'computesThresholds'
p857
g857
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p858
I0
I0
I01
Ntp859
asg26
(dp860
sbsS'TClassifierByExampleTable'
p861
(i__main__
ClassDefinition
p862
(dp863
g4
I1
sg5
I01
sg6
g861
sg7
S'TClassifierFD'
p864
sg9
I00
sg10
(lp865
sg12
(lp866
(S'TExampleTable'
p867
S'sortedExamples'
p868
g868
S'a table of examples'
p869
I0
I0
I00
Ntp870
a(S'bool'
p871
S'containsUnknowns'
p872
g872
S'if true, the table contains unknown values'
p873
I0
I0
I01
Ntp874
a(S'TClassifier'
p875
S'classifierForUnknown'
p876
g876
S'a classifier for unknown cases'
p877
I0
I0
I00
Ntp878
a(S'TEFMDataDescription'
p879
S'dataDescription'
p880
g880
S'data description'
p881
I0
I0
I00
Ntp882
ag255
ag87
ag91
asg26
(dp883
sbsS'TClassifierByLookupTable3'
p884
(i__main__
ClassDefinition
p885
(dp886
g4
I1
sg5
I01
sg6
g884
sg7
S'TClassifierByLookupTable'
p887
sg9
I00
sg10
(lp888
sg12
(lp889
(S'TVariable'
p890
S'variable1'
p891
g891
S'the first attribute used for classification'
p892
I01
I0
I00
Ntp893
a(S'TVariable'
p894
S'variable2'
p895
g895
S'the second attribute used for classification'
p896
I01
I0
I00
Ntp897
a(S'TVariable'
p898
S'variable3'
p899
g899
S'the third attribute used for classification'
p900
I01
I0
I00
Ntp901
a(S'int'
p902
S'noOfValues1'
p903
g903
S'number of values of the first attribute'
p904
I01
I0
I01
Ntp905
a(S'int'
p906
S'noOfValues2'
p907
g907
S'number of values of the second attribute'
p908
I01
I0
I01
Ntp909
a(S'int'
p910
S'noOfValues3'
p911
g911
S'number of values of the third attribute'
p912
I01
I0
I01
Ntp913
a(S'TEFMDataDescription'
p914
S'dataDescription'
p915
g915
S'data description'
p916
I0
I0
I00
Ntp917
ag79
ag83
ag87
ag91
asg26
(dp918
sbsS'TImputerConstructor_maximal'
p919
(i__main__
ClassDefinition
p920
(dp921
g4
I1
sg5
I01
sg6
g919
sg7
S'TImputerConstructor'
p922
sg9
I00
sg10
(lp923
sg12
(lp924
g146
asg26
(dp925
sbsS'TRuleBeamRefiner'
p926
(i__main__
ClassDefinition
p927
(dp928
g4
I1
sg5
I01
sg6
g926
sg7
S'TOrange'
p929
sg9
I01
sg10
(lp930
sg12
(lp931
sg26
(dp932
sbsS'TSubsetsGenerator_iterator'
p933
(i__main__
ClassDefinition
p934
(dp935
g4
I1
sg5
I01
sg6
g933
sg7
S'TOrange'
p936
sg9
I01
sg10
(lp937
sg12
(lp938
g457
asg26
(dp939
sbsS'TEquiDistDiscretizer'
p940
(i__main__
ClassDefinition
p941
(dp942
g4
I1
sg5
I01
sg6
g940
sg7
S'TDiscretizer'
p943
sg9
I00
sg10
(lp944
sg12
(lp945
(S'int'
p946
S'numberOfIntervals'
p947
g947
S'number of intervals'
p948
I0
I0
I01
Ntp949
a(S'float'
p950
S'firstCut'
p951
g951
S'the first cut-off point'
p952
I0
I0
I01
Ntp953
a(S'float'
p954
S'step'
p955
g955
S'step (width of interval)'
p956
I0
I0
I01
Ntp957
ag729
asg26
(dp958
sbsS'TValueFilter_string'
p959
(i__main__
ClassDefinition
p960
(dp961
g4
I1
sg5
I01
sg6
g959
sg7
S'TValueFilter'
p962
sg9
I00
sg10
(lp963
sg12
(lp964
(S'string'
p965
S'min'
p966
(g966
S'ref'
p967
tp968
S' reference value (lower bound for interval operators)'
p969
I0
I0
I01
Ntp970
a(S'string'
p971
S'max'
p972
g972
S'upper bound for interval operators'
p973
I0
I0
I01
Ntp974
a(S'int'
p975
S'oper'
p976
g976
S' operator'
p977
I0
I0
I01
S'ValueFilter_Operator'
p978
tp979
a(S'bool'
p980
S'caseSensitive'
p981
g981
S'if true (default), the operator is case sensitive'
p982
I0
I0
I01
Ntp983
a(S'int'
p984
S'position'
p985
g985
S"attribute's position in domain"
p986
I0
I0
I01
Ntp987
a(S'int'
p988
S'acceptSpecial'
p989
g989
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p990
I0
I0
I01
Ntp991
asg26
(dp992
sbsS'TFindNearest_BruteForce'
p993
(i__main__
ClassDefinition
p994
(dp995
g4
I1
sg5
I01
sg6
g993
sg7
S'TFindNearest'
p996
sg9
I00
sg10
(lp997
sg12
(lp998
(S'TExamplesDistance'
p999
S'distance'
p1000
g1000
S'metrics'
p1001
I0
I0
I00
Ntp1002
a(S'TExampleGenerator'
p1003
S'examples'
p1004
g1004
S'a list of stored examples'
p1005
I0
I0
I00
Ntp1006
a(S'int'
p1007
S'weightID'
p1008
g1008
S'weight to use when counting examples'
p1009
I0
I0
I01
Ntp1010
a(S'int'
p1011
S'distanceID'
p1012
g1012
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1013
I0
I0
I01
Ntp1014
a(S'bool'
p1015
S'includeSame'
p1016
g1016
S'tells whether to include examples that are same as the reference example'
p1017
I0
I0
I01
Ntp1018
asg26
(dp1019
sbsS'TRuleBeamInitializer'
p1020
(i__main__
ClassDefinition
p1021
(dp1022
g4
I1
sg5
I01
sg6
g1020
sg7
S'TOrange'
p1023
sg9
I01
sg10
(lp1024
sg12
(lp1025
sg26
(dp1026
sbsS'TMeasureAttribute_relevance'
p1027
(i__main__
ClassDefinition
p1028
(dp1029
g4
I1
sg5
I01
sg6
g1027
sg7
S'TMeasureAttributeFromProbabilities'
p1030
sg9
I00
sg10
(lp1031
sg12
(lp1032
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp1033
sbsS'TFilter_hasSpecial'
p1034
(i__main__
ClassDefinition
p1035
(dp1036
g4
I1
sg5
I01
sg6
g1034
sg7
S'TFilter'
p1037
sg9
I00
sg10
(lp1038
sg12
(lp1039
g620
ag624
asg26
(dp1040
sbsS'TDiscDistribution'
p1041
(i__main__
ClassDefinition
p1042
(dp1043
g4
I1
sg5
I01
sg6
g1041
sg7
S'TDistribution'
p1044
sg9
I00
sg10
(lp1045
sg12
(lp1046
(S'TFloatList'
p1047
S'variances'
p1048
g1048
S'variances'
p1049
I0
I0
I00
Ntp1050
a(S'TVariable'
p1051
S'variable'
p1052
g1052
S'attribute descriptor (optional)'
p1053
I0
I0
I00
Ntp1054
a(S'float'
p1055
S'unknowns'
p1056
g1056
S'number of unknown values'
p1057
I0
I0
I01
Ntp1058
a(S'float'
p1059
S'abs'
p1060
g1060
S'sum of frequencies (not including unknown values!)'
p1061
I0
I0
I01
Ntp1062
a(S'float'
p1063
S'cases'
p1064
g1064
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1065
I0
I0
I01
Ntp1066
a(S'bool'
p1067
S'normalized'
p1068
g1068
S'distribution is normalized'
p1069
I0
I0
I01
Ntp1070
a(S'bool'
p1071
S'supportsDiscrete'
p1072
g1072
S'distribution supports discrete interface'
p1073
I01
I0
I01
Ntp1074
a(S'bool'
p1075
S'supportsContinuous'
p1076
g1076
S'distribution supports continuous interface'
p1077
I01
I0
I01
Ntp1078
a(S'TRandomGenerator'
p1079
S'randomGenerator'
p1080
g1080
S'random generator; initialized when needed, if not given earlier'
p1081
I0
I0
I00
Ntp1082
asg26
(dp1083
sbsS'TBayesLearner'
p1084
(i__main__
ClassDefinition
p1085
(dp1086
g4
I1
sg5
I01
sg6
g1084
sg7
S'TLearner'
p1087
sg9
I00
sg10
(lp1088
sg12
(lp1089
(S'TProbabilityEstimatorConstructor'
p1090
S'estimatorConstructor'
p1091
g1091
S'constructs a probability estimator for P(C)'
p1092
I0
I0
I00
Ntp1093
a(S'TConditionalProbabilityEstimatorConstructor'
p1094
S'conditionalEstimatorConstructor'
p1095
g1095
S'constructs a probability estimator for P(C|A) '
p1096
I0
I0
I00
Ntp1097
a(S'TConditionalProbabilityEstimatorConstructor'
p1098
S'conditionalEstimatorConstructorContinuous'
p1099
g1099
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1100
I0
I0
I00
Ntp1101
a(S'bool'
p1102
S'normalizePredictions'
p1103
g1103
S'instructs learner to construct a classifier that normalizes probabilities'
p1104
I0
I0
I01
Ntp1105
a(S'bool'
p1106
S'adjustThreshold'
p1107
g1107
S'adjust probability thresholds (for binary classes only)'
p1108
I0
I0
I01
Ntp1109
ag102
asg26
(dp1110
sbsS'TIMByRelief'
p1111
(i__main__
ClassDefinition
p1112
(dp1113
g4
I1
sg5
I01
sg6
g1111
sg7
S'TIMConstructor'
p1114
sg9
I00
sg10
(lp1115
sg12
(lp1116
(S'TExamplesDistance_Relief'
p1117
S'distance'
p1118
g1118
S'distance measure'
p1119
I0
I0
I00
Ntp1120
a(S'float'
p1121
S'k'
p1122
g1122
S'number of neighbours'
p1123
I0
I0
I01
Ntp1124
a(S'float'
p1125
S'm'
p1126
g1126
S'number of reference examples'
p1127
I0
I0
I01
Ntp1128
a(S'float'
p1129
S'kFromColumns'
p1130
g1130
S'if positive, number of neighbours is #columns*kFromColumns'
p1131
I0
I0
I01
Ntp1132
a(S'bool'
p1133
S'ignoreSameExample'
p1134
g1134
S'does not put reference example into M'
p1135
I0
I0
I01
Ntp1136
a(S'bool'
p1137
S'convertToBinary'
p1138
g1138
S'convert to binary class (hit-miss)'
p1139
I0
I0
I01
Ntp1140
a(S'bool'
p1141
S'correctClassFirst'
p1142
g1142
S'puts the correct class proportion to the first place'
p1143
I0
I0
I01
Ntp1144
a(S'bool'
p1145
S'allExamples'
p1146
g1146
S'uses all examples for reference examples'
p1147
I0
I0
I01
Ntp1148
a(S'bool'
p1149
S'allSameNeighbours'
p1150
g1150
S'uses all the examples same to the reference as neighbours'
p1151
I0
I0
I01
Ntp1152
a(S'bool'
p1153
S'recordRowExamples'
p1154
g1154
S'enables creation of rowExample list'
p1155
I0
I0
I01
Ntp1156
asg26
(dp1157
sbsS'TConditionalProbabilityEstimator'
p1158
(i__main__
ClassDefinition
p1159
(dp1160
g4
I1
sg5
I01
sg6
g1158
sg7
S'TOrange'
p1161
sg9
I01
sg10
(lp1162
sg12
(lp1163
g117
ag121
asg26
(dp1164
sbsS'TColumnAssessor_Laplace'
p1165
(i__main__
ClassDefinition
p1166
(dp1167
g4
I1
sg5
I01
sg6
g1165
sg7
S'TColumnAssessor'
p1168
sg9
I00
sg10
(lp1169
sg12
(lp1170
sg26
(dp1171
sbsS'TPreprocessor_addGaussianNoise'
p1172
(i__main__
ClassDefinition
p1173
(dp1174
g4
I1
sg5
I01
sg6
g1172
sg7
S'TPreprocessor'
p1175
sg9
I00
sg10
(lp1176
sg12
(lp1177
(S'TVariableFloatMap'
p1178
S'deviations'
p1179
g1179
S'deviations individual attribute values'
p1180
I0
I0
I00
Ntp1181
a(S'float'
p1182
S'defaultDeviation'
p1183
g1183
S'default deviation'
p1184
I0
I0
I01
Ntp1185
a(S'TRandomGenerator'
p1186
S'randomGenerator'
p1187
g1187
S'random number generator'
p1188
I0
I0
I00
Ntp1189
asg26
(dp1190
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1191
(i__main__
ClassDefinition
p1192
(dp1193
g4
I1
sg5
I01
sg6
g1191
sg7
S'TRuleStoppingCriteria'
p1194
sg9
I00
sg10
(lp1195
sg12
(lp1196
sg26
(dp1197
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1198
(i__main__
ClassDefinition
p1199
(dp1200
g4
I1
sg5
I01
sg6
g1198
sg7
S'TTreeSplitConstructor_Measure'
p1201
sg9
I00
sg10
(lp1202
sg12
(lp1203
(S'TMeasureAttribute'
p1204
S'measure'
p1205
g1205
S'attribute quality measure'
p1206
I0
I0
I00
Ntp1207
a(S'float'
p1208
S'worstAcceptable'
p1209
g1209
S'the worst acceptable quality of the attribute'
p1210
I0
I0
I01
Ntp1211
ag708
asg26
(dp1212
sbsS'TMeasureAttribute_relief'
p1213
(i__main__
ClassDefinition
p1214
(dp1215
g4
I1
sg5
I01
sg6
g1213
sg7
S'TMeasureAttribute'
p1216
sg9
I00
sg10
(lp1217
sg12
(lp1218
(S'float'
p1219
g1122
g1122
S'number of neighbours'
p1220
I0
I0
I01
Ntp1221
a(S'float'
p1222
g1126
g1126
S'number of reference examples'
p1223
I0
I0
I01
Ntp1224
a(S'bool'
p1225
S'checkCachedData'
p1226
g1226
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p1227
I0
I0
I01
Ntp1228
ag847
ag851
ag855
ag859
asg26
(dp1229
sbsS'TFilter_compatibleExample'
p1230
(i__main__
ClassDefinition
p1231
(dp1232
g4
I1
sg5
I01
sg6
g1230
sg7
S'TFilter'
p1233
sg9
I00
sg10
(lp1234
sg12
(lp1235
(S'TExample'
p1236
S'example'
p1237
g1237
S'example with which examples are compared'
p1238
I0
I0
I00
Ntp1239
ag620
ag624
asg26
(dp1240
sbsS'TRemoveRedundant'
p1241
(i__main__
ClassDefinition
p1242
(dp1243
g4
I1
sg5
I01
sg6
g1241
sg7
S'TOrange'
p1244
sg9
I01
sg10
(lp1245
sg12
(lp1246
(S'bool'
p1247
S'keepValues'
p1248
g1248
S'keep an attribute if number values is only smaller, not one'
p1249
I0
I0
I01
Ntp1250
asg26
(dp1251
sbsS'TExamplesDistanceConstructor_Hamming'
p1252
(i__main__
ClassDefinition
p1253
(dp1254
g4
I1
sg5
I01
sg6
g1252
sg7
S'TExamplesDistanceConstructor'
p1255
sg9
I00
sg10
(lp1256
sg12
(lp1257
(S'bool'
p1258
S'ignoreClass'
p1259
g1259
S'if true (default), class value is ignored when computing distances'
p1260
I0
I0
I01
Ntp1261
a(S'bool'
p1262
S'ignoreUnknowns'
p1263
g1263
S'if true (default: false) unknown values are ignored in computation'
p1264
I0
I0
I01
Ntp1265
a(S'bool'
p1266
S'ignoreClass'
p1267
g1267
S'if true (default), class value is ignored when computing distances'
p1268
I0
I0
I01
Ntp1269
asg26
(dp1270
sbsS'TSomeValue'
p1271
(i__main__
ClassDefinition
p1272
(dp1273
g4
I1
sg5
I01
sg6
g1271
sg7
S'TOrange'
p1274
sg9
I01
sg10
(lp1275
sg12
(lp1276
sg26
(dp1277
sbsS'TRuleClassifierConstructor_firstRule'
p1278
(i__main__
ClassDefinition
p1279
(dp1280
g4
I1
sg5
I01
sg6
g1278
sg7
S'TRuleClassifierConstructor'
p1281
sg9
I00
sg10
(lp1282
sg12
(lp1283
sg26
(dp1284
sbsS'TStopDistributionClustering_noProfit'
p1285
(i__main__
ClassDefinition
p1286
(dp1287
g4
I1
sg5
I01
sg6
g1285
sg7
S'TStopDistributionClustering'
p1288
sg9
I00
sg10
(lp1289
sg12
(lp1290
(S'float'
p1291
S'minProfitProportion'
p1292
g1292
S'minimal allowable profit proportion'
p1293
I0
I0
I01
Ntp1294
asg26
(dp1295
sbsS'TBiModalDiscretization'
p1296
(i__main__
ClassDefinition
p1297
(dp1298
g4
I1
sg5
I01
sg6
g1296
sg7
S'TDiscretization'
p1299
sg9
I00
sg10
(lp1300
sg12
(lp1301
(S'bool'
p1302
S'splitInTwo'
p1303
g1303
S'if true (default), flanks are merged into a single interval'
p1304
I0
I0
I01
Ntp1305
asg26
(dp1306
sbsS'TColoredIG'
p1307
(i__main__
ClassDefinition
p1308
(dp1309
g4
I1
sg5
I01
sg6
g1307
sg7
S'TGeneralExampleClustering'
p1310
sg9
I00
sg10
(lp1311
sg12
(lp1312
(S'TIG'
p1313
S'ig'
p1314
g1314
S'incompatibility graph'
p1315
I0
I0
I00
Ntp1316
a(S'TIntList'
p1317
S'colors'
p1318
g1318
S'colors (one element corresponding to each ig node)'
p1319
I0
I0
I00
Ntp1320
asg26
(dp1321
sbsS'TMeasureAttribute'
p1322
(i__main__
ClassDefinition
p1323
(dp1324
g4
I1
sg5
I01
sg6
g1322
sg7
S'TOrange'
p1325
sg9
I00
sg10
(lp1326
sg12
(lp1327
g847
ag851
ag855
ag859
asg26
(dp1328
S'Needs'
p1329
(lp1330
(S'Contingency_Class'
p1331
I0
tp1332
a(S'DomainContingency'
p1333
I1
tp1334
a(S'Generator'
p1335
I2
tp1336
asS'UnknownsTreatment'
p1337
(lp1338
(S'IgnoreUnknowns'
p1339
I0
tp1340
a(S'ReduceByUnknowns'
p1341
I1
tp1342
a(S'UnknownsToCommon'
p1343
I2
tp1344
a(S'UnknownsAsValue'
p1345
I3
tp1346
assbsS'TRuleEvaluator'
p1347
(i__main__
ClassDefinition
p1348
(dp1349
g4
I1
sg5
I01
sg6
g1347
sg7
S'TOrange'
p1350
sg9
I01
sg10
(lp1351
sg12
(lp1352
sg26
(dp1353
sbsS'TStringVariable'
p1354
(i__main__
ClassDefinition
p1355
(dp1356
g4
I1
sg5
I01
sg6
g1354
sg7
S'TVariable'
p1357
sg9
I00
sg10
(lp1358
sg12
(lp1359
g293
ag298
ag302
ag306
ag310
ag314
ag318
ag322
asg26
(dp1360
sbsS'TAssessIMQuality'
p1361
(i__main__
ClassDefinition
p1362
(dp1363
g4
I1
sg5
I01
sg6
g1361
sg7
S'TOrange'
p1364
sg9
I00
sg10
(lp1365
sg12
(lp1366
(S'TColumnAssessor'
p1367
S'columnAssessor'
p1368
g1368
S'column quality assessor'
p1369
I0
I0
I00
Ntp1370
asg26
(dp1371
sbsS'TGraphAsTree'
p1372
(i__main__
ClassDefinition
p1373
(dp1374
g4
I1
sg5
I01
sg6
g1372
sg7
S'TGraph'
p1375
sg9
I00
sg10
(lp1376
sg12
(lp1377
(S'int'
p1378
S'nVertices'
p1379
g1379
S'the number of vertices'
p1380
I01
I0
I01
Ntp1381
a(S'int'
p1382
S'nEdgeTypes'
p1383
g1383
S'the number of edge types'
p1384
I01
I0
I01
Ntp1385
a(S'bool'
p1386
S'directed'
p1387
g1387
S'directed'
p1388
I01
I0
I01
Ntp1389
asg26
(dp1390
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1391
(i__main__
ClassDefinition
p1392
(dp1393
g4
I1
sg5
I01
sg6
g1391
sg7
S'TTreeExampleSplitter'
p1394
sg9
I00
sg10
(lp1395
sg12
(lp1396
sg26
(dp1397
sbsS'TProbabilityEstimator_FromDistribution'
p1398
(i__main__
ClassDefinition
p1399
(dp1400
g4
I1
sg5
I01
sg6
g1398
sg7
S'TProbabilityEstimator'
p1401
sg9
I00
sg10
(lp1402
sg12
(lp1403
(S'TDistribution'
p1404
S'probabilities'
p1405
g1405
S'probabilities'
p1406
I0
I0
I00
Ntp1407
a(S'bool'
p1408
S'supportsDiscrete'
p1409
g1409
S'can estimate probabilities of discrete attributes'
p1410
I01
I0
I01
Ntp1411
a(S'bool'
p1412
S'supportsContinuous'
p1413
g1413
S'can estimate probabilities of continuous attributes'
p1414
I01
I0
I01
Ntp1415
asg26
(dp1416
sbsS'TFilter_index'
p1417
(ipyprops
ClassDefinition
p1418
(dp1419
g4
I0
sg5
I01
sg6
g1417
sg7
g126
sg9
I0
sg10
(lp1420
sg12
(lp1421
sg26
(dp1422
sbsS'TDistributionList'
p1423
(ipyprops
ClassDefinition
p1424
(dp1425
g4
I0
sg5
I01
sg6
g1423
sg7
g126
sg9
I0
sg10
(lp1426
sg12
(lp1427
sg26
(dp1428
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1429
(i__main__
ClassDefinition
p1430
(dp1431
g4
I1
sg5
I01
sg6
g1429
sg7
S'TTreeDescender'
p1432
sg9
I0
sg10
(lp1433
sg12
(lp1434
sg26
(dp1435
sbsS'TRuleList'
p1436
(ipyprops
ClassDefinition
p1437
(dp1438
g4
I0
sg5
I01
sg6
g1436
sg7
g126
sg9
I0
sg10
(lp1439
sg12
(lp1440
sg26
(dp1441
sbsS'TLogitClassifierState'
p1442
(i__main__
ClassDefinition
p1443
(dp1444
g4
I1
sg5
I01
sg6
g1442
sg7
S'TOrange'
p1445
sg9
I00
sg10
(lp1446
sg12
(lp1447
sg26
(dp1448
sbsS'TExamplesDistance'
p1449
(i__main__
ClassDefinition
p1450
(dp1451
g4
I1
sg5
I01
sg6
g1449
sg7
S'TOrange'
p1452
sg9
I01
sg10
(lp1453
sg12
(lp1454
sg26
(dp1455
sbsS'TFileExampleGenerator'
p1456
(i__main__
ClassDefinition
p1457
(dp1458
g4
I1
sg5
I01
sg6
g1456
sg7
S'TExampleGenerator'
p1459
sg9
I01
sg10
(lp1460
sg12
(lp1461
(S'string'
p1462
S'filename'
p1463
g1463
S'filename'
p1464
I0
I0
I01
Ntp1465
a(S'int'
p1466
S'startDataPos'
p1467
g1467
S'starting position of the data in file'
p1468
I0
I0
I01
Ntp1469
a(S'int'
p1470
S'startDataLine'
p1471
g1471
S'line in the file where the data starts'
p1472
I0
I0
I01
Ntp1473
ag270
ag274
asg26
(dp1474
sbsS'TNormalizeContinuous'
p1475
(i__main__
ClassDefinition
p1476
(dp1477
g4
I1
sg5
I01
sg6
g1475
sg7
S'TTransformValue'
p1478
sg9
I00
sg10
(lp1479
sg12
(lp1480
(S'float'
p1481
S'average'
p1482
g1482
S'the average value'
p1483
I0
I0
I01
Ntp1484
a(S'float'
p1485
S'span'
p1486
g1486
S'the value span'
p1487
I0
I0
I01
Ntp1488
ag729
asg26
(dp1489
sbsS'TContingencyClassAttr'
p1490
(i__main__
ClassDefinition
p1491
(dp1492
g4
I1
sg5
I01
sg6
g1490
sg7
S'TContingencyClass'
p1493
sg9
I00
sg10
(lp1494
sg12
(lp1495
(S'TVariable'
p1496
S'outerVariable'
p1497
g1497
S'outer attribute'
p1498
I0
I0
I00
Ntp1499
a(S'TVariable'
p1500
S'innerVariable'
p1501
g1501
S'inner attribute'
p1502
I0
I0
I00
Ntp1503
a(S'int'
p1504
S'varType'
p1505
g1505
S' outer attribute type'
p1506
I0
I0
I01
S'Variable_Type'
p1507
tp1508
a(S'TDistribution'
p1509
S'outerDistribution'
p1510
g1510
S'distribution of values of outer attributes'
p1511
I0
I0
I00
Ntp1512
a(S'TDistribution'
p1513
S'innerDistribution'
p1514
g1514
S'distribution of values of inner attributes'
p1515
I0
I0
I00
Ntp1516
a(S'TDistribution'
p1517
S'innerDistributionUnknown'
p1518
g1518
S'distribution of inner variable for examples where the outer value was unknown'
p1519
I0
I0
I00
Ntp1520
asg26
(dp1521
sbsS'TMissValuesGenerator'
p1522
(i__main__
ClassDefinition
p1523
(dp1524
g4
I1
sg5
I01
sg6
g1522
sg7
S'TChangeExampleGenerator'
p1525
sg9
I00
sg10
(lp1526
sg12
(lp1527
(S'TIntFloatList'
p1528
S'replaceProbabilities'
p1529
g1529
S"probabilities for replacing attributes' values"
p1530
I0
I0
I00
Ntp1531
a(S'TRandomGenerator'
p1532
S'randomGenerator'
p1533
g1533
S'random generator'
p1534
I0
I0
I00
Ntp1535
ag270
ag274
asg26
(dp1536
sbsS'TLogRegClassifier'
p1537
(i__main__
ClassDefinition
p1538
(dp1539
g4
I1
sg5
I01
sg6
g1537
sg7
S'TClassifierFD'
p1540
sg9
I00
sg10
(lp1541
sg12
(lp1542
(S'TDomain'
p1543
S'continuizedDomain'
p1544
g1544
S'if absent, there is no continuous attributes in original domain'
p1545
I0
I0
I00
Ntp1546
a(S'TEFMDataDescription'
p1547
S'dataDescription'
p1548
g1548
S'Data needed for classification in presence of undefined values'
p1549
I0
I0
I00
Ntp1550
a(S'TAttributedFloatList'
p1551
S'beta'
p1552
g1552
S'estimated beta coefficients for logistic regression'
p1553
I0
I0
I00
Ntp1554
a(S'TAttributedFloatList'
p1555
S'beta_se'
p1556
g1556
S'estimated standard errors for beta coefficients'
p1557
I0
I0
I00
Ntp1558
a(S'TAttributedFloatList'
p1559
S'wald_Z'
p1560
g1560
S'Wald Z statstic for beta coefficients'
p1561
I0
I0
I00
Ntp1562
a(S'TAttributedFloatList'
p1563
S'P'
p1564
g1564
S'estimated significances for beta coefficients'
p1565
I0
I0
I00
Ntp1566
a(S'float'
p1567
S'likelihood'
p1568
g1568
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1569
I0
I0
I01
Ntp1570
a(S'int'
p1571
S'fit_status'
p1572
g1572
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1573
I0
I0
I01
Ntp1574
a(S'TImputer'
p1575
S'imputer'
p1576
g1576
S'if present, it imputes unknown values'
p1577
I0
I0
I00
Ntp1578
ag255
ag87
ag91
asg26
(dp1579
sbsS'TClassifierRandomGenerator'
p1580
(i__main__
ClassDefinition
p1581
(dp1582
g4
I1
sg5
I01
sg6
g1580
sg7
S'TExampleGenerator'
p1583
sg9
I00
sg10
(lp1584
sg12
(lp1585
(S'TClassifier'
p1586
S'classify'
p1587
g1587
S'classifier'
p1588
I0
I0
I00
Ntp1589
a(S'int'
p1590
S'noOfEx'
p1591
g1591
S'number of examples'
p1592
I0
I0
I01
Ntp1593
ag270
ag274
asg26
(dp1594
sbsS'TPreprocessor_select'
p1595
(i__main__
ClassDefinition
p1596
(dp1597
g4
I1
sg5
I01
sg6
g1595
sg7
S'TPreprocessor'
p1598
sg9
I00
sg10
(lp1599
sg12
(lp1600
(S'TVarList'
p1601
S'attributes'
p1602
g1602
S'tells which attributes to select'
p1603
I0
I0
I00
Ntp1604
asg26
(dp1605
sbsS'TSVMClassifierSparse'
p1606
(i__main__
ClassDefinition
p1607
(dp1608
g4
I1
sg5
I01
sg6
g1606
sg7
S'TSVMClassifier'
p1609
sg9
I00
sg10
(lp1610
sg12
(lp1611
(S'bool'
p1612
S'useNonMeta'
p1613
g1613
S'include non meta attributes'
p1614
I0
I0
I01
Ntp1615
ag223
ag227
ag231
ag235
ag239
ag243
ag247
ag251
ag255
ag87
ag91
asg26
(dp1616
sbsS'TFilter_disjunction'
p1617
(i__main__
ClassDefinition
p1618
(dp1619
g4
I1
sg5
I01
sg6
g1617
sg7
S'TFilter'
p1620
sg9
I00
sg10
(lp1621
sg12
(lp1622
(S'TFilterList'
p1623
S'filters'
p1624
g1624
S'a list of filters;'
p1625
I0
I0
I00
Ntp1626
ag620
ag624
asg26
(dp1627
sbsS'TChangeExampleGenerator'
p1628
(i__main__
ClassDefinition
p1629
(dp1630
g4
I1
sg5
I01
sg6
g1628
sg7
S'TAdapterGenerator'
p1631
sg9
I01
sg10
(lp1632
sg12
(lp1633
g270
ag274
asg26
(dp1634
sbsS'TAttributedFloatList'
p1635
(ipyprops
ClassDefinition
p1636
(dp1637
g4
I0
sg5
I01
sg6
g1635
sg7
S'TFloatList'
p1638
sg9
I0
sg10
(lp1639
sg12
(lp1640
sg26
(dp1641
sbsS'TIMByRowsByRelief'
p1642
(i__main__
ClassDefinition
p1643
(dp1644
g4
I1
sg5
I01
sg6
g1642
sg7
S'TIMByRowsConstructor'
p1645
sg9
I00
sg10
(lp1646
sg12
(lp1647
(S'float'
p1648
g1122
g1122
S'number of neighbours'
p1649
I0
I0
I01
Ntp1650
a(S'float'
p1651
g1126
g1126
S'number of reference examples'
p1652
I0
I0
I01
Ntp1653
a(S'float'
p1654
S'kFromColumns'
p1655
g1655
S'if positive, number of neighbours is #columns*kFromColumns'
p1656
I0
I0
I01
Ntp1657
a(S'bool'
p1658
S'ignoreSameExample'
p1659
g1659
S'does not put reference example into M'
p1660
I0
I0
I01
Ntp1661
a(S'bool'
p1662
S'convertToBinary'
p1663
g1663
S'convert to binary class (hit-miss)'
p1664
I0
I0
I01
Ntp1665
a(S'bool'
p1666
S'correctClassFirst'
p1667
g1667
S'puts the correct class proportion to the first place'
p1668
I0
I0
I01
Ntp1669
a(S'bool'
p1670
S'allExamples'
p1671
g1671
S'uses all examples for reference examples'
p1672
I0
I0
I01
Ntp1673
a(S'bool'
p1674
S'allSameNeighbours'
p1675
g1675
S'uses all the examples same to the reference as neighbours'
p1676
I0
I0
I01
Ntp1677
asg26
(dp1678
sbsS'TFindNearestConstructor'
p1679
(i__main__
ClassDefinition
p1680
(dp1681
g4
I1
sg5
I01
sg6
g1679
sg7
S'TOrange'
p1682
sg9
I01
sg10
(lp1683
sg12
(lp1684
(S'TExamplesDistanceConstructor'
p1685
S'distanceConstructor'
p1686
g1686
S'metrics'
p1687
I0
I0
I00
Ntp1688
a(S'bool'
p1689
S'includeSame'
p1690
g1690
S'tells whether to include examples that are same as the reference example'
p1691
I0
I0
I01
Ntp1692
asg26
(dp1693
sbsS'TRuleClassifier_firstRule'
p1694
(i__main__
ClassDefinition
p1695
(dp1696
g4
I1
sg5
I01
sg6
g1694
sg7
S'TRuleClassifier'
p1697
sg9
I00
sg10
(lp1698
sg12
(lp1699
(S'TDistribution'
p1700
S'prior'
p1701
g1701
S'prior distribution'
p1702
I0
I0
I00
Ntp1703
ag534
ag537
ag540
ag87
ag91
asg26
(dp1704
sbsS'TColumnAssessor'
p1705
(i__main__
ClassDefinition
p1706
(dp1707
g4
I1
sg5
I01
sg6
g1705
sg7
S'TOrange'
p1708
sg9
I01
sg10
(lp1709
sg12
(lp1710
sg26
(dp1711
sbsS'TTableAverager'
p1712
(i__main__
ClassDefinition
p1713
(dp1714
g4
I1
sg5
I01
sg6
g1712
sg7
S'TOrange'
p1715
sg9
I00
sg10
(lp1716
sg12
(lp1717
sg26
(dp1718
sbsS'TComputeDomainContingency_Preprocessor'
p1719
(i__main__
ClassDefinition
p1720
(dp1721
g4
I1
sg5
I01
sg6
g1719
sg7
S'TComputeDomainContingency'
p1722
sg9
I00
sg10
(lp1723
sg12
(lp1724
(S'TPreprocessor'
p1725
S'preprocessor'
p1726
g1726
S'preprocesses the exmaples (see the manual for restrictions!)'
p1727
I0
I0
I00
Ntp1728
a(S'bool'
p1729
S'resultInOriginalDomain'
p1730
g1730
S'tells whether the resulting DomainContingency should consist of original attributes'
p1731
I0
I0
I01
Ntp1732
ag25
asg26
(dp1733
sbsS'TFloatFloatList'
p1734
(ipyprops
ClassDefinition
p1735
(dp1736
g4
I0
sg5
I01
sg6
g1734
sg7
g126
sg9
I0
sg10
(lp1737
sg12
(lp1738
sg26
(dp1739
sbsS'TMeasureAttribute_MSE'
p1740
(i__main__
ClassDefinition
p1741
(dp1742
g4
I1
sg5
I01
sg6
g1740
sg7
S'TMeasureAttribute'
p1743
sg9
I00
sg10
(lp1744
sg12
(lp1745
(S'float'
p1746
g1126
g1126
S'm for m-estimate'
p1747
I0
I0
I01
Ntp1748
a(S'int'
p1749
S'unknownsTreatment'
p1750
g1750
S' treatment of unknown values'
p1751
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1752
tp1753
ag847
ag851
ag855
ag859
asg26
(dp1754
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1755
(i__main__
ClassDefinition
p1756
(dp1757
g4
I1
sg5
I01
sg6
g1755
sg7
S'TStopIMClusteringByAssessor'
p1758
sg9
I00
sg10
(lp1759
sg12
(lp1760
sg26
(dp1761
sbsS'TItemsetsSparseInducer'
p1762
(i__main__
ClassDefinition
p1763
(dp1764
g4
I1
sg5
I01
sg6
g1762
sg7
S'TOrange'
p1765
sg9
I00
sg10
(lp1766
sg12
(lp1767
(S'int'
p1768
S'maxItemSets'
p1769
g1769
S'maximal number of itemsets (increase if you want)'
p1770
I0
I0
I01
Ntp1771
a(S'float'
p1772
S'support'
p1773
g1773
S'required support'
p1774
I0
I0
I01
Ntp1775
a(S'bool'
p1776
S'storeExamples'
p1777
g1777
S'stores examples corresponding to itemsets'
p1778
I0
I0
I01
Ntp1779
asg26
(dp1780
sbsS'TPreprocessor_dropMissing'
p1781
(i__main__
ClassDefinition
p1782
(dp1783
g4
I1
sg5
I01
sg6
g1781
sg7
S'TPreprocessor'
p1784
sg9
I00
sg10
(lp1785
sg12
(lp1786
sg26
(dp1787
sbsS'TDomainContinuizer'
p1788
(i__main__
ClassDefinition
p1789
(dp1790
g4
I1
sg5
I01
sg6
g1788
sg7
S'TOrange'
p1791
sg9
I00
sg10
(lp1792
sg12
(lp1793
(S'bool'
p1794
S'zeroBased'
p1795
g1795
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1796
I0
I0
I01
Ntp1797
a(S'int'
p1798
S'continuousTreatment'
p1799
g1799
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1800
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1801
tp1802
a(S'int'
p1803
S'multinomialTreatment'
p1804
g1804
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-error, 5-convert as ordinal, 6-ordinal,normalized'
p1805
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1806
tp1807
a(S'int'
p1808
S'classTreatment'
p1809
g1809
S' 3-leave as is unless target is given, 4-error if not continuous nor binary nor target given, 5-convert as ordinal (unless target given)'
p1810
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1811
tp1812
asg26
(dp1813
S'MultinomialTreatment'
p1814
(lp1815
(S'LowestIsBase'
p1816
I0
tp1817
a(S'FrequentIsBase'
p1818
I1
tp1819
a(S'NValues'
p1820
I2
tp1821
a(S'Ignore'
p1822
I3
tp1823
a(S'IgnoreAllDiscrete'
p1824
I4
tp1825
a(S'ReportError'
p1826
I5
tp1827
a(S'AsOrdinal'
p1828
I6
tp1829
a(S'AsNormalizedOrdinal'
p1830
I7
tp1831
asS'ClassTreatment'
p1832
(lp1833
(S'LeaveUnlessTarget'
p1834
S'3'
p1835
tp1836
a(S'ErrorIfCannotHandle'
p1837
S'4'
p1838
tp1839
a(S'AsOrdinal'
p1840
S'5'
p1841
tp1842
asS'ContinuousTreatment'
p1843
(lp1844
(S'Leave'
p1845
I0
tp1846
a(S'NormalizeBySpan'
p1847
I1
tp1848
a(S'NormalizeByVariance'
p1849
I2
tp1850
assbsS'TMeasureAttribute_gainRatio'
p1851
(i__main__
ClassDefinition
p1852
(dp1853
g4
I1
sg5
I01
sg6
g1851
sg7
S'TMeasureAttributeFromProbabilities'
p1854
sg9
I00
sg10
(lp1855
sg12
(lp1856
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp1857
sbsS'TPNN'
p1858
(i__main__
ClassDefinition
p1859
(dp1860
g4
I1
sg5
I01
sg6
g1858
sg7
S'TClassifierFD'
p1861
sg9
I00
sg10
(lp1862
sg12
(lp1863
g673
ag677
ag681
ag685
ag689
ag693
ag697
ag255
ag87
ag91
asg26
(dp1864
sbsS'TBiModalDiscretizer'
p1865
(i__main__
ClassDefinition
p1866
(dp1867
g4
I1
sg5
I01
sg6
g1865
sg7
S'TDiscretizer'
p1868
sg9
I00
sg10
(lp1869
sg12
(lp1870
(S'float'
p1871
S'low'
p1872
g1872
S'low threshold'
p1873
I0
I0
I01
Ntp1874
a(S'float'
p1875
S'high'
p1876
g1876
S'high threshold'
p1877
I0
I0
I01
Ntp1878
ag729
asg26
(dp1879
sbsS'TExamplesDistanceConstructor_Euclidean'
p1880
(i__main__
ClassDefinition
p1881
(dp1882
g4
I1
sg5
I01
sg6
g1880
sg7
S'TExamplesDistanceConstructor_Normalized'
p1883
sg9
I00
sg10
(lp1884
sg12
(lp1885
(S'bool'
p1886
S'normalize'
p1887
g1887
S'tells whether to normalize distances between attributes'
p1888
I0
I0
I01
Ntp1889
a(S'bool'
p1890
S'ignoreUnknowns'
p1891
g1891
S'if true (default: false) unknown values are ignored in computation'
p1892
I0
I0
I01
Ntp1893
ag1269
asg26
(dp1894
sbsS'TContingencyAttrAttr'
p1895
(i__main__
ClassDefinition
p1896
(dp1897
g4
I1
sg5
I01
sg6
g1895
sg7
S'TContingency'
p1898
sg9
I00
sg10
(lp1899
sg12
(lp1900
g1499
ag1503
ag1508
ag1512
ag1516
ag1520
asg26
(dp1901
sbsS'TRuleBeamRefiner_Selector'
p1902
(i__main__
ClassDefinition
p1903
(dp1904
g4
I1
sg5
I01
sg6
g1902
sg7
S'TRuleBeamRefiner'
p1905
sg9
I00
sg10
(lp1906
sg12
(lp1907
(S'TDiscretization'
p1908
S'discretization'
p1909
g1909
S'discretization for continuous attributes'
p1910
I0
I0
I00
Ntp1911
asg26
(dp1912
sbsS'TProbabilityEstimatorConstructor_Laplace'
p1913
(i__main__
ClassDefinition
p1914
(dp1915
g4
I1
sg5
I01
sg6
g1913
sg7
S'TProbabilityEstimatorConstructor'
p1916
sg9
I00
sg10
(lp1917
sg12
(lp1918
(S'float'
p1919
S'l'
p1920
g1920
S'number of examples added to each class (default: 1)'
p1921
I0
I0
I01
Ntp1922
a(S'bool'
p1923
S'renormalize'
p1924
g1924
S'computes the estimate on the original (not the normalized) distribution'
p1925
I0
I0
I01
Ntp1926
asg26
(dp1927
sbsS'TExamplesDistance_Relief'
p1928
(i__main__
ClassDefinition
p1929
(dp1930
g4
I1
sg5
I01
sg6
g1928
sg7
S'TExamplesDistance'
p1931
sg9
I00
sg10
(lp1932
sg12
(lp1933
(S'TDomainDistributions'
p1934
S'distributions'
p1935
g1935
S"distributions of attributes' values"
p1936
I0
I0
I00
Ntp1937
a(S'TAttributedFloatList'
p1938
S'averages'
p1939
g1939
S'average values of attributes'
p1940
I0
I0
I00
Ntp1941
a(S'TAttributedFloatList'
p1942
S'normalizations'
p1943
g1943
S"ranges of attributes' values"
p1944
I0
I0
I00
Ntp1945
a(S'TAttributedFloatList'
p1946
S'bothSpecial'
p1947
g1947
S'distance if both values of both attributes are undefined'
p1948
I0
I0
I00
Ntp1949
asg26
(dp1950
sbsS'TExamplesDistance_Manhattan'
p1951
(i__main__
ClassDefinition
p1952
(dp1953
g4
I1
sg5
I01
sg6
g1951
sg7
S'TExamplesDistance_Normalized'
p1954
sg9
I00
sg10
(lp1955
sg12
(lp1956
g406
ag410
ag414
ag418
ag422
ag426
ag430
asg26
(dp1957
sbsS'TExamplesDistanceConstructor_Manhattan'
p1958
(i__main__
ClassDefinition
p1959
(dp1960
g4
I1
sg5
I01
sg6
g1958
sg7
S'TExamplesDistanceConstructor_Normalized'
p1961
sg9
I00
sg10
(lp1962
sg12
(lp1963
g1889
ag1893
ag1269
asg26
(dp1964
sbsS'TStringList'
p1965
(ipyprops
ClassDefinition
p1966
(dp1967
g4
I0
sg5
I01
sg6
g1965
sg7
g126
sg9
I0
sg10
(lp1968
sg12
(lp1969
sg26
(dp1970
sbsS'TTreeDescender'
p1971
(i__main__
ClassDefinition
p1972
(dp1973
g4
I1
sg5
I01
sg6
g1971
sg7
S'TOrange'
p1974
sg9
I01
sg10
(lp1975
sg12
(lp1976
sg26
(dp1977
sbsS'TColumnAssessor_Measure'
p1978
(i__main__
ClassDefinition
p1979
(dp1980
g4
I1
sg5
I01
sg6
g1978
sg7
S'TColumnAssessor'
p1981
sg9
I00
sg10
(lp1982
sg12
(lp1983
(S'TMeasureAttribute'
p1984
S'measure'
p1985
g1985
S'attribute quality measure'
p1986
I0
I0
I00
Ntp1987
asg26
(dp1988
sbsS'TIMBlurer'
p1989
(i__main__
ClassDefinition
p1990
(dp1991
g4
I1
sg5
I01
sg6
g1989
sg7
S'TIMByRowsPreprocessor'
p1992
sg9
I00
sg10
(lp1993
sg12
(lp1994
(S'float'
p1995
S'weight'
p1996
g1996
S'weight of neighbours'
p1997
I0
I0
I01
Ntp1998
a(S'float'
p1999
S'origWeight'
p2000
g2000
S'weight of original row'
p2001
I0
I0
I01
Ntp2002
a(S'TFloatList'
p2003
S'attrWeights'
p2004
g2004
S'weights by individual (different) attributes'
p2005
I0
I0
I00
Ntp2006
a(S'bool'
p2007
S'adjustOrigWeight'
p2008
g2008
S'uses 1-weight(s) for weight of original row'
p2009
I0
I0
I01
Ntp2010
a(S'bool'
p2011
S'onlyEmpty'
p2012
g2012
S'blurs only empty cells'
p2013
I0
I0
I01
Ntp2014
asg26
(dp2015
sbsS'TFilter'
p2016
(i__main__
ClassDefinition
p2017
(dp2018
g4
I1
sg5
I01
sg6
g2016
sg7
S'TOrange'
p2019
sg9
I01
sg10
(lp2020
sg12
(lp2021
g620
ag624
asg26
(dp2022
sbsS'TC45Learner'
p2023
(i__main__
ClassDefinition
p2024
(dp2025
g4
I1
sg5
I01
sg6
g2023
sg7
S'TLearner'
p2026
sg9
I00
sg10
(lp2027
sg12
(lp2028
(S'bool'
p2029
S'gainRatio'
p2030
(g2030
S'g'
p2031
tp2032
S' use gain ratio (instead of information gain)'
p2033
I0
I0
I01
Ntp2034
a(S'bool'
p2035
S'subset'
p2036
(g2036
S's'
p2037
tp2038
S' use subsetting'
p2039
I0
I0
I01
Ntp2040
a(S'bool'
p2041
S'batch'
p2042
(g2042
S'b'
p2043
tp2044
S' batch'
p2045
I0
I0
I01
Ntp2046
a(S'bool'
p2047
S'probThresh'
p2048
(g2048
S'p'
p2049
tp2050
S' probability threshold'
p2051
I0
I0
I01
Ntp2052
a(S'int'
p2053
S'minObjs'
p2054
(g2054
g1126
tp2055
S' minimal number of objects (examples) in leaves'
p2056
I0
I0
I01
Ntp2057
a(S'int'
p2058
S'window'
p2059
(g2059
S'w'
p2060
tp2061
S' window'
p2062
I0
I0
I01
Ntp2063
a(S'int'
p2064
S'increment'
p2065
(g2065
S'i'
p2066
tp2067
S' increment'
p2068
I0
I0
I01
Ntp2069
a(S'float'
p2070
S'cf'
p2071
(g2071
S'c'
p2072
tp2073
S' cf'
p2074
I0
I0
I01
Ntp2075
a(S'int'
p2076
S'trials'
p2077
(g2077
S't'
p2078
tp2079
S' trials'
p2080
I0
I0
I01
Ntp2081
a(S'bool'
p2082
S'prune'
p2083
g2083
S'return pruned tree'
p2084
I0
I0
I01
Ntp2085
a(S'bool'
p2086
S'convertToOrange'
p2087
g2087
S'return TreeClassifier instead of C45TreeClassifier'
p2088
I0
I0
I01
Ntp2089
a(S'bool'
p2090
S'storeExamples'
p2091
g2091
S'stores examples when (if) converting to TreeClassifier'
p2092
I0
I0
I01
Ntp2093
a(S'bool'
p2094
S'storeContingencies'
p2095
g2095
S'stores contingencies when (if) converting to TreeClassifier'
p2096
I0
I0
I01
Ntp2097
ag102
asg26
(dp2098
sbsS'TAttributedBoolList'
p2099
(ipyprops
ClassDefinition
p2100
(dp2101
g4
I0
sg5
I01
sg6
g2099
sg7
S'TBoolList'
p2102
sg9
I0
sg10
(lp2103
sg12
(lp2104
sg26
(dp2105
sbsS'TFeatureByMinComplexity'
p2106
(i__main__
ClassDefinition
p2107
(dp2108
g4
I1
sg5
I01
sg6
g2106
sg7
S'TFeatureInducer'
p2109
sg9
I00
sg10
(lp2110
sg12
(lp2111
(S'TColorIG'
p2112
S'colorIG'
p2113
g2113
S'graph coloring algorithm'
p2114
I0
I0
I00
Ntp2115
a(S'int'
p2116
S'completion'
p2117
g2117
S' decides how to determine the class for points not covered by any cluster'
p2118
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2119
tp2120
asg26
(dp2121
S'Completion'
p2122
(lp2123
(S'NoCompletion'
p2124
S'completion_no'
p2125
tp2126
a(S'CompletionByDefault'
p2127
S'completion_default'
p2128
tp2129
a(S'CompletionByBayes'
p2130
S'completion_bayes'
p2131
tp2132
assbsS'TPreprocessor_dropMissingClasses'
p2133
(i__main__
ClassDefinition
p2134
(dp2135
g4
I1
sg5
I01
sg6
g2133
sg7
S'TPreprocessor'
p2136
sg9
I00
sg10
(lp2137
sg12
(lp2138
sg26
(dp2139
sbsS'TkNNClassifier'
p2140
(i__main__
ClassDefinition
p2141
(dp2142
g4
I1
sg5
I01
sg6
g2140
sg7
S'TClassifierFD'
p2143
sg9
I00
sg10
(lp2144
sg12
(lp2145
(S'TFindNearest'
p2146
S'findNearest'
p2147
g2147
g533
I0
I0
I00
Ntp2148
a(S'float'
p2149
g1122
g1122
S'number of neighbours (0 for sqrt of #examples)'
p2150
I0
I0
I01
Ntp2151
a(S'bool'
p2152
S'rankWeight'
p2153
g2153
S'enable weighting by ranks'
p2154
I0
I0
I01
Ntp2155
a(S'int'
p2156
S'weightID'
p2157
g2157
S'id of meta-attribute with weight'
p2158
I0
I0
I01
Ntp2159
a(S'int'
p2160
S'nExamples'
p2161
g2161
S'the number of learning examples '
p2162
I0
I0
I01
Ntp2163
ag255
ag87
ag91
asg26
(dp2164
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2165
(i__main__
ClassDefinition
p2166
(dp2167
g4
I1
sg5
I01
sg6
g2165
sg7
S'TRuleBeamCandidateSelector'
p2168
sg9
I00
sg10
(lp2169
sg12
(lp2170
sg26
(dp2171
sbsS'TExamplesDistanceConstructor_Relief'
p2172
(i__main__
ClassDefinition
p2173
(dp2174
g4
I1
sg5
I01
sg6
g2172
sg7
S'TExamplesDistanceConstructor'
p2175
sg9
I00
sg10
(lp2176
sg12
(lp2177
g1269
asg26
(dp2178
sbsS'TOrange'
p2179
(i__main__
ClassDefinition
p2180
(dp2181
g4
I1
sg5
I01
sg6
g2179
sg7
Nsg9
I00
sg10
(lp2182
sg12
(lp2183
sg26
(dp2184
sbsS'TRuleValidator'
p2185
(i__main__
ClassDefinition
p2186
(dp2187
g4
I1
sg5
I01
sg6
g2185
sg7
S'TOrange'
p2188
sg9
I01
sg10
(lp2189
sg12
(lp2190
sg26
(dp2191
sbsS'TColorIG'
p2192
(i__main__
ClassDefinition
p2193
(dp2194
g4
I1
sg5
I01
sg6
g2192
sg7
S'TOrange'
p2195
sg9
I01
sg10
(lp2196
sg12
(lp2197
sg26
(dp2198
sbsS'TRuleValidator_Python'
p2199
(i__main__
ClassDefinition
p2200
(dp2201
g4
I1
sg5
I01
sg6
g2199
sg7
S'TRuleValidator'
p2202
sg9
I00
sg10
(lp2203
sg12
(lp2204
sg26
(dp2205
sbsS'TSubsetsGenerator_constSize_iterator'
p2206
(i__main__
ClassDefinition
p2207
(dp2208
g4
I1
sg5
I01
sg6
g2206
sg7
S'TSubsetsGenerator_iterator'
p2209
sg9
I00
sg10
(lp2210
sg12
(lp2211
(S'bool'
p2212
S'moreToCome'
p2213
g2213
g533
I01
I0
I01
Ntp2214
ag457
asg26
(dp2215
sbsS'TIMByRowsBySorting'
p2216
(i__main__
ClassDefinition
p2217
(dp2218
g4
I1
sg5
I01
sg6
g2216
sg7
S'TIMByRowsConstructor'
p2219
sg9
I00
sg10
(lp2220
sg12
(lp2221
sg26
(dp2222
sbsS'TAssociationLearner'
p2223
(i__main__
ClassDefinition
p2224
(dp2225
g4
I1
sg5
I01
sg6
g2223
sg7
S'TLearner'
p2226
sg9
I00
sg10
(lp2227
sg12
(lp2228
(S'float'
p2229
S'confidence'
p2230
g2230
S'required confidence'
p2231
I0
I0
I01
Ntp2232
a(S'float'
p2233
S'support'
p2234
g2234
S'required support'
p2235
I0
I0
I01
Ntp2236
a(S'int'
p2237
S'voteWeight'
p2238
g2238
S'vote weight (s=support, c=confidence, p=product)'
p2239
I0
I0
I01
Ntp2240
a(S'int'
p2241
S'maxItemSets'
p2242
g2242
S'maximal number of itemsets (increase if you want)'
p2243
I0
I0
I01
Ntp2244
ag102
asg26
(dp2245
sbsS'TRuleBeamInitializer_Python'
p2246
(i__main__
ClassDefinition
p2247
(dp2248
g4
I1
sg5
I01
sg6
g2246
sg7
S'TRuleBeamInitializer'
p2249
sg9
I00
sg10
(lp2250
sg12
(lp2251
sg26
(dp2252
sbsS'TDistributionAssessor'
p2253
(i__main__
ClassDefinition
p2254
(dp2255
g4
I1
sg5
I01
sg6
g2253
sg7
S'TOrange'
p2256
sg9
I01
sg10
(lp2257
sg12
(lp2258
sg26
(dp2259
sbsS'TRuleCovererAndRemover_Python'
p2260
(i__main__
ClassDefinition
p2261
(dp2262
g4
I1
sg5
I01
sg6
g2260
sg7
S'TRuleCovererAndRemover'
p2263
sg9
I00
sg10
(lp2264
sg12
(lp2265
sg26
(dp2266
sbsS'TMeasureAttribute_gainRatioA'
p2267
(i__main__
ClassDefinition
p2268
(dp2269
g4
I1
sg5
I01
sg6
g2267
sg7
S'TMeasureAttribute_gainRatio'
p2270
sg9
I00
sg10
(lp2271
sg12
(lp2272
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp2273
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2274
(i__main__
ClassDefinition
p2275
(dp2276
g4
I1
sg5
I01
sg6
g2274
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2277
sg9
I00
sg10
(lp2278
sg12
(lp2279
(S'TProbabilityEstimatorConstructor'
p2280
S'estimatorConstructor'
p2281
g2281
S'ProbabilityEstimator to be used '
p2282
I0
I0
I00
Ntp2283
asg26
(dp2284
sbsS'TCartesianClassifier'
p2285
(i__main__
ClassDefinition
p2286
(dp2287
g4
I1
sg5
I01
sg6
g2285
sg7
S'TClassifierFD'
p2288
sg9
I00
sg10
(lp2289
sg12
(lp2290
g255
ag87
ag91
asg26
(dp2291
sbsS'TLinearClassifier'
p2292
(i__main__
ClassDefinition
p2293
(dp2294
g4
I1
sg5
I01
sg6
g2292
sg7
S'TClassifierFD'
p2295
sg9
I00
sg10
(lp2296
sg12
(lp2297
(S'TFloatListList'
p2298
S'weights'
p2299
g2299
S'Computed feature weights'
p2300
I0
I0
I00
Ntp2301
a(S'TExampleTable'
p2302
S'examples'
p2303
g2303
S'Examples used to train the classifier'
p2304
I0
I0
I00
Ntp2305
ag255
ag87
ag91
asg26
(dp2306
sbsS'TTreeDescender_UnknownToBranch'
p2307
(i__main__
ClassDefinition
p2308
(dp2309
g4
I1
sg5
I01
sg6
g2307
sg7
g1432
sg9
I0
sg10
(lp2310
sg12
(lp2311
sg26
(dp2312
sbsS'TSubsetsGenerator_constSize'
p2313
(i__main__
ClassDefinition
p2314
(dp2315
g4
I1
sg5
I01
sg6
g2313
sg7
S'TSubsetsGenerator'
p2316
sg9
I00
sg10
(lp2317
sg12
(lp2318
(S'int'
p2319
S'B'
p2320
g2320
S'subset size'
p2321
I0
I0
I01
Ntp2322
ag186
asg26
(dp2323
sbsS'TColorIG_MCF'
p2324
(i__main__
ClassDefinition
p2325
(dp2326
g4
I1
sg5
I01
sg6
g2324
sg7
S'TColorIG'
p2327
sg9
I00
sg10
(lp2328
sg12
(lp2329
sg26
(dp2330
sbsS'TBasicAttrStat'
p2331
(i__main__
ClassDefinition
p2332
(dp2333
g4
I1
sg5
I01
sg6
g2331
sg7
S'TOrange'
p2334
sg9
I00
sg10
(lp2335
sg12
(lp2336
(S'float'
p2337
S'sum'
p2338
g2338
S'sum of values'
p2339
I0
I0
I01
Ntp2340
a(S'float'
p2341
S'sum2'
p2342
g2342
S'sum of squares of values'
p2343
I0
I0
I01
Ntp2344
a(S'float'
p2345
S'n'
p2346
g2346
S'number of examples for which the attribute is defined'
p2347
I0
I0
I01
Ntp2348
a(S'float'
p2349
S'min'
p2350
g2350
S'the lowest value of the attribute'
p2351
I0
I0
I01
Ntp2352
a(S'float'
p2353
S'max'
p2354
g2354
S'the highest value of the attribute'
p2355
I0
I0
I01
Ntp2356
a(S'float'
p2357
S'avg'
p2358
g2358
S'the average value of the attribute'
p2359
I0
I0
I01
Ntp2360
a(S'float'
p2361
S'dev'
p2362
g2362
S'the deviation of the value of the attribute'
p2363
I0
I0
I01
Ntp2364
a(S'TVariable'
p2365
S'variable'
p2366
g2366
S'the attribute to which the data applies'
p2367
I0
I0
I00
Ntp2368
a(S'bool'
p2369
S'holdRecomputation'
p2370
g2370
S'temporarily disables recomputation of avg and dev while adding values'
p2371
I0
I0
I01
Ntp2372
asg26
(dp2373
sbsS'TTreeSplitConstructor_Attribute'
p2374
(i__main__
ClassDefinition
p2375
(dp2376
g4
I1
sg5
I01
sg6
g2374
sg7
S'TTreeSplitConstructor_Measure'
p2377
sg9
I00
sg10
(lp2378
sg12
(lp2379
g1207
ag1211
ag708
asg26
(dp2380
sbsS'TRemoveRedundantByInduction'
p2381
(i__main__
ClassDefinition
p2382
(dp2383
g4
I1
sg5
I01
sg6
g2381
sg7
S'TRemoveRedundant'
p2384
sg9
I00
sg10
(lp2385
sg12
(lp2386
(S'TFeatureInducer'
p2387
S'featureReducer'
p2388
g2388
S'feature construction algorithm'
p2389
I0
I0
I00
Ntp2390
a(S'TMeasureAttribute'
p2391
S'measure'
p2392
g2392
S'measure for initial ordering of attributes'
p2393
I0
I0
I00
Ntp2394
a(S'TDiscretization'
p2395
S'discretization'
p2396
g2396
S'discretization method'
p2397
I0
I0
I00
Ntp2398
ag1250
asg26
(dp2399
sbsS'TFilter_conjunction'
p2400
(i__main__
ClassDefinition
p2401
(dp2402
g4
I1
sg5
I01
sg6
g2400
sg7
S'TFilter'
p2403
sg9
I00
sg10
(lp2404
sg12
(lp2405
(S'TFilterList'
p2406
S'filters'
p2407
g2407
S'a list of filters;'
p2408
I0
I0
I00
Ntp2409
ag620
ag624
asg26
(dp2410
sbsS'TExampleForMissing'
p2411
(i__main__
ClassDefinition
p2412
(dp2413
g4
I1
sg5
I01
sg6
g2411
sg7
S'TExample'
p2414
sg9
I00
sg10
(lp2415
sg12
(lp2416
(S'TEFMDataDescription'
p2417
S'dataDescription'
p2418
g2418
S'data description'
p2419
I0
I0
I00
Ntp2420
a(S'TDomain'
p2421
S'domain'
p2422
g2422
S"Example's domain"
p2423
I01
I0
I00
Ntp2424
a(S'int'
p2425
S'id'
p2426
g2426
g533
I0
I0
I01
Ntp2427
asg26
(dp2428
sbsS'TRuleBeamFilter'
p2429
(i__main__
ClassDefinition
p2430
(dp2431
g4
I1
sg5
I01
sg6
g2429
sg7
S'TOrange'
p2432
sg9
I01
sg10
(lp2433
sg12
(lp2434
sg26
(dp2435
sbsS'TBayesClassifier'
p2436
(i__main__
ClassDefinition
p2437
(dp2438
g4
I1
sg5
I01
sg6
g2436
sg7
S'TClassifierFD'
p2439
sg9
I00
sg10
(lp2440
sg12
(lp2441
(S'TDistribution'
p2442
S'distribution'
p2443
g2443
S'class distributions (P(C))'
p2444
I0
I0
I00
Ntp2445
a(S'TDomainContingency'
p2446
S'conditionalDistributions'
p2447
g2447
S'conditional distributions, P(C|A)'
p2448
I0
I0
I00
Ntp2449
a(S'TProbabilityEstimator'
p2450
S'estimator'
p2451
g2451
S'a probability estimator for P(C)'
p2452
I0
I0
I00
Ntp2453
a(S'TConditionalProbabilityEstimatorList'
p2454
S'conditionalEstimators'
p2455
g2455
S'a probability estimator for P(C|A)'
p2456
I0
I0
I00
Ntp2457
a(S'bool'
p2458
S'normalizePredictions'
p2459
g2459
S'if true, classifier will normalize predictions'
p2460
I0
I0
I01
Ntp2461
a(S'float'
p2462
S'threshold'
p2463
g2463
S'threshold probability for class 1 (for binary classes only)'
p2464
I0
I0
I01
Ntp2465
ag255
ag87
ag91
asg26
(dp2466
sbsS'TFilter_sameValue'
p2467
(i__main__
ClassDefinition
p2468
(dp2469
g4
I1
sg5
I01
sg6
g2467
sg7
S'TFilter'
p2470
sg9
I00
sg10
(lp2471
sg12
(lp2472
(S'int'
p2473
S'position'
p2474
g2474
S'position of the observed attribute'
p2475
I0
I0
I01
Ntp2476
a(S'TValue'
p2477
S'value'
p2478
g2478
S'value that the selected examples should have'
p2479
I0
I0
I01
Ntp2480
ag620
ag624
asg26
(dp2481
sbsS'TGraph'
p2482
(i__main__
ClassDefinition
p2483
(dp2484
g4
I1
sg5
I01
sg6
g2482
sg7
S'TOrange'
p2485
sg9
I01
sg10
(lp2486
sg12
(lp2487
g1381
ag1385
ag1389
asg26
(dp2488
sbsS'TPreprocessor_addClassWeight'
p2489
(i__main__
ClassDefinition
p2490
(dp2491
g4
I1
sg5
I01
sg6
g2489
sg7
S'TPreprocessor'
p2492
sg9
I00
sg10
(lp2493
sg12
(lp2494
(S'TFloatList'
p2495
S'classWeights'
p2496
g2496
S'weights of examples of particular classes'
p2497
I0
I0
I00
Ntp2498
a(S'bool'
p2499
S'equalize'
p2500
g2500
S'reweight examples to equalize class proportions'
p2501
I0
I0
I01
Ntp2502
a(S'TRandomGenerator'
p2503
S'randomGenerator'
p2504
g2504
S'random number generator'
p2505
I0
I0
I00
Ntp2506
asg26
(dp2507
sbsS'THierarchicalClusterList'
p2508
(ipyprops
ClassDefinition
p2509
(dp2510
g4
I0
sg5
I01
sg6
g2508
sg7
g126
sg9
I0
sg10
(lp2511
sg12
(lp2512
sg26
(dp2513
sbsS'TStopIMClusteringByAssessor'
p2514
(i__main__
ClassDefinition
p2515
(dp2516
g4
I1
sg5
I01
sg6
g2514
sg7
S'TOrange'
p2517
sg9
I01
sg10
(lp2518
sg12
(lp2519
sg26
(dp2520
sbsS'TValueFilter_continuous'
p2521
(i__main__
ClassDefinition
p2522
(dp2523
g4
I1
sg5
I01
sg6
g2521
sg7
S'TValueFilter'
p2524
sg9
I00
sg10
(lp2525
sg12
(lp2526
(S'float'
p2527
S'min'
p2528
(g2528
S'ref'
p2529
tp2530
S' reference value (lower bound for interval operators)'
p2531
I0
I0
I01
Ntp2532
a(S'float'
p2533
S'max'
p2534
g2534
S'upper bound for interval operators'
p2535
I0
I0
I01
Ntp2536
a(S'bool'
p2537
S'outside'
p2538
g2538
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2539
I0
I0
I01
Ntp2540
a(S'int'
p2541
S'oper'
p2542
g2542
S' operator'
p2543
I0
I0
I01
S'ValueFilter_Operator'
p2544
tp2545
ag987
ag991
asg26
(dp2546
sbsS'TAssociationRule'
p2547
(i__main__
ClassDefinition
p2548
(dp2549
g4
I1
sg5
I01
sg6
g2547
sg7
S'TOrange'
p2550
sg9
I00
sg10
(lp2551
sg12
(lp2552
(S'TExample'
p2553
S'left'
p2554
g2554
S'left side of the rule'
p2555
I01
I0
I00
Ntp2556
a(S'TExample'
p2557
S'right'
p2558
g2558
S'right side of the rule'
p2559
I01
I0
I00
Ntp2560
a(S'float'
p2561
S'support'
p2562
g2562
S'support for the rule'
p2563
I0
I0
I01
Ntp2564
a(S'float'
p2565
S'confidence'
p2566
g2566
S'confidence of the rule'
p2567
I0
I0
I01
Ntp2568
a(S'float'
p2569
S'coverage'
p2570
g2570
S"rule's coverage"
p2571
I0
I0
I01
Ntp2572
a(S'float'
p2573
S'strength'
p2574
g2574
S"rule's strength"
p2575
I0
I0
I01
Ntp2576
a(S'float'
p2577
S'lift'
p2578
g2578
S"rule's lift"
p2579
I0
I0
I01
Ntp2580
a(S'float'
p2581
S'leverage'
p2582
g2582
S"rule's leverage"
p2583
I0
I0
I01
Ntp2584
a(S'float'
p2585
S'nAppliesLeft'
p2586
g2586
S"number of examples covered by the rule's left side"
p2587
I0
I0
I01
Ntp2588
a(S'float'
p2589
S'nAppliesRight'
p2590
g2590
S"number of examples covered by the rule's right side"
p2591
I0
I0
I01
Ntp2592
a(S'float'
p2593
S'nAppliesBoth'
p2594
g2594
S'number of examples covered by the rule'
p2595
I0
I0
I01
Ntp2596
a(S'float'
p2597
S'nExamples'
p2598
g2598
S'number of learning examples'
p2599
I0
I0
I01
Ntp2600
a(S'int'
p2601
S'nLeft'
p2602
g2602
S"number of items on the rule's left side"
p2603
I01
I0
I01
Ntp2604
a(S'int'
p2605
S'nRight'
p2606
g2606
S"number of items on the rule's right side"
p2607
I01
I0
I01
Ntp2608
a(S'TExampleTable'
p2609
S'examples'
p2610
g2610
S'examples which the rule was built from'
p2611
I01
I0
I00
Ntp2612
a(S'TIntList'
p2613
S'matchLeft'
p2614
g2614
S'indices of examples that match the left side of the rule'
p2615
I01
I0
I00
Ntp2616
a(S'TIntList'
p2617
S'matchBoth'
p2618
g2618
S'indices to examples that match both sides of the rule'
p2619
I01
I0
I00
Ntp2620
asg26
(dp2621
sbsS'TValueFilter'
p2622
(i__main__
ClassDefinition
p2623
(dp2624
g4
I1
sg5
I01
sg6
g2622
sg7
S'TOrange'
p2625
sg9
I01
sg10
(lp2626
sg12
(lp2627
g987
ag991
asg26
(dp2628
S'Operator'
p2629
(lp2630
(S'None'
p2631
I0
tp2632
a(S'Equal'
p2633
I1
tp2634
a(S'NotEqual'
p2635
I2
tp2636
a(S'Less'
p2637
I3
tp2638
a(S'LessEqual'
p2639
I4
tp2640
a(S'Greater'
p2641
I5
tp2642
a(S'GreaterEqual'
p2643
I6
tp2644
a(S'Between'
p2645
I7
tp2646
a(S'Outside'
p2647
I8
tp2648
a(S'Contains'
p2649
I9
tp2650
a(S'NotContains'
p2651
I10
tp2652
a(S'BeginsWith'
p2653
I11
tp2654
a(S'EndsWith'
p2655
I12
tp2656
a(S'Listed'
p2657
I13
tp2658
assbsS'TClustersFromDistributions'
p2659
(i__main__
ClassDefinition
p2660
(dp2661
g4
I1
sg5
I01
sg6
g2659
sg7
S'TOrange'
p2662
sg9
I01
sg10
(lp2663
sg12
(lp2664
sg26
(dp2665
sbsS'TVariable'
p2666
(i__main__
ClassDefinition
p2667
(dp2668
g4
I1
sg5
I01
sg6
g2666
sg7
S'TOrange'
p2669
sg9
I01
sg10
(lp2670
sg12
(lp2671
g293
ag298
ag302
ag306
ag310
ag314
ag318
ag322
asg26
(dp2672
S'Type'
p2673
(lp2674
(S'None'
p2675
S'(int)TValue::NONE'
p2676
tp2677
a(S'Discrete'
p2678
S'(int)TValue::INTVAR'
p2679
tp2680
a(S'Continuous'
p2681
S'(int)TValue::FLOATVAR'
p2682
tp2683
a(S'Other'
p2684
S'(int)(TValue::FLOATVAR+1)'
p2685
tp2686
a(S'String'
p2687
S'(int)STRINGVAR'
p2688
tp2689
asS'MakeStatus'
p2690
(lp2691
(S'OK'
p2692
I0
tp2693
a(S'MissingValues'
p2694
I1
tp2695
a(S'NoRecognizedValues'
p2696
I2
tp2697
a(S'Incompatible'
p2698
I3
tp2699
a(S'NotFound'
p2700
I4
tp2701
assbsS'TNoiseValuesGenerator'
p2702
(i__main__
ClassDefinition
p2703
(dp2704
g4
I1
sg5
I01
sg6
g2702
sg7
S'TChangeExampleGenerator'
p2705
sg9
I00
sg10
(lp2706
sg12
(lp2707
(S'TIntFloatList'
p2708
S'replaceProbabilities'
p2709
g2709
S"probabilities for replacing attributes' values"
p2710
I0
I0
I00
Ntp2711
a(S'TRandomGenerator'
p2712
S'randomGenerator'
p2713
g2713
S'random generator'
p2714
I0
I0
I00
Ntp2715
ag270
ag274
asg26
(dp2716
sbsS'TC45TreeNodeList'
p2717
(ipyprops
ClassDefinition
p2718
(dp2719
g4
I0
sg5
I01
sg6
g2717
sg7
g126
sg9
I0
sg10
(lp2720
sg12
(lp2721
sg26
(dp2722
sbsS'TTreeExampleSplitter_UnknownsToAll'
p2723
(i__main__
ClassDefinition
p2724
(dp2725
g4
I1
sg5
I01
sg6
g2723
sg7
S'TTreeExampleSplitter'
p2726
sg9
I00
sg10
(lp2727
sg12
(lp2728
sg26
(dp2729
sbsS'TEquiNDiscretization'
p2730
(i__main__
ClassDefinition
p2731
(dp2732
g4
I1
sg5
I01
sg6
g2730
sg7
S'TDiscretization'
p2733
sg9
I00
sg10
(lp2734
sg12
(lp2735
(S'int'
p2736
S'numberOfIntervals'
p2737
g2737
S'number of intervals'
p2738
I0
I0
I01
Ntp2739
a(S'bool'
p2740
S'recursiveDivision'
p2741
g2741
S'find cut-off points by recursive division (default = true)'
p2742
I0
I0
I01
Ntp2743
asg26
(dp2744
sbsS'TImputerConstructor_average'
p2745
(i__main__
ClassDefinition
p2746
(dp2747
g4
I1
sg5
I01
sg6
g2745
sg7
S'TImputerConstructor'
p2748
sg9
I00
sg10
(lp2749
sg12
(lp2750
g146
asg26
(dp2751
sbsS'TDomainBasicAttrStat'
p2752
(ipyprops
ClassDefinition
p2753
(dp2754
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p2755
sg7
g126
sg9
I0
sg10
(lp2756
sg12
(lp2757
sg26
(dp2758
sbsS'TRuleCovererAndRemover'
p2759
(i__main__
ClassDefinition
p2760
(dp2761
g4
I1
sg5
I01
sg6
g2759
sg7
S'TOrange'
p2762
sg9
I01
sg10
(lp2763
sg12
(lp2764
sg26
(dp2765
sbsS'TImputerConstructor_random'
p2766
(i__main__
ClassDefinition
p2767
(dp2768
g4
I1
sg5
I01
sg6
g2766
sg7
S'TImputerConstructor'
p2769
sg9
I00
sg10
(lp2770
sg12
(lp2771
(S'bool'
p2772
S'deterministic'
p2773
g2773
S"tells whether to initialize random by example's CRC (default: false)"
p2774
I0
I0
I01
Ntp2775
ag146
asg26
(dp2776
sbsS'TCostWrapperClassifier'
p2777
(i__main__
ClassDefinition
p2778
(dp2779
g4
I1
sg5
I01
sg6
g2777
sg7
S'TClassifier'
p2780
sg9
I00
sg10
(lp2781
sg12
(lp2782
(S'TClassifier'
p2783
S'classifier'
p2784
g2784
S'basic classifier'
p2785
I0
I0
I00
Ntp2786
a(S'TCostMatrix'
p2787
S'costMatrix'
p2788
g2788
S'cost matrix'
p2789
I0
I0
I00
Ntp2790
ag87
ag91
asg26
(dp2791
sbsS'TPreprocessor_ignore'
p2792
(i__main__
ClassDefinition
p2793
(dp2794
g4
I1
sg5
I01
sg6
g2792
sg7
S'TPreprocessor'
p2795
sg9
I00
sg10
(lp2796
sg12
(lp2797
(S'TVarList'
p2798
S'attributes'
p2799
g2799
S'tells which attributes to remove'
p2800
I0
I0
I00
Ntp2801
asg26
(dp2802
sbsS'TEVDist'
p2803
(i__main__
ClassDefinition
p2804
(dp2805
g4
I1
sg5
I01
sg6
g2803
sg7
S'TOrange'
p2806
sg9
I00
sg10
(lp2807
sg12
(lp2808
(S'float'
p2809
S'mu'
p2810
g2810
S'mu of Fisher-Tippett distribution'
p2811
I0
I0
I01
Ntp2812
a(S'float'
p2813
S'beta'
p2814
g2814
S'beta of Fisher-Tippett distribution'
p2815
I0
I0
I01
Ntp2816
a(S'TFloatList'
p2817
S'percentiles'
p2818
g2818
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p2819
I0
I0
I00
Ntp2820
a(S'float'
p2821
S'maxPercentile'
p2822
g2822
S'maxPercentile Value, default 0.95'
p2823
I0
I0
I01
Ntp2824
a(S'float'
p2825
S'step'
p2826
g2826
S'step of percentiles, default 0.1'
p2827
I0
I0
I01
Ntp2828
asg26
(dp2829
sbsS'TMeasureAttribute_Python'
p2830
(i__main__
ClassDefinition
p2831
(dp2832
g4
I1
sg5
I01
sg6
g2830
sg7
S'TMeasureAttribute'
p2833
sg9
I00
sg10
(lp2834
sg12
(lp2835
g847
ag851
ag855
ag859
asg26
(dp2836
sbsS'TPreprocessor_take'
p2837
(i__main__
ClassDefinition
p2838
(dp2839
g4
I1
sg5
I01
sg6
g2837
sg7
S'TPreprocessor'
p2840
sg9
I00
sg10
(lp2841
sg12
(lp2842
(S'TVariableFilterMap'
p2843
S'values'
p2844
g2844
S'variable-filter pairs'
p2845
I0
I0
I00
Ntp2846
a(S'bool'
p2847
S'conjunction'
p2848
g2848
S'decides whether to take conjunction or disjunction of values'
p2849
I0
I0
I01
Ntp2850
asg26
(dp2851
sbsS'TDistributionAssessor_m'
p2852
(i__main__
ClassDefinition
p2853
(dp2854
g4
I1
sg5
I01
sg6
g2852
sg7
S'TDistributionAssessor'
p2855
sg9
I00
sg10
(lp2856
sg12
(lp2857
(S'float'
p2858
g1126
g1126
S'm for m-estimate'
p2859
I0
I0
I01
Ntp2860
asg26
(dp2861
sbsS'TThresholdDiscretizer'
p2862
(i__main__
ClassDefinition
p2863
(dp2864
g4
I1
sg5
I01
sg6
g2862
sg7
S'TDiscretizer'
p2865
sg9
I00
sg10
(lp2866
sg12
(lp2867
(S'float'
p2868
S'threshold'
p2869
g2869
S'threshold'
p2870
I0
I0
I01
Ntp2871
ag729
asg26
(dp2872
sbsS'TExampleTable'
p2873
(i__main__
ClassDefinition
p2874
(dp2875
g4
I1
sg5
I01
sg6
g2873
sg7
S'TExampleGenerator'
p2876
sg9
I00
sg10
(lp2877
sg12
(lp2878
(S'TRandomGenerator'
p2879
S'randomGenerator'
p2880
g2880
S'random generator used by randomExample'
p2881
I0
I0
I00
Ntp2882
a(S'TExampleGenerator'
p2883
S'lock'
p2884
g2884
S'the real owner of examples'
p2885
I01
I0
I00
Ntp2886
a(S'bool'
p2887
S'ownsExamples'
p2888
g2888
S'if false, examples in this table are references to examples in another table'
p2889
I01
I0
I01
Ntp2890
ag270
ag274
asg26
(dp2891
sbsS'TEVDistGetter'
p2892
(i__main__
ClassDefinition
p2893
(dp2894
g4
I1
sg5
I01
sg6
g2892
sg7
S'TOrange'
p2895
sg9
I01
sg10
(lp2896
sg12
(lp2897
sg26
(dp2898
sbsS'TTreeSplitConstructor_Threshold'
p2899
(i__main__
ClassDefinition
p2900
(dp2901
g4
I1
sg5
I01
sg6
g2899
sg7
S'TTreeSplitConstructor_Measure'
p2902
sg9
I00
sg10
(lp2903
sg12
(lp2904
g1207
ag1211
ag708
asg26
(dp2905
sbsS'TStopDistributionClustering_n'
p2906
(i__main__
ClassDefinition
p2907
(dp2908
g4
I1
sg5
I01
sg6
g2906
sg7
S'TStopDistributionClustering'
p2909
sg9
I00
sg10
(lp2910
sg12
(lp2911
(S'int'
p2912
g2346
g2346
S'number of clusters'
p2913
I0
I0
I01
Ntp2914
asg26
(dp2915
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p2916
(i__main__
ClassDefinition
p2917
(dp2918
g4
I1
sg5
I01
sg6
g2916
sg7
S'TTreeExampleSplitter'
p2919
sg9
I00
sg10
(lp2920
sg12
(lp2921
sg26
(dp2922
sbsS'TClassifier_Python'
p2923
(i__main__
ClassDefinition
p2924
(dp2925
g4
I1
sg5
I01
sg6
g2923
sg7
S'TClassifier'
p2926
sg9
I00
sg10
(lp2927
sg12
(lp2928
g87
ag91
asg26
(dp2929
sbsS'TFilter_isDefined'
p2930
(i__main__
ClassDefinition
p2931
(dp2932
g4
I1
sg5
I01
sg6
g2930
sg7
S'TFilter'
p2933
sg9
I00
sg10
(lp2934
sg12
(lp2935
(S'TAttributedBoolList'
p2936
S'check'
p2937
g2937
S'tells which attributes to check; checks all if the list is empty'
p2938
I0
I0
I00
Ntp2939
ag620
ag624
asg26
(dp2940
sbsS'TRemoveRedundantByQuality'
p2941
(i__main__
ClassDefinition
p2942
(dp2943
g4
I1
sg5
I01
sg6
g2941
sg7
S'TRemoveRedundant'
p2944
sg9
I00
sg10
(lp2945
sg12
(lp2946
(S'bool'
p2947
S'remeasure'
p2948
g2948
S'reapply the measure after removal'
p2949
I0
I0
I01
Ntp2950
a(S'float'
p2951
S'minQuality'
p2952
g2952
S'minimal acceptable quality'
p2953
I0
I0
I01
Ntp2954
a(S'int'
p2955
S'removeBut'
p2956
g2956
S'the desired number of attributes'
p2957
I0
I0
I01
Ntp2958
a(S'TMeasureAttribute'
p2959
S'measure'
p2960
g2960
S'attribute quality measure'
p2961
I0
I0
I00
Ntp2962
ag1250
asg26
(dp2963
sbsS'TGraphAsList'
p2964
(i__main__
ClassDefinition
p2965
(dp2966
g4
I1
sg5
I01
sg6
g2964
sg7
S'TGraph'
p2967
sg9
I00
sg10
(lp2968
sg12
(lp2969
g1381
ag1385
ag1389
asg26
(dp2970
sbsS'TProbabilityEstimatorConstructor_m'
p2971
(i__main__
ClassDefinition
p2972
(dp2973
g4
I1
sg5
I01
sg6
g2971
sg7
S'TProbabilityEstimatorConstructor'
p2974
sg9
I00
sg10
(lp2975
sg12
(lp2976
(S'float'
p2977
g1126
g1126
S'parameter m for m-estimation'
p2978
I0
I0
I01
Ntp2979
a(S'bool'
p2980
S'renormalize'
p2981
g2981
S'computes the estimate on the original (not the normalized) distribution'
p2982
I0
I0
I01
Ntp2983
asg26
(dp2984
sbsS'TDistanceMap'
p2985
(i__main__
ClassDefinition
p2986
(dp2987
g4
I1
sg5
I01
sg6
g2985
sg7
S'TOrange'
p2988
sg9
I00
sg10
(lp2989
sg12
(lp2990
(S'int'
p2991
S'dim'
p2992
g2992
S'bitmap dimension (in cells)'
p2993
I01
I0
I01
Ntp2994
a(S'int'
p2995
S'matrixType'
p2996
g2996
S'0 lower, 1 upper, 2 symmetric'
p2997
I0
I0
I01
Ntp2998
a(S'TIntList'
p2999
S'elementIndices'
p3000
g3000
S'indices to elements (one for row + one at the end)'
p3001
I01
I0
I00
Ntp3002
asg26
(dp3003
sbsS'TDistanceMapConstructor'
p3004
(i__main__
ClassDefinition
p3005
(dp3006
g4
I1
sg5
I01
sg6
g3004
sg7
S'TOrange'
p3007
sg9
I00
sg10
(lp3008
sg12
(lp3009
(S'TSymMatrix'
p3010
S'distanceMatrix'
p3011
g3011
S'distance matrix'
p3012
I0
I0
I00
Ntp3013
a(S'TIntList'
p3014
S'order'
p3015
g3015
S'order of elements'
p3016
I0
I0
I00
Ntp3017
asg26
(dp3018
sbsS'TTransformValue'
p3019
(i__main__
ClassDefinition
p3020
(dp3021
g4
I1
sg5
I01
sg6
g3019
sg7
S'TOrange'
p3022
sg9
I01
sg10
(lp3023
sg12
(lp3024
g729
asg26
(dp3025
sbsS'TComputeDomainContingency_DomainTransformation'
p3026
(i__main__
ClassDefinition
p3027
(dp3028
g4
I1
sg5
I01
sg6
g3026
sg7
S'TComputeDomainContingency'
p3029
sg9
I00
sg10
(lp3030
sg12
(lp3031
(S'TDomainTransformerConstructor'
p3032
S'domainTransformerConstructor'
p3033
g3033
S'constructs a domain in which each attribute corresponds one of originals'
p3034
I0
I0
I00
Ntp3035
a(S'bool'
p3036
S'resultInOriginalDomain'
p3037
g3037
S'tells whether the resulting DomainContingency should consist of original attributes'
p3038
I0
I0
I01
Ntp3039
ag25
asg26
(dp3040
sbsS'TStopDistributionClustering_noBigChange'
p3041
(i__main__
ClassDefinition
p3042
(dp3043
g4
I1
sg5
I01
sg6
g3041
sg7
S'TStopDistributionClustering'
p3044
sg9
I00
sg10
(lp3045
sg12
(lp3046
sg26
(dp3047
sbsS'TTreePruner'
p3048
(i__main__
ClassDefinition
p3049
(dp3050
g4
I1
sg5
I01
sg6
g3048
sg7
S'TOrange'
p3051
sg9
I01
sg10
(lp3052
sg12
(lp3053
sg26
(dp3054
sbsg1638
(ipyprops
ClassDefinition
p3055
(dp3056
g4
I0
sg5
I01
sg6
g1638
sg7
g126
sg9
I0
sg10
(lp3057
sg12
(lp3058
sg26
(dp3059
sbsS'TStringValue'
p3060
(i__main__
ClassDefinition
p3061
(dp3062
g4
I1
sg5
I01
sg6
g3060
sg7
S'TSomeValue'
p3063
sg9
I00
sg10
(lp3064
sg12
(lp3065
sg26
(dp3066
sbsS'TVarList'
p3067
(ipyprops
ClassDefinition
p3068
(dp3069
g4
I0
sg5
I01
sg6
g3067
sg7
g126
sg9
I0
sg10
(lp3070
sg12
(lp3071
sg26
(dp3072
sbsS'TRuleLearner'
p3073
(i__main__
ClassDefinition
p3074
(dp3075
g4
I1
sg5
I01
sg6
g3073
sg7
S'TLearner'
p3076
sg9
I00
sg10
(lp3077
sg12
(lp3078
(S'TRuleDataStoppingCriteria'
p3079
S'dataStopping'
p3080
g3080
g533
I0
I0
I00
Ntp3081
a(S'TRuleStoppingCriteria'
p3082
S'ruleStopping'
p3083
g3083
g533
I0
I0
I00
Ntp3084
a(S'TRuleCovererAndRemover'
p3085
S'coverAndRemove'
p3086
g3086
g533
I0
I0
I00
Ntp3087
a(S'TRuleFinder'
p3088
S'ruleFinder'
p3089
g3089
g533
I0
I0
I00
Ntp3090
a(S'TRuleClassifierConstructor'
p3091
S'classifierConstructor'
p3092
g3092
S'classifier'
p3093
I0
I0
I00
Ntp3094
a(S'TProgressCallback'
p3095
S'progressCallback'
p3096
g3096
S'progress callback function'
p3097
I0
I0
I00
Ntp3098
a(S'bool'
p3099
S'storeExamples'
p3100
g3100
g533
I0
I0
I01
Ntp3101
a(S'int'
p3102
S'targetClass'
p3103
g3103
g533
I0
I0
I01
Ntp3104
a(S'TRuleList'
p3105
S'baseRules'
p3106
g3106
g533
I0
I0
I00
Ntp3107
ag102
asg26
(dp3108
sbsS'TOrdinal2Continuous'
p3109
(i__main__
ClassDefinition
p3110
(dp3111
g4
I1
sg5
I01
sg6
g3109
sg7
S'TTransformValue'
p3112
sg9
I00
sg10
(lp3113
sg12
(lp3114
(S'float'
p3115
S'factor'
p3116
g3116
S'number of values'
p3117
I0
I0
I01
Ntp3118
ag729
asg26
(dp3119
sbsS'TLinearLearner'
p3120
(i__main__
ClassDefinition
p3121
(dp3122
g4
I1
sg5
I01
sg6
g3120
sg7
S'TLearner'
p3123
sg9
I00
sg10
(lp3124
sg12
(lp3125
(S'int'
p3126
S'solver_type'
p3127
g3127
S' Solver type (loss function)'
p3128
I0
I0
I01
S'LinearLearner_LossFunction'
p3129
tp3130
a(S'float'
p3131
S'eps'
p3132
g3132
S'Stopping criteria'
p3133
I0
I0
I01
Ntp3134
a(S'float'
p3135
S'C'
p3136
g3136
S'Regularization parameter'
p3137
I0
I0
I01
Ntp3138
ag102
asg26
(dp3139
S'LossFunction'
p3140
(lp3141
(S'L2_LR'
p3142
I0
tp3143
a(S'L2Loss_SVM_Dual'
p3144
I1
tp3145
a(S'L2Loss_SVM'
p3146
I2
tp3147
a(S'L1Loss_SVM_Dual'
p3148
I3
tp3149
assbsS'TTreeSplitConstructor_Combined'
p3150
(i__main__
ClassDefinition
p3151
(dp3152
g4
I1
sg5
I01
sg6
g3150
sg7
S'TTreeSplitConstructor'
p3153
sg9
I00
sg10
(lp3154
sg12
(lp3155
(S'TTreeSplitConstructor'
p3156
S'discreteSplitConstructor'
p3157
g3157
S'split constructor for discrete attributes'
p3158
I0
I0
I00
Ntp3159
a(S'TTreeSplitConstructor'
p3160
S'continuousSplitConstructor'
p3161
g3161
S'split constructor for continuous attributes'
p3162
I0
I0
I00
Ntp3163
ag708
asg26
(dp3164
sbsS'TTransformValue_Python'
p3165
(i__main__
ClassDefinition
p3166
(dp3167
g4
I1
sg5
I01
sg6
g3165
sg7
S'TTransformValue'
p3168
sg9
I00
sg10
(lp3169
sg12
(lp3170
g729
asg26
(dp3171
sbsS'TRuleStoppingCriteria_Python'
p3172
(i__main__
ClassDefinition
p3173
(dp3174
g4
I1
sg5
I01
sg6
g3172
sg7
S'TRuleStoppingCriteria'
p3175
sg9
I00
sg10
(lp3176
sg12
(lp3177
sg26
(dp3178
sbsS'TRuleEvaluator_Python'
p3179
(i__main__
ClassDefinition
p3180
(dp3181
g4
I1
sg5
I01
sg6
g3179
sg7
S'TRuleEvaluator'
p3182
sg9
I00
sg10
(lp3183
sg12
(lp3184
sg26
(dp3185
sbsS'TIGBySorting'
p3186
(i__main__
ClassDefinition
p3187
(dp3188
g4
I1
sg5
I01
sg6
g3186
sg7
S'TIGConstructor'
p3189
sg9
I00
sg10
(lp3190
sg12
(lp3191
sg26
(dp3192
sbsS'TConditionalProbabilityEstimator_ByRows'
p3193
(i__main__
ClassDefinition
p3194
(dp3195
g4
I1
sg5
I01
sg6
g3193
sg7
S'TConditionalProbabilityEstimator'
p3196
sg9
I00
sg10
(lp3197
sg12
(lp3198
(S'TProbabilityEstimatorList'
p3199
S'estimatorList'
p3200
g3200
S'A list of probability estimators'
p3201
I0
I0
I00
Ntp3202
ag117
ag121
asg26
(dp3203
sbsS'TFindNearest'
p3204
(i__main__
ClassDefinition
p3205
(dp3206
g4
I1
sg5
I01
sg6
g3204
sg7
S'TOrange'
p3207
sg9
I01
sg10
(lp3208
sg12
(lp3209
g1014
ag1018
asg26
(dp3210
sbsS'TProgressCallback'
p3211
(i__main__
ClassDefinition
p3212
(dp3213
g4
I1
sg5
I01
sg6
g3211
sg7
S'TOrange'
p3214
sg9
I01
sg10
(lp3215
sg12
(lp3216
sg26
(dp3217
sbsS'THierarchicalClustering'
p3218
(i__main__
ClassDefinition
p3219
(dp3220
g4
I1
sg5
I01
sg6
g3218
sg7
S'TOrange'
p3221
sg9
I00
sg10
(lp3222
sg12
(lp3223
(S'int'
p3224
S'linkage'
p3225
g3225
S' linkage'
p3226
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3227
tp3228
a(S'bool'
p3229
S'overwriteMatrix'
p3230
g3230
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3231
I0
I0
I01
Ntp3232
a(S'TProgressCallback'
p3233
S'progressCallback'
p3234
g3234
S'progress callback function'
p3235
I0
I0
I00
Ntp3236
asg26
(dp3237
S'Linkage'
p3238
(lp3239
(S'Single'
p3240
I0
tp3241
a(S'Average'
p3242
I1
tp3243
a(S'Complete'
p3244
I2
tp3245
a(S'Ward'
p3246
I3
tp3247
assbsS'TLogRegFitter_Cholesky'
p3248
(i__main__
ClassDefinition
p3249
(dp3250
g4
I1
sg5
I01
sg6
g3248
sg7
S'TLogRegFitter'
p3251
sg9
I00
sg10
(lp3252
sg12
(lp3253
sg26
(dp3254
sbsS'TClassifierFromVar'
p3255
(i__main__
ClassDefinition
p3256
(dp3257
g4
I1
sg5
I01
sg6
g3255
sg7
S'TClassifier'
p3258
sg9
I00
sg10
(lp3259
sg12
(lp3260
(S'TVariable'
p3261
S'whichVar'
p3262
(g3262
S'variable'
p3263
tp3264
S' variable'
p3265
I0
I0
I00
Ntp3266
a(S'TTransformValue'
p3267
S'transformer'
p3268
g3268
S'transformer'
p3269
I0
I0
I00
Ntp3270
a(S'TDistribution'
p3271
S'distributionForUnknown'
p3272
g3272
S'distribution for unknown value'
p3273
I0
I0
I00
Ntp3274
a(S'bool'
p3275
S'transformUnknowns'
p3276
g3276
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3277
I0
I0
I01
Ntp3278
ag87
ag91
asg26
(dp3279
sbsg2102
(ipyprops
ClassDefinition
p3280
(dp3281
g4
I0
sg5
I01
sg6
g2102
sg7
g126
sg9
I0
sg10
(lp3282
sg12
(lp3283
sg26
(dp3284
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p3285
(i__main__
ClassDefinition
p3286
(dp3287
g4
I1
sg5
I01
sg6
g3285
sg7
S'TTreeExampleSplitter'
p3288
sg9
I00
sg10
(lp3289
sg12
(lp3290
sg26
(dp3291
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3292
(i__main__
ClassDefinition
p3293
(dp3294
g4
I1
sg5
I01
sg6
g3292
sg7
S'TTreeSplitConstructor_Measure'
p3295
sg9
I00
sg10
(lp3296
sg12
(lp3297
g1207
ag1211
ag708
asg26
(dp3298
sbsS'TClassifier'
p3299
(i__main__
ClassDefinition
p3300
(dp3301
g4
I1
sg5
I01
sg6
g3299
sg7
S'TOrange'
p3302
sg9
I00
sg10
(lp3303
sg12
(lp3304
g87
ag91
asg26
(dp3305
sbsS'TTreeSplitConstructor_Python'
p3306
(i__main__
ClassDefinition
p3307
(dp3308
g4
I1
sg5
I01
sg6
g3306
sg7
S'TTreeSplitConstructor'
p3309
sg9
I00
sg10
(lp3310
sg12
(lp3311
g708
asg26
(dp3312
sbsS'TIG'
p3313
(i__main__
ClassDefinition
p3314
(dp3315
g4
I1
sg5
I01
sg6
g3313
sg7
S'TOrange'
p3316
sg9
I00
sg10
(lp3317
sg12
(lp3318
sg26
(dp3319
sbsS'TTreeClassifier'
p3320
(i__main__
ClassDefinition
p3321
(dp3322
g4
I1
sg5
I01
sg6
g3320
sg7
S'TClassifierFD'
p3323
sg9
I00
sg10
(lp3324
sg12
(lp3325
(S'TTreeNode'
p3326
S'tree'
p3327
g3327
S'decision tree'
p3328
I0
I0
I00
Ntp3329
a(S'TTreeDescender'
p3330
S'descender'
p3331
g3331
S'object that descends down the tree'
p3332
I0
I0
I00
Ntp3333
ag255
ag87
ag91
asg26
(dp3334
sbsS'TMeasureAttribute_logOddsRatio'
p3335
(i__main__
ClassDefinition
p3336
(dp3337
g4
I1
sg5
I01
sg6
g3335
sg7
S'TMeasureAttributeFromProbabilities'
p3338
sg9
I00
sg10
(lp3339
sg12
(lp3340
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp3341
sbsS'TTreeExampleSplitter_Python'
p3342
(i__main__
ClassDefinition
p3343
(dp3344
g4
I1
sg5
I01
sg6
g3342
sg7
S'TTreeExampleSplitter'
p3345
sg9
I00
sg10
(lp3346
sg12
(lp3347
sg26
(dp3348
sbsS'TKernelFunc_Python'
p3349
(i__main__
ClassDefinition
p3350
(dp3351
g4
I1
sg5
I01
sg6
g3349
sg7
S'TKernelFunc'
p3352
sg9
I00
sg10
(lp3353
sg12
(lp3354
sg26
(dp3355
sbsS'TAdapterGenerator'
p3356
(i__main__
ClassDefinition
p3357
(dp3358
g4
I1
sg5
I01
sg6
g3356
sg7
S'TExampleGenerator'
p3359
sg9
I00
sg10
(lp3360
sg12
(lp3361
g270
ag274
asg26
(dp3362
sbsS'TIMFromExamples'
p3363
(i__main__
ClassDefinition
p3364
(dp3365
g4
I1
sg5
I01
sg6
g3363
sg7
S'TOrange'
p3366
sg9
I01
sg10
(lp3367
sg12
(lp3368
sg26
(dp3369
sbsS'TFilter_random'
p3370
(i__main__
ClassDefinition
p3371
(dp3372
g4
I1
sg5
I01
sg6
g3370
sg7
S'TFilter'
p3373
sg9
I00
sg10
(lp3374
sg12
(lp3375
(S'float'
p3376
S'prob'
p3377
g3377
S'probability of selecting an example'
p3378
I0
I0
I01
Ntp3379
a(S'TRandomGenerator'
p3380
S'randomGenerator'
p3381
g3381
S'random generator'
p3382
I0
I0
I00
Ntp3383
ag620
ag624
asg26
(dp3384
sbsS'TC45ExampleGenerator'
p3385
(i__main__
ClassDefinition
p3386
(dp3387
g4
I1
sg5
I01
sg6
g3385
sg7
S'TFileExampleGenerator'
p3388
sg9
I00
sg10
(lp3389
sg12
(lp3390
(S'TBoolList'
p3391
S'skip'
p3392
g3392
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3393
I0
I0
I00
Ntp3394
ag1465
ag1469
ag1473
ag270
ag274
asg26
(dp3395
sbsS'TProbabilityEstimatorConstructor_loess'
p3396
(i__main__
ClassDefinition
p3397
(dp3398
g4
I1
sg5
I01
sg6
g3396
sg7
S'TProbabilityEstimatorConstructor'
p3399
sg9
I00
sg10
(lp3400
sg12
(lp3401
(S'float'
p3402
S'windowProportion'
p3403
g3403
S'The proportion of points in a window for LR'
p3404
I0
I0
I01
Ntp3405
a(S'int'
p3406
S'nPoints'
p3407
g3407
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3408
I0
I0
I01
Ntp3409
a(S'int'
p3410
S'distributionMethod'
p3411
g3411
S" Meaning of the 'nPoints'"
p3412
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3413
tp3414
asg26
(dp3415
S'DistributionMethod'
p3416
(lp3417
(S'Minimal'
p3418
S'DISTRIBUTE_MINIMAL'
p3419
tp3420
a(S'Factor'
p3421
S'DISTRIBUTE_FACTOR'
p3422
tp3423
a(S'Fixed'
p3424
S'DISTRIBUTE_FIXED'
p3425
tp3426
a(S'Uniform'
p3427
S'DISTRIBUTE_UNIFORM'
p3428
tp3429
a(S'Maximal'
p3430
S'DISTRIBUTE_MAXIMAL'
p3431
tp3432
assbsS'TLogRegFitter'
p3433
(i__main__
ClassDefinition
p3434
(dp3435
g4
I1
sg5
I01
sg6
g3433
sg7
S'TOrange'
p3436
sg9
I01
sg10
(lp3437
sg12
(lp3438
sg26
(dp3439
S'ErrorCode'
p3440
(lp3441
(S'OK'
p3442
I0
tp3443
a(S'Infinity'
p3444
I1
tp3445
a(S'Divergence'
p3446
I2
tp3447
a(S'Constant'
p3448
I3
tp3449
a(S'Singularity'
p3450
I4
tp3451
assbsS'TMakeRandomIndicesCV'
p3452
(i__main__
ClassDefinition
p3453
(dp3454
g4
I1
sg5
I01
sg6
g3452
sg7
S'TMakeRandomIndices'
p3455
sg9
I00
sg10
(lp3456
sg12
(lp3457
(S'int'
p3458
S'folds'
p3459
g3459
S'number of folds'
p3460
I0
I0
I01
Ntp3461
ag643
ag647
ag651
asg26
(dp3462
sbsS'TClassifierList'
p3463
(ipyprops
ClassDefinition
p3464
(dp3465
g4
I0
sg5
I01
sg6
g3463
sg7
g126
sg9
I0
sg10
(lp3466
sg12
(lp3467
sg26
(dp3468
sbsS'TPreprocessor_removeDuplicates'
p3469
(i__main__
ClassDefinition
p3470
(dp3471
g4
I1
sg5
I01
sg6
g3469
sg7
S'TPreprocessor'
p3472
sg9
I00
sg10
(lp3473
sg12
(lp3474
sg26
(dp3475
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3476
(i__main__
ClassDefinition
p3477
(dp3478
g4
I1
sg5
I01
sg6
g3476
sg7
S'TTreeExampleSplitter'
p3479
sg9
I00
sg10
(lp3480
sg12
(lp3481
sg26
(dp3482
sbsS'TExamplesDistanceConstructor_Normalized'
p3483
(i__main__
ClassDefinition
p3484
(dp3485
g4
I1
sg5
I01
sg6
g3483
sg7
S'TExamplesDistanceConstructor'
p3486
sg9
I01
sg10
(lp3487
sg12
(lp3488
g1889
ag1893
ag1269
asg26
(dp3489
sbsS'TCostWrapperLearner'
p3490
(i__main__
ClassDefinition
p3491
(dp3492
g4
I1
sg5
I01
sg6
g3490
sg7
S'TLearner'
p3493
sg9
I00
sg10
(lp3494
sg12
(lp3495
(S'TLearner'
p3496
S'basicLearner'
p3497
g3497
S'basic learner'
p3498
I0
I0
I00
Ntp3499
a(S'TCostMatrix'
p3500
S'costMatrix'
p3501
g3501
S'cost matrix'
p3502
I0
I0
I00
Ntp3503
ag102
asg26
(dp3504
sbsS'TRandomLearner'
p3505
(i__main__
ClassDefinition
p3506
(dp3507
g4
I1
sg5
I01
sg6
g3505
sg7
S'TLearner'
p3508
sg9
I00
sg10
(lp3509
sg12
(lp3510
(S'TDistribution'
p3511
S'probabilities'
p3512
g3512
S'probabilities of predictions'
p3513
I0
I0
I00
Ntp3514
ag102
asg26
(dp3515
sbsS'TImputer_asValue'
p3516
(i__main__
ClassDefinition
p3517
(dp3518
g4
I1
sg5
I01
sg6
g3516
sg7
S'TImputer'
p3519
sg9
I00
sg10
(lp3520
sg12
(lp3521
(S'TDomain'
p3522
S'domain'
p3523
g3523
S'domain to which the values are converted'
p3524
I0
I0
I00
Ntp3525
a(S'TExample'
p3526
S'defaults'
p3527
g3527
S'values to impute instead of missing ones - for continuous attributes only!'
p3528
I0
I0
I00
Ntp3529
asg26
(dp3530
sbsNNsS'TPearsonCorrelation'
p3531
(i__main__
ClassDefinition
p3532
(dp3533
g4
I1
sg5
I01
sg6
g3531
sg7
S'TOrange'
p3534
sg9
I00
sg10
(lp3535
sg12
(lp3536
(S'float'
p3537
S'r'
p3538
g3538
S'correlation coefficient'
p3539
I0
I0
I01
Ntp3540
a(S'float'
p3541
g2078
g2078
S't-statics significance'
p3542
I0
I0
I01
Ntp3543
a(S'int'
p3544
S'df'
p3545
g3545
S'degrees of freedom'
p3546
I0
I0
I01
Ntp3547
a(S'float'
p3548
g2049
g2049
S'significance'
p3549
I0
I0
I01
Ntp3550
asg26
(dp3551
sbsS'TDistributionAssessor_Laplace'
p3552
(i__main__
ClassDefinition
p3553
(dp3554
g4
I1
sg5
I01
sg6
g3552
sg7
S'TDistributionAssessor'
p3555
sg9
I00
sg10
(lp3556
sg12
(lp3557
sg26
(dp3558
sbsS'TColumnAssessor_Relief'
p3559
(i__main__
ClassDefinition
p3560
(dp3561
g4
I1
sg5
I01
sg6
g3559
sg7
S'TColumnAssessor'
p3562
sg9
I00
sg10
(lp3563
sg12
(lp3564
sg26
(dp3565
sbsS'TClassifierByLookupTable'
p3566
(i__main__
ClassDefinition
p3567
(dp3568
g4
I1
sg5
I01
sg6
g3566
sg7
S'TClassifier'
p3569
sg9
I01
sg10
(lp3570
sg12
(lp3571
g79
ag83
ag87
ag91
asg26
(dp3572
sbsS'TRuleBeamFinder'
p3573
(i__main__
ClassDefinition
p3574
(dp3575
g4
I1
sg5
I01
sg6
g3573
sg7
S'TRuleFinder'
p3576
sg9
I00
sg10
(lp3577
sg12
(lp3578
(S'TRuleBeamInitializer'
p3579
S'initializer'
p3580
g3580
g533
I0
I0
I00
Ntp3581
a(S'TRuleBeamRefiner'
p3582
S'refiner'
p3583
g3583
g533
I0
I0
I00
Ntp3584
a(S'TRuleBeamCandidateSelector'
p3585
S'candidateSelector'
p3586
g3586
g533
I0
I0
I00
Ntp3587
a(S'TRuleBeamFilter'
p3588
S'ruleFilter'
p3589
g3589
g533
I0
I0
I00
Ntp3590
a(S'TRuleValidator'
p3591
S'ruleStoppingValidator'
p3592
g3592
g533
I0
I0
I00
Ntp3593
a(S'TRuleValidator'
p3594
S'validator'
p3595
g3595
g533
I0
I0
I00
Ntp3596
a(S'TRuleEvaluator'
p3597
S'evaluator'
p3598
g3598
g533
I0
I0
I00
Ntp3599
asg26
(dp3600
sbsS'TC45Classifier'
p3601
(i__main__
ClassDefinition
p3602
(dp3603
g4
I1
sg5
I01
sg6
g3601
sg7
S'TClassifierFD'
p3604
sg9
I00
sg10
(lp3605
sg12
(lp3606
(S'TC45TreeNode'
p3607
S'tree'
p3608
g3608
S'tree'
p3609
I0
I0
I00
Ntp3610
ag255
ag87
ag91
asg26
(dp3611
sbsS'TGeneralExampleClustering'
p3612
(i__main__
ClassDefinition
p3613
(dp3614
g4
I1
sg5
I01
sg6
g3612
sg7
S'TOrange'
p3615
sg9
I01
sg10
(lp3616
sg12
(lp3617
sg26
(dp3618
sbsS'TMeasureAttribute_cost'
p3619
(i__main__
ClassDefinition
p3620
(dp3621
g4
I1
sg5
I01
sg6
g3619
sg7
S'TMeasureAttributeFromProbabilities'
p3622
sg9
I00
sg10
(lp3623
sg12
(lp3624
(S'TCostMatrix'
p3625
S'cost'
p3626
g3626
S'cost matrix'
p3627
I0
I0
I00
Ntp3628
ag833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp3629
sbsS'TImputerConstructor_minimal'
p3630
(i__main__
ClassDefinition
p3631
(dp3632
g4
I1
sg5
I01
sg6
g3630
sg7
S'TImputerConstructor'
p3633
sg9
I00
sg10
(lp3634
sg12
(lp3635
g146
asg26
(dp3636
sbsS'TClustersFromIM'
p3637
(i__main__
ClassDefinition
p3638
(dp3639
g4
I1
sg5
I01
sg6
g3637
sg7
S'TOrange'
p3640
sg9
I01
sg10
(lp3641
sg12
(lp3642
sg26
(dp3643
sbsS'TFilter_values'
p3644
(i__main__
ClassDefinition
p3645
(dp3646
g4
I1
sg5
I01
sg6
g3644
sg7
S'TFilter'
p3647
sg9
I00
sg10
(lp3648
sg12
(lp3649
(S'TValueFilterList'
p3650
S'conditions'
p3651
g3651
S'a list of filters'
p3652
I0
I0
I00
Ntp3653
a(S'bool'
p3654
S'conjunction'
p3655
g3655
S'if true, filter computes conjunction, otherwise disjunction'
p3656
I0
I0
I01
Ntp3657
ag620
ag624
asg26
(dp3658
S'Operator'
p3659
(lp3660
(S'None'
p3661
I0
tp3662
a(S'Equal'
p3663
I1
tp3664
a(S'NotEqual'
p3665
I2
tp3666
a(S'Less'
p3667
I3
tp3668
a(S'LessEqual'
p3669
I4
tp3670
a(S'Greater'
p3671
I5
tp3672
a(S'GreaterEqual'
p3673
I6
tp3674
a(S'Between'
p3675
I7
tp3676
a(S'Outside'
p3677
I8
tp3678
a(S'Contains'
p3679
I9
tp3680
a(S'NotContains'
p3681
I10
tp3682
a(S'BeginsWith'
p3683
I11
tp3684
a(S'EndsWith'
p3685
I12
tp3686
a(S'Listed'
p3687
I13
tp3688
assbsS'TRuleClassifier'
p3689
(i__main__
ClassDefinition
p3690
(dp3691
g4
I1
sg5
I01
sg6
g3689
sg7
S'TClassifier'
p3692
sg9
I01
sg10
(lp3693
sg12
(lp3694
g534
ag537
ag540
ag87
ag91
asg26
(dp3695
sbsS'TAssociationRules'
p3696
(ipyprops
ClassDefinition
p3697
(dp3698
g4
I0
sg5
I01
sg6
g3696
sg7
g126
sg9
I0
sg10
(lp3699
sg12
(lp3700
sg26
(dp3701
sbsS'TMajorityLearner'
p3702
(i__main__
ClassDefinition
p3703
(dp3704
g4
I1
sg5
I01
sg6
g3702
sg7
S'TLearner'
p3705
sg9
I00
sg10
(lp3706
sg12
(lp3707
(S'TProbabilityEstimatorConstructor'
p3708
S'estimatorConstructor'
p3709
g3709
S'constructs probability estimator'
p3710
I0
I0
I00
Ntp3711
a(S'TDistribution'
p3712
S'aprioriDistribution'
p3713
g3713
S'apriori class distribution'
p3714
I0
I0
I00
Ntp3715
ag102
asg26
(dp3716
sbsS'TSVMLearner'
p3717
(i__main__
ClassDefinition
p3718
(dp3719
g4
I1
sg5
I01
sg6
g3717
sg7
S'TLearner'
p3720
sg9
I00
sg10
(lp3721
sg12
(lp3722
(S'int'
p3723
S'svm_type'
p3724
g3724
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p3725
I0
I0
I01
S'SVMLearner_SVMType'
p3726
tp3727
a(S'int'
p3728
S'kernel_type'
p3729
g3729
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p3730
I0
I0
I01
S'SVMLearner_Kernel'
p3731
tp3732
a(S'float'
p3733
S'degree'
p3734
g3734
S'polynomial kernel degree'
p3735
I0
I0
I01
Ntp3736
a(S'float'
p3737
S'gamma'
p3738
g3738
S'poly/rbf/sigm parameter'
p3739
I0
I0
I01
Ntp3740
a(S'float'
p3741
S'coef0'
p3742
g3742
S'poly/sigm parameter'
p3743
I0
I0
I01
Ntp3744
a(S'float'
p3745
S'cache_size'
p3746
g3746
S'cache size in MB'
p3747
I0
I0
I01
Ntp3748
a(S'float'
p3749
S'eps'
p3750
g3750
S'stopping criteria'
p3751
I0
I0
I01
Ntp3752
a(S'float'
p3753
g3136
g3136
S'for C_SVC and C_SVR'
p3754
I0
I0
I01
Ntp3755
a(S'float'
p3756
S'nu'
p3757
g3757
S'for NU_SVC and ONE_CLASS'
p3758
I0
I0
I01
Ntp3759
a(S'float'
p3760
g2049
g2049
S'for C_SVR'
p3761
I0
I0
I01
Ntp3762
a(S'int'
p3763
S'shrinking'
p3764
g3764
S'shrinking'
p3765
I0
I0
I01
Ntp3766
a(S'int'
p3767
S'probability'
p3768
g3768
S'probability'
p3769
I0
I0
I01
Ntp3770
a(S'bool'
p3771
S'verbose'
p3772
g3772
S'verbose'
p3773
I0
I0
I01
Ntp3774
a(S'TKernelFunc'
p3775
S'kernelFunc'
p3776
g3776
S'custom kernel function'
p3777
I0
I0
I00
Ntp3778
ag102
asg26
(dp3779
S'Kernel'
p3780
(lp3781
(S'Linear'
p3782
S'LINEAR'
p3783
tp3784
a(S'Polynomial'
p3785
S'POLY'
p3786
tp3787
a(S'RBF'
p3788
S'RBF'
p3789
tp3790
a(S'Sigmoid'
p3791
S'SIGMOID'
p3792
tp3793
a(S'Custom'
p3794
S'CUSTOM'
p3795
tp3796
asS'SVMType'
p3797
(lp3798
(S'C_SVC'
p3799
S'C_SVC'
p3800
tp3801
a(S'Nu_SVC'
p3802
S'NU_SVC'
p3803
tp3804
a(S'OneClass'
p3805
S'ONE_CLASS'
p3806
tp3807
a(S'Epsilon_SVR'
p3808
S'EPSILON_SVR'
p3809
tp3810
a(S'Nu_SVR'
p3811
S'NU_SVR'
p3812
tp3813
assbsS'TImputerConstructor_defaults'
p3814
(i__main__
ClassDefinition
p3815
(dp3816
g4
I1
sg5
I01
sg6
g3814
sg7
S'TImputerConstructor'
p3817
sg9
I00
sg10
(lp3818
sg12
(lp3819
(S'TExample'
p3820
S'defaults'
p3821
g3821
S'default values to be imputed instead missing ones'
p3822
I0
I0
I00
Ntp3823
ag146
asg26
(dp3824
sbsS'TConditionalProbabilityEstimatorConstructor'
p3825
(i__main__
ClassDefinition
p3826
(dp3827
g4
I1
sg5
I01
sg6
g3825
sg7
S'TOrange'
p3828
sg9
I01
sg10
(lp3829
sg12
(lp3830
sg26
(dp3831
sbsS'TPreprocessor_takeMissingClasses'
p3832
(i__main__
ClassDefinition
p3833
(dp3834
g4
I1
sg5
I01
sg6
g3832
sg7
S'TPreprocessor'
p3835
sg9
I00
sg10
(lp3836
sg12
(lp3837
sg26
(dp3838
sbsS'TClustersFromIMByAssessor'
p3839
(i__main__
ClassDefinition
p3840
(dp3841
g4
I1
sg5
I01
sg6
g3839
sg7
S'TClustersFromIM'
p3842
sg9
I00
sg10
(lp3843
sg12
(lp3844
(S'TColumnAssessor'
p3845
S'columnAssessor'
p3846
g3846
S'column quality assessor'
p3847
I0
I0
I00
Ntp3848
a(S'TStopIMClusteringByAssessor'
p3849
S'stopCriterion'
p3850
g3850
S'stop criterion'
p3851
I0
I0
I00
Ntp3852
asg26
(dp3853
sbsS'TRuleValidator_LRS'
p3854
(i__main__
ClassDefinition
p3855
(dp3856
g4
I1
sg5
I01
sg6
g3854
sg7
S'TRuleValidator'
p3857
sg9
I00
sg10
(lp3858
sg12
(lp3859
(S'float'
p3860
S'alpha'
p3861
g3861
g533
I0
I0
I01
Ntp3862
a(S'float'
p3863
S'min_coverage'
p3864
g3864
g533
I0
I0
I01
Ntp3865
a(S'int'
p3866
S'max_rule_complexity'
p3867
g3867
g533
I0
I0
I01
Ntp3868
a(S'float'
p3869
S'min_quality'
p3870
g3870
g533
I0
I0
I01
Ntp3871
asg26
(dp3872
sbsS'TLogRegFitter_Python'
p3873
(i__main__
ClassDefinition
p3874
(dp3875
g4
I1
sg5
I01
sg6
g3873
sg7
S'TLogRegFitter'
p3876
sg9
I00
sg10
(lp3877
sg12
(lp3878
sg26
(dp3879
sbsS'TMakeRandomIndices2'
p3880
(i__main__
ClassDefinition
p3881
(dp3882
g4
I1
sg5
I01
sg6
g3880
sg7
S'TMakeRandomIndices'
p3883
sg9
I00
sg10
(lp3884
sg12
(lp3885
(S'float'
p3886
S'p0'
p3887
g3887
S"a proportion or a number of 0's"
p3888
I0
I0
I01
Ntp3889
ag643
ag647
ag651
asg26
(dp3890
sbsS'TValueList'
p3891
(ipyprops
ClassDefinition
p3892
(dp3893
g4
I0
sg5
I01
sg6
S'TValueList'
p3894
sg7
g126
sg9
I0
sg10
(lp3895
sg12
(lp3896
sg26
(dp3897
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p3898
(i__main__
ClassDefinition
p3899
(dp3900
g4
I1
sg5
I01
sg6
g3898
sg7
S'TTreeExampleSplitter'
p3901
sg9
I00
sg10
(lp3902
sg12
(lp3903
sg26
(dp3904
sbsS'TContDistribution'
p3905
(i__main__
ClassDefinition
p3906
(dp3907
g4
I1
sg5
I01
sg6
g3905
sg7
S'TDistribution'
p3908
sg9
I00
sg10
(lp3909
sg12
(lp3910
(S'TFloatList'
p3911
S'variances'
p3912
g3912
S'variances'
p3913
I0
I0
I00
Ntp3914
a(S'float'
p3915
S'sum'
p3916
g3916
S'weighted sum of elements (i.e. N*average)'
p3917
I01
I0
I01
Ntp3918
a(S'float'
p3919
S'sum2'
p3920
g3920
S'weighted sum of squares of elements'
p3921
I01
I0
I01
Ntp3922
ag1054
ag1058
ag1062
ag1066
ag1070
ag1074
ag1078
ag1082
asg26
(dp3923
sbsS'TTreeDescender_UnknownMergeAsSelector'
p3924
(i__main__
ClassDefinition
p3925
(dp3926
g4
I1
sg5
I01
sg6
g3924
sg7
g1432
sg9
I0
sg10
(lp3927
sg12
(lp3928
sg26
(dp3929
sbsS'TContingencyAttrClass'
p3930
(i__main__
ClassDefinition
p3931
(dp3932
g4
I1
sg5
I01
sg6
g3930
sg7
S'TContingencyClass'
p3933
sg9
I00
sg10
(lp3934
sg12
(lp3935
g1499
ag1503
ag1508
ag1512
ag1516
ag1520
asg26
(dp3936
sbsS'TDomainTransformerConstructor'
p3937
(i__main__
ClassDefinition
p3938
(dp3939
g4
I1
sg5
I01
sg6
g3937
sg7
S'TOrange'
p3940
sg9
I01
sg10
(lp3941
sg12
(lp3942
(S'bool'
p3943
S'preservesOrder'
p3944
g3944
S'a flag telling that original attributes have corresponding attribute in the same order'
p3945
I01
I0
I01
Ntp3946
a(S'bool'
p3947
S'preservesAttributes'
p3948
g3948
S'a flag telling whether each original has a corresponding new attribute'
p3949
I01
I0
I01
Ntp3950
asg26
(dp3951
sbsS'TPythonValueSpecial'
p3952
(i__main__
ClassDefinition
p3953
(dp3954
g4
I1
sg5
I01
sg6
g3952
sg7
S'TOrange'
p3955
sg9
I00
sg10
(lp3956
sg12
(lp3957
(S'int'
p3958
S'valueType'
p3959
g3959
S'value type'
p3960
I0
I0
I01
Ntp3961
asg26
(dp3962
sbsS'TIGConstructor'
p3963
(i__main__
ClassDefinition
p3964
(dp3965
g4
I1
sg5
I01
sg6
g3963
sg7
S'TOrange'
p3966
sg9
I01
sg10
(lp3967
sg12
(lp3968
sg26
(dp3969
sbsS'TProbabilityEstimatorConstructor'
p3970
(i__main__
ClassDefinition
p3971
(dp3972
g4
I1
sg5
I01
sg6
g3970
sg7
S'TOrange'
p3973
sg9
I01
sg10
(lp3974
sg12
(lp3975
sg26
(dp3976
sbsS'TTreeNodeList'
p3977
(ipyprops
ClassDefinition
p3978
(dp3979
g4
I0
sg5
I01
sg6
g3977
sg7
g126
sg9
I0
sg10
(lp3980
sg12
(lp3981
sg26
(dp3982
sbsS'TFloatVariable'
p3983
(i__main__
ClassDefinition
p3984
(dp3985
g4
I1
sg5
I01
sg6
g3983
sg7
S'TVariable'
p3986
sg9
I00
sg10
(lp3987
sg12
(lp3988
(S'float'
p3989
S'startValue'
p3990
g3990
S'lowest value'
p3991
I0
I0
I01
Ntp3992
a(S'float'
p3993
S'endValue'
p3994
g3994
S'highest value'
p3995
I0
I0
I01
Ntp3996
a(S'float'
p3997
S'stepValue'
p3998
g3998
S'step'
p3999
I0
I0
I01
Ntp4000
a(S'int'
p4001
S'numberOfDecimals'
p4002
g4002
S'number of digits after decimal point'
p4003
I0
I0
I01
Ntp4004
a(S'bool'
p4005
S'scientificFormat'
p4006
g4006
S'use scientific format in output'
p4007
I0
I0
I01
Ntp4008
a(S'int'
p4009
S'adjustDecimals'
p4010
g4010
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4011
I0
I0
I01
Ntp4012
ag293
ag298
ag302
ag306
ag310
ag314
ag318
ag322
asg26
(dp4013
sbsS'TImputer_random'
p4014
(i__main__
ClassDefinition
p4015
(dp4016
g4
I1
sg5
I01
sg6
g4014
sg7
S'TImputer'
p4017
sg9
I00
sg10
(lp4018
sg12
(lp4019
(S'bool'
p4020
S'imputeClass'
p4021
g4021
S'Tells whether to impute the class values, too (default: true)'
p4022
I0
I0
I01
Ntp4023
a(S'bool'
p4024
S'deterministic'
p4025
g4025
S"tells whether to initialize random by example's CRC (default: false)"
p4026
I0
I0
I01
Ntp4027
a(S'TDistributionList'
p4028
S'distributions'
p4029
g4029
S'probability functions'
p4030
I0
I0
I00
Ntp4031
asg26
(dp4032
sbsS'TFilter_hasMeta'
p4033
(i__main__
ClassDefinition
p4034
(dp4035
g4
I1
sg5
I01
sg6
g4033
sg7
S'TFilter'
p4036
sg9
I00
sg10
(lp4037
sg12
(lp4038
(S'int'
p4039
S'id'
p4040
g4040
S'meta attribute id'
p4041
I0
I0
I01
Ntp4042
ag620
ag624
asg26
(dp4043
sbsS'TProbabilityEstimatorConstructor_kernel'
p4044
(i__main__
ClassDefinition
p4045
(dp4046
g4
I1
sg5
I01
sg6
g4044
sg7
S'TProbabilityEstimatorConstructor'
p4047
sg9
I00
sg10
(lp4048
sg12
(lp4049
(S'float'
p4050
S'minImpact'
p4051
g4051
S'Minimal impact the point must have to be counted'
p4052
I0
I0
I01
Ntp4053
a(S'float'
p4054
S'smoothing'
p4055
g4055
S'Smoothing factor'
p4056
I0
I0
I01
Ntp4057
a(S'int'
p4058
S'nPoints'
p4059
g4059
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4060
I0
I0
I01
Ntp4061
asg26
(dp4062
sbsS'TRuleCovererAndRemover_Default'
p4063
(i__main__
ClassDefinition
p4064
(dp4065
g4
I1
sg5
I01
sg6
g4063
sg7
S'TRuleCovererAndRemover'
p4066
sg9
I00
sg10
(lp4067
sg12
(lp4068
sg26
(dp4069
sbsS'TMakeRandomIndices'
p4070
(i__main__
ClassDefinition
p4071
(dp4072
g4
I1
sg5
I01
sg6
g4070
sg7
S'TOrange'
p4073
sg9
I00
sg10
(lp4074
sg12
(lp4075
g643
ag647
ag651
asg26
(dp4076
S'Stratification'
p4077
(lp4078
(S'StratifiedIfPossible'
p4079
S'-1'
p4080
tp4081
a(S'NotStratified'
p4082
I0
tp4083
a(S'Stratified'
p4084
I1
tp4085
assbsS'TFilter_Python'
p4086
(i__main__
ClassDefinition
p4087
(dp4088
g4
I1
sg5
I01
sg6
g4086
sg7
S'TFilter'
p4089
sg9
I00
sg10
(lp4090
sg12
(lp4091
g620
ag624
asg26
(dp4092
sbsS'TRuleBeamInitializer_Default'
p4093
(i__main__
ClassDefinition
p4094
(dp4095
g4
I1
sg5
I01
sg6
g4093
sg7
S'TRuleBeamInitializer'
p4096
sg9
I00
sg10
(lp4097
sg12
(lp4098
sg26
(dp4099
sbsS'TExamplesDistanceConstructor_Python'
p4100
(i__main__
ClassDefinition
p4101
(dp4102
g4
I1
sg5
I01
sg6
g4100
sg7
S'TExamplesDistanceConstructor'
p4103
sg9
I00
sg10
(lp4104
sg12
(lp4105
g1269
asg26
(dp4106
sbsS'TTreeDescender_Python'
p4107
(i__main__
ClassDefinition
p4108
(dp4109
g4
I1
sg5
I01
sg6
g4107
sg7
S'TTreeDescender'
p4110
sg9
I00
sg10
(lp4111
sg12
(lp4112
sg26
(dp4113
sbsS'THeatmap'
p4114
(i__main__
ClassDefinition
p4115
(dp4116
g4
I1
sg5
I0
sg6
g4114
sg7
S'TOrange'
p4117
sg9
I00
sg10
(lp4118
sg12
(lp4119
(S'int'
p4120
S'height'
p4121
g4121
S'bitmap height (in cells)'
p4122
I0
I0
I01
Ntp4123
a(S'int'
p4124
S'width'
p4125
g4125
S'bitmap width (in cells)'
p4126
I0
I0
I01
Ntp4127
a(S'TExampleTable'
p4128
S'examples'
p4129
g4129
S'examples from the whole bitmap'
p4130
I01
I0
I00
Ntp4131
a(S'TIntList'
p4132
S'exampleIndices'
p4133
g4133
S"indices to 'examples' (one for row + one at the end)"
p4134
I01
I0
I00
Ntp4135
asg26
(dp4136
sbsS'TSubsetsGenerator_constant'
p4137
(i__main__
ClassDefinition
p4138
(dp4139
g4
I1
sg5
I01
sg6
g4137
sg7
S'TSubsetsGenerator'
p4140
sg9
I00
sg10
(lp4141
sg12
(lp4142
(S'TVarList'
p4143
S'constant'
p4144
g4144
S'a subset that is returned (once!)'
p4145
I0
I0
I00
Ntp4146
ag186
asg26
(dp4147
sbsS'TGaussianNoiseGenerator'
p4148
(i__main__
ClassDefinition
p4149
(dp4150
g4
I1
sg5
I01
sg6
g4148
sg7
S'TChangeExampleGenerator'
p4151
sg9
I00
sg10
(lp4152
sg12
(lp4153
(S'TIntFloatList'
p4154
S'deviations'
p4155
g4155
S"deviations for attributes' values"
p4156
I0
I0
I00
Ntp4157
a(S'TRandomGenerator'
p4158
S'randomGenerator'
p4159
g4159
S'random generator'
p4160
I0
I0
I00
Ntp4161
ag270
ag274
asg26
(dp4162
sbsS'TClustersFromDistributionsByAssessor'
p4163
(i__main__
ClassDefinition
p4164
(dp4165
g4
I1
sg5
I01
sg6
g4163
sg7
S'TClustersFromDistributions'
p4166
sg9
I00
sg10
(lp4167
sg12
(lp4168
(S'TDistributionAssessor'
p4169
S'distributionAssessor'
p4170
g4170
S'column quality assessor'
p4171
I0
I0
I00
Ntp4172
a(S'TStopDistributionClustering'
p4173
S'stopCriterion'
p4174
g4174
S'stop criterion'
p4175
I0
I0
I00
Ntp4176
a(S'float'
p4177
S'minProfitProportion'
p4178
g4178
S'minimal merge profit'
p4179
I0
I0
I01
Ntp4180
asg26
(dp4181
sbsS'TExamplesDistance_Hamming'
p4182
(i__main__
ClassDefinition
p4183
(dp4184
g4
I1
sg5
I01
sg6
g4182
sg7
S'TExamplesDistance'
p4185
sg9
I00
sg10
(lp4186
sg12
(lp4187
(S'bool'
p4188
S'ignoreClass'
p4189
g4189
S'if true (default), class value is ignored when computing distances'
p4190
I0
I0
I01
Ntp4191
a(S'bool'
p4192
S'ignoreUnknowns'
p4193
g4193
S'if true (default: false) unknown values are ignored in computation'
p4194
I0
I0
I01
Ntp4195
asg26
(dp4196
sbsS'TDefaultClassifier'
p4197
(i__main__
ClassDefinition
p4198
(dp4199
g4
I1
sg5
I01
sg6
g4197
sg7
S'TClassifier'
p4200
sg9
I00
sg10
(lp4201
sg12
(lp4202
(S'TValue'
p4203
S'defaultVal'
p4204
g4204
S'default prediction'
p4205
I0
I0
I01
Ntp4206
a(S'TDistribution'
p4207
S'defaultDistribution'
p4208
g4208
S'default distribution'
p4209
I0
I0
I00
Ntp4210
ag87
ag91
asg26
(dp4211
sbsS'TColumnAssessor_Kramer'
p4212
(i__main__
ClassDefinition
p4213
(dp4214
g4
I1
sg5
I01
sg6
g4212
sg7
S'TColumnAssessor'
p4215
sg9
I00
sg10
(lp4216
sg12
(lp4217
sg26
(dp4218
sbsS'TEVDistGetter_Python'
p4219
(i__main__
ClassDefinition
p4220
(dp4221
g4
I1
sg5
I01
sg6
g4219
sg7
S'TEVDistGetter'
p4222
sg9
I00
sg10
(lp4223
sg12
(lp4224
sg26
(dp4225
sbsS'TDiscretization'
p4226
(i__main__
ClassDefinition
p4227
(dp4228
g4
I1
sg5
I01
sg6
g4226
sg7
S'TOrange'
p4229
sg9
I01
sg10
(lp4230
sg12
(lp4231
sg26
(dp4232
sbsS'TTreeSplitConstructor_Measure'
p4233
(i__main__
ClassDefinition
p4234
(dp4235
g4
I1
sg5
I01
sg6
g4233
sg7
S'TTreeSplitConstructor'
p4236
sg9
I01
sg10
(lp4237
sg12
(lp4238
g1207
ag1211
ag708
asg26
(dp4239
sbsS'TTreeNode'
p4240
(i__main__
ClassDefinition
p4241
(dp4242
g4
I1
sg5
I01
sg6
g4240
sg7
S'TOrange'
p4243
sg9
I00
sg10
(lp4244
sg12
(lp4245
(S'TClassifier'
p4246
S'nodeClassifier'
p4247
g4247
S'classifies an example'
p4248
I0
I0
I00
Ntp4249
a(S'TDistribution'
p4250
S'distribution'
p4251
g4251
S'distribution of classes in the node'
p4252
I0
I0
I00
Ntp4253
a(S'TDomainContingency'
p4254
S'contingency'
p4255
g4255
S'domain contingency for examples in the node'
p4256
I0
I0
I00
Ntp4257
a(S'TExampleGenerator'
p4258
S'examples'
p4259
g4259
S'learning examples (if stored)'
p4260
I0
I0
I00
Ntp4261
a(S'int'
p4262
S'weightID'
p4263
g4263
S'weightID used to construct this node'
p4264
I0
I0
I01
Ntp4265
a(S'TClassifier'
p4266
S'branchSelector'
p4267
g4267
S'classifier that select a branch for an example'
p4268
I0
I0
I00
Ntp4269
a(S'TTreeNodeList'
p4270
S'branches'
p4271
g4271
S'classifiers presenting the branches'
p4272
I0
I0
I00
Ntp4273
a(S'TStringList'
p4274
S'branchDescriptions'
p4275
g4275
S'descriptions of branches'
p4276
I0
I0
I00
Ntp4277
a(S'TDiscDistribution'
p4278
S'branchSizes'
p4279
g4279
S'numbers of examples in branches'
p4280
I0
I0
I00
Ntp4281
asg26
(dp4282
sbsS'TTransformValue_IsDefined'
p4283
(i__main__
ClassDefinition
p4284
(dp4285
g4
I1
sg5
I01
sg6
g4283
sg7
S'TTransformValue'
p4286
sg9
I00
sg10
(lp4287
sg12
(lp4288
g729
asg26
(dp4289
sbsS'TFilter_hasClassValue'
p4290
(i__main__
ClassDefinition
p4291
(dp4292
g4
I1
sg5
I01
sg6
g4290
sg7
S'TFilter'
p4293
sg9
I00
sg10
(lp4294
sg12
(lp4295
g620
ag624
asg26
(dp4296
sbsS'TStopDistributionClustering_binary'
p4297
(i__main__
ClassDefinition
p4298
(dp4299
g4
I1
sg5
I01
sg6
g4297
sg7
S'TStopDistributionClustering'
p4300
sg9
I00
sg10
(lp4301
sg12
(lp4302
sg26
(dp4303
sbsS'TIMByRows'
p4304
(i__main__
ClassDefinition
p4305
(dp4306
g4
I1
sg5
I01
sg6
g4304
sg7
S'TOrange'
p4307
sg9
I00
sg10
(lp4308
sg12
(lp4309
(S'int'
p4310
S'varType'
p4311
g4311
S' class variable type'
p4312
I0
I0
I01
S'Variable_Type'
p4313
tp4314
asg26
(dp4315
sbsS'TRuleFinder'
p4316
(i__main__
ClassDefinition
p4317
(dp4318
g4
I1
sg5
I01
sg6
g4316
sg7
S'TOrange'
p4319
sg9
I01
sg10
(lp4320
sg12
(lp4321
g3596
ag3599
asg26
(dp4322
sbsS'TProbabilityEstimatorConstructor_relative'
p4323
(i__main__
ClassDefinition
p4324
(dp4325
g4
I1
sg5
I01
sg6
g4323
sg7
S'TProbabilityEstimatorConstructor'
p4326
sg9
I00
sg10
(lp4327
sg12
(lp4328
sg26
(dp4329
sbsS'TKernelFunc'
p4330
(i__main__
ClassDefinition
p4331
(dp4332
g4
I1
sg5
I01
sg6
g4330
sg7
S'TOrange'
p4333
sg9
I01
sg10
(lp4334
sg12
(lp4335
sg26
(dp4336
sbsS'TMeasureAttribute_gini'
p4337
(i__main__
ClassDefinition
p4338
(dp4339
g4
I1
sg5
I01
sg6
g4337
sg7
S'TMeasureAttributeFromProbabilities'
p4340
sg9
I00
sg10
(lp4341
sg12
(lp4342
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp4343
sbsS'TRule'
p4344
(i__main__
ClassDefinition
p4345
(dp4346
g4
I1
sg5
I01
sg6
g4344
sg7
S'TOrange'
p4347
sg9
I00
sg10
(lp4348
sg12
(lp4349
(S'TFilter'
p4350
S'filter'
p4351
g4351
S'stored filter for this rule'
p4352
I0
I0
I00
Ntp4353
a(S'TFilter'
p4354
S'valuesFilter'
p4355
g4355
S'Filter_values representation of main filter (sometimes needed)'
p4356
I0
I0
I00
Ntp4357
a(S'TClassifier'
p4358
S'classifier'
p4359
g4359
S'classifies an example'
p4360
I0
I0
I00
Ntp4361
a(S'TLearner'
p4362
S'learner'
p4363
g4363
S'learns a classifier from data'
p4364
I0
I0
I00
Ntp4365
a(S'TRule'
p4366
S'parentRule'
p4367
g4367
g533
I0
I0
I00
Ntp4368
a(S'TDistribution'
p4369
S'baseDist'
p4370
g4370
S'initial distribution'
p4371
I0
I0
I00
Ntp4372
a(S'TDistribution'
p4373
S'classDistribution'
p4374
g4374
S'distribution of classes covered by the rule'
p4375
I0
I0
I00
Ntp4376
a(S'TExampleTable'
p4377
S'examples'
p4378
g4378
S'covered examples'
p4379
I0
I0
I00
Ntp4380
a(S'int'
p4381
S'weightID'
p4382
g4382
S'weight for the stored examples'
p4383
I0
I0
I01
Ntp4384
a(S'float'
p4385
S'quality'
p4386
g4386
S'some measure of rule quality'
p4387
I0
I0
I01
Ntp4388
a(S'int'
p4389
S'complexity'
p4390
g4390
g533
I0
I0
I01
Ntp4391
a(S'float'
p4392
S'chi'
p4393
g4393
g533
I0
I0
I01
Ntp4394
a(S'int'
p4395
S'requiredConditions'
p4396
g4396
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4397
I0
I0
I01
Ntp4398
asg26
(dp4399
sbsS'TIntervalDiscretizer'
p4400
(i__main__
ClassDefinition
p4401
(dp4402
g4
I1
sg5
I01
sg6
g4400
sg7
S'TDiscretizer'
p4403
sg9
I00
sg10
(lp4404
sg12
(lp4405
(S'TFloatList'
p4406
S'points'
p4407
g4407
S'cut-off points'
p4408
I0
I0
I00
Ntp4409
ag729
asg26
(dp4410
sbsS'TClassifierByLookupTable2'
p4411
(i__main__
ClassDefinition
p4412
(dp4413
g4
I1
sg5
I01
sg6
g4411
sg7
S'TClassifierByLookupTable'
p4414
sg9
I00
sg10
(lp4415
sg12
(lp4416
(S'TVariable'
p4417
S'variable1'
p4418
g4418
S'the first attribute used for classification'
p4419
I01
I0
I00
Ntp4420
a(S'TVariable'
p4421
S'variable2'
p4422
g4422
S'the second attribute used for classification'
p4423
I01
I0
I00
Ntp4424
a(S'int'
p4425
S'noOfValues1'
p4426
g4426
S'number of values of the first attribute'
p4427
I01
I0
I01
Ntp4428
a(S'int'
p4429
S'noOfValues2'
p4430
g4430
S'number of values of the second attribute'
p4431
I01
I0
I01
Ntp4432
a(S'TEFMDataDescription'
p4433
S'dataDescription'
p4434
g4434
S'data description'
p4435
I0
I0
I00
Ntp4436
ag79
ag83
ag87
ag91
asg26
(dp4437
sbsS'TEquiDistDiscretization'
p4438
(i__main__
ClassDefinition
p4439
(dp4440
g4
I1
sg5
I01
sg6
g4438
sg7
S'TDiscretization'
p4441
sg9
I00
sg10
(lp4442
sg12
(lp4443
(S'int'
p4444
S'numberOfIntervals'
p4445
g4445
S'number of intervals'
p4446
I0
I0
I01
Ntp4447
asg26
(dp4448
sbsS'TExampleGenerator'
p4449
(i__main__
ClassDefinition
p4450
(dp4451
g4
I1
sg5
I01
sg6
g4449
sg7
S'TOrange'
p4452
sg9
I01
sg10
(lp4453
sg12
(lp4454
g270
ag274
asg26
(dp4455
sbsS'TClassifierByLookupTable1'
p4456
(i__main__
ClassDefinition
p4457
(dp4458
g4
I1
sg5
I01
sg6
g4456
sg7
S'TClassifierByLookupTable'
p4459
sg9
I00
sg10
(lp4460
sg12
(lp4461
(S'TVariable'
p4462
S'variable1'
p4463
(g4463
S'variable'
p4464
tp4465
S' attribute used for classification'
p4466
I01
I0
I00
Ntp4467
ag79
ag83
ag87
ag91
asg26
(dp4468
sbsS'TRuleClassifierConstructor_Python'
p4469
(i__main__
ClassDefinition
p4470
(dp4471
g4
I1
sg5
I01
sg6
g4469
sg7
S'TRuleClassifierConstructor'
p4472
sg9
I00
sg10
(lp4473
sg12
(lp4474
sg26
(dp4475
sbsS'TRemoveRedundantOneValue'
p4476
(i__main__
ClassDefinition
p4477
(dp4478
g4
I1
sg5
I01
sg6
g4476
sg7
S'TRemoveRedundant'
p4479
sg9
I00
sg10
(lp4480
sg12
(lp4481
(S'bool'
p4482
S'onData'
p4483
g4483
S'observe the actual number of value on the data (not on attribute definitions)'
p4484
I0
I0
I01
Ntp4485
ag1250
asg26
(dp4486
sbsS'TDistributionAssessor_Relief'
p4487
(i__main__
ClassDefinition
p4488
(dp4489
g4
I1
sg5
I01
sg6
g4487
sg7
S'TDistributionAssessor'
p4490
sg9
I00
sg10
(lp4491
sg12
(lp4492
sg26
(dp4493
sbsS'TEnumVariable'
p4494
(i__main__
ClassDefinition
p4495
(dp4496
g4
I1
sg5
I01
sg6
g4494
sg7
S'TVariable'
p4497
sg9
I00
sg10
(lp4498
sg12
(lp4499
(S'TStringList'
p4500
S'values'
p4501
g4501
S"attribute's values"
p4502
I0
I0
I00
Ntp4503
a(S'int'
p4504
S'baseValue'
p4505
g4505
S'the index of the base value'
p4506
I0
I0
I01
Ntp4507
ag293
ag298
ag302
ag306
ag310
ag314
ag318
ag322
asg26
(dp4508
sbsS'THeatmapConstructor'
p4509
(i__main__
ClassDefinition
p4510
(dp4511
g4
I1
sg5
I0
sg6
g4509
sg7
S'TOrange'
p4512
sg9
I00
sg10
(lp4513
sg12
(lp4514
(S'TExampleTable'
p4515
S'sortedExamples'
p4516
g4516
S'sortedExamples'
p4517
I01
I0
I00
Ntp4518
a(S'int'
p4519
S'nColumns'
p4520
g4520
S'number of columns'
p4521
I01
I0
I01
Ntp4522
a(S'int'
p4523
S'nRows'
p4524
g4524
S'number of rows'
p4525
I01
I0
I01
Ntp4526
a(S'int'
p4527
S'nClasses'
p4528
g4528
S'number of classes (0 if the data is not classified)'
p4529
I01
I0
I01
Ntp4530
asg26
(dp4531
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p4532
(i__main__
ClassDefinition
p4533
(dp4534
g4
I1
sg5
I01
sg6
g4532
sg7
S'TConditionalProbabilityEstimatorConstructor'
p4535
sg9
I00
sg10
(lp4536
sg12
(lp4537
(S'float'
p4538
S'windowProportion'
p4539
g4539
S'The proportion of points in a window for LR'
p4540
I0
I0
I01
Ntp4541
a(S'int'
p4542
S'nPoints'
p4543
g4543
S'The number of points on curve'
p4544
I0
I0
I01
Ntp4545
a(S'int'
p4546
S'distributionMethod'
p4547
g4547
S" Meaning of the 'nPoints'"
p4548
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p4549
tp4550
asg26
(dp4551
S'DistributionMethod'
p4552
(lp4553
(S'Minimal'
p4554
S'DISTRIBUTE_MINIMAL'
p4555
tp4556
a(S'Factor'
p4557
S'DISTRIBUTE_FACTOR'
p4558
tp4559
a(S'Fixed'
p4560
S'DISTRIBUTE_FIXED'
p4561
tp4562
a(S'Uniform'
p4563
S'DISTRIBUTE_UNIFORM'
p4564
tp4565
a(S'Maximal'
p4566
S'DISTRIBUTE_MAXIMAL'
p4567
tp4568
assbsS'TPreprocessor_addMissing'
p4569
(i__main__
ClassDefinition
p4570
(dp4571
g4
I1
sg5
I01
sg6
g4569
sg7
S'TPreprocessor'
p4572
sg9
I00
sg10
(lp4573
sg12
(lp4574
(S'TVariableFloatMap'
p4575
S'proportions'
p4576
g4576
S'proportion of removed values for individual values'
p4577
I0
I0
I00
Ntp4578
a(S'float'
p4579
S'defaultProportion'
p4580
g4580
S'default proportion of removed values (for attributes not specified above)'
p4581
I0
I0
I01
Ntp4582
a(S'int'
p4583
S'specialType'
p4584
g4584
S'special value type (1=DC, 2=DK)'
p4585
I0
I0
I01
Ntp4586
a(S'TRandomGenerator'
p4587
S'randomGenerator'
p4588
g4588
S'random number generator'
p4589
I0
I0
I00
Ntp4590
asg26
(dp4591
sbsS'TRuleBeamCandidateSelector'
p4592
(i__main__
ClassDefinition
p4593
(dp4594
g4
I1
sg5
I01
sg6
g4592
sg7
S'TOrange'
p4595
sg9
I01
sg10
(lp4596
sg12
(lp4597
sg26
(dp4598
sbsS'TSubsetsGenerator_minMaxSize'
p4599
(i__main__
ClassDefinition
p4600
(dp4601
g4
I1
sg5
I01
sg6
g4599
sg7
S'TSubsetsGenerator'
p4602
sg9
I00
sg10
(lp4603
sg12
(lp4604
(S'int'
p4605
S'min'
p4606
g4606
S'minimal subset size'
p4607
I0
I0
I01
Ntp4608
a(S'int'
p4609
S'max'
p4610
g4610
S'maximal subset size'
p4611
I0
I0
I01
Ntp4612
ag186
asg26
(dp4613
sbsS'TMakeRandomIndicesN'
p4614
(i__main__
ClassDefinition
p4615
(dp4616
g4
I1
sg5
I01
sg6
g4614
sg7
S'TMakeRandomIndices'
p4617
sg9
I00
sg10
(lp4618
sg12
(lp4619
(S'TFloatList'
p4620
g2049
g2049
S'probabilities of indices (last is 1-sum(p))'
p4621
I0
I0
I00
Ntp4622
ag643
ag647
ag651
asg26
(dp4623
sbsS'TValueFilter_stringList'
p4624
(i__main__
ClassDefinition
p4625
(dp4626
g4
I1
sg5
I01
sg6
g4624
sg7
S'TValueFilter'
p4627
sg9
I00
sg10
(lp4628
sg12
(lp4629
(S'TStringList'
p4630
S'values'
p4631
g4631
S'accepted values'
p4632
I0
I0
I00
Ntp4633
a(S'bool'
p4634
S'caseSensitive'
p4635
g4635
S'if true (default), the comparison is case sensitive'
p4636
I0
I0
I01
Ntp4637
ag987
ag991
asg26
(dp4638
sbsS'TContingencyClass'
p4639
(i__main__
ClassDefinition
p4640
(dp4641
g4
I1
sg5
I01
sg6
g4639
sg7
S'TContingency'
p4642
sg9
I01
sg10
(lp4643
sg12
(lp4644
g1499
ag1503
ag1508
ag1512
ag1516
ag1520
asg26
(dp4645
sbsS'TAssociationClassifier'
p4646
(i__main__
ClassDefinition
p4647
(dp4648
g4
I1
sg5
I01
sg6
g4646
sg7
S'TClassifierFD'
p4649
sg9
I00
sg10
(lp4650
sg12
(lp4651
(S'TAssociationRules'
p4652
S'rules'
p4653
g4653
S'association rules'
p4654
I0
I0
I00
Ntp4655
a(S'int'
p4656
S'voteWeight'
p4657
g4657
S'vote weight (s=support, c=confidence, p=product)'
p4658
I0
I0
I01
Ntp4659
ag255
ag87
ag91
asg26
(dp4660
sbsS'TDomainDistributions'
p4661
(ipyprops
ClassDefinition
p4662
(dp4663
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p4664
sg7
g126
sg9
I0
sg10
(lp4665
sg12
(lp4666
sg26
(dp4667
sbsS'TSVMLearnerSparse'
p4668
(i__main__
ClassDefinition
p4669
(dp4670
g4
I1
sg5
I01
sg6
g4668
sg7
S'TSVMLearner'
p4671
sg9
I00
sg10
(lp4672
sg12
(lp4673
(S'bool'
p4674
S'useNonMeta'
p4675
g4675
S'include non meta attributes in the learning process'
p4676
I0
I0
I01
Ntp4677
ag3727
ag3732
ag3736
ag3740
ag3744
ag3748
ag3752
ag3755
ag3759
ag3762
ag3766
ag3770
ag3774
ag3778
ag102
asg26
(dp4678
sbsS'TDomain'
p4679
(i__main__
ClassDefinition
p4680
(dp4681
g4
I1
sg5
I01
sg6
g4679
sg7
S'TOrange'
p4682
sg9
I00
sg10
(lp4683
sg12
(lp4684
(S'TVariable'
p4685
S'classVar'
p4686
g4686
S'class variable'
p4687
I01
I0
I00
Ntp4688
a(S'TVarList'
p4689
S'attributes'
p4690
g4690
S'list of attributes, excluding the class'
p4691
I01
I0
I00
Ntp4692
a(S'TVarList'
p4693
S'variables'
p4694
g4694
S'list of attributes, including the class at the end of the list'
p4695
I01
I0
I00
Ntp4696
a(S'int'
p4697
S'version'
p4698
g4698
S"unique version identifier; it's changed each time a domain is changed"
p4699
I01
I0
I01
Ntp4700
asg26
(dp4701
sbsS'TTreePruner_SameMajority'
p4702
(i__main__
ClassDefinition
p4703
(dp4704
g4
I1
sg5
I01
sg6
g4702
sg7
S'TTreePruner'
p4705
sg9
I00
sg10
(lp4706
sg12
(lp4707
sg26
(dp4708
sbsS'TSubsetsGenerator_constant_iterator'
p4709
(i__main__
ClassDefinition
p4710
(dp4711
g4
I1
sg5
I01
sg6
g4709
sg7
S'TSubsetsGenerator_iterator'
p4712
sg9
I00
sg10
(lp4713
sg12
(lp4714
(S'TVarList'
p4715
S'constant'
p4716
g4716
S'a subset that is returned (once!)'
p4717
I0
I0
I00
Ntp4718
a(S'bool'
p4719
S'moreToCome'
p4720
g4720
g533
I0
I0
I01
Ntp4721
ag457
asg26
(dp4722
sbsS'TExampleDistConstructor'
p4723
(i__main__
ClassDefinition
p4724
(dp4725
g4
I1
sg5
I01
sg6
g4723
sg7
S'TOrange'
p4726
sg9
I01
sg10
(lp4727
sg12
(lp4728
sg26
(dp4729
sbsS'TIMByIMByRows'
p4730
(i__main__
ClassDefinition
p4731
(dp4732
g4
I1
sg5
I01
sg6
g4730
sg7
S'TIMConstructor'
p4733
sg9
I00
sg10
(lp4734
sg12
(lp4735
g1156
asg26
(dp4736
sbsS'TAlignmentList'
p4737
(ipyprops
ClassDefinition
p4738
(dp4739
g4
I0
sg5
I01
sg6
g4737
sg7
g126
sg9
I0
sg10
(lp4740
sg12
(lp4741
sg26
(dp4742
sbsS'TDiscrete2Continuous'
p4743
(i__main__
ClassDefinition
p4744
(dp4745
g4
I1
sg5
I01
sg6
g4743
sg7
S'TTransformValue'
p4746
sg9
I00
sg10
(lp4747
sg12
(lp4748
(S'int'
p4749
S'value'
p4750
g4750
S'target value'
p4751
I0
I0
I01
Ntp4752
a(S'bool'
p4753
S'invert'
p4754
g4754
S'give 1.0 to values not equal to the target'
p4755
I0
I0
I01
Ntp4756
a(S'bool'
p4757
S'zeroBased'
p4758
g4758
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p4759
I0
I0
I01
Ntp4760
ag729
asg26
(dp4761
sbsS'TDomainDiscretization'
p4762
(i__main__
ClassDefinition
p4763
(dp4764
g4
I1
sg5
I01
sg6
g4762
sg7
S'TOrange'
p4765
sg9
I00
sg10
(lp4766
sg12
(lp4767
(S'TDiscretization'
p4768
S'discretization'
p4769
g4769
S'discretization'
p4770
I0
I0
I00
Ntp4771
asg26
(dp4772
sbsS'TColumnAssessor_m'
p4773
(i__main__
ClassDefinition
p4774
(dp4775
g4
I1
sg5
I01
sg6
g4773
sg7
S'TColumnAssessor'
p4776
sg9
I00
sg10
(lp4777
sg12
(lp4778
(S'float'
p4779
g1126
g1126
S'm for m-estimate'
p4780
I0
I0
I01
Ntp4781
asg26
(dp4782
sbsS'TImputer_defaults'
p4783
(i__main__
ClassDefinition
p4784
(dp4785
g4
I1
sg5
I01
sg6
g4783
sg7
S'TImputer'
p4786
sg9
I00
sg10
(lp4787
sg12
(lp4788
(S'TExample'
p4789
S'defaults'
p4790
g4790
S'values that are to be inserted instead of missing ones'
p4791
I0
I0
I00
Ntp4792
asg26
(dp4793
sbsS'TContingency'
p4794
(i__main__
ClassDefinition
p4795
(dp4796
g4
I1
sg5
I01
sg6
g4794
sg7
S'TOrange'
p4797
sg9
I00
sg10
(lp4798
sg12
(lp4799
g1499
ag1503
ag1508
ag1512
ag1516
ag1520
asg26
(dp4800
sbsS'TImputer_Python'
p4801
(i__main__
ClassDefinition
p4802
(dp4803
g4
I1
sg5
I01
sg6
g4801
sg7
S'TImputer'
p4804
sg9
I00
sg10
(lp4805
sg12
(lp4806
sg26
(dp4807
sbsS'TClassifierGenerator'
p4808
(i__main__
ClassDefinition
p4809
(dp4810
g4
I1
sg5
I01
sg6
g4808
sg7
S'TExampleGenerator'
p4811
sg9
I00
sg10
(lp4812
sg12
(lp4813
(S'TClassifier'
p4814
S'classify'
p4815
g4815
S'classifier'
p4816
I0
I0
I00
Ntp4817
ag270
ag274
asg26
(dp4818
sbsS'TRuleDataStoppingCriteria_Python'
p4819
(i__main__
ClassDefinition
p4820
(dp4821
g4
I1
sg5
I01
sg6
g4819
sg7
S'TRuleDataStoppingCriteria'
p4822
sg9
I00
sg10
(lp4823
sg12
(lp4824
sg26
(dp4825
sbsS'TTreeDescender_UnknownToCommonSelector'
p4826
(i__main__
ClassDefinition
p4827
(dp4828
g4
I1
sg5
I01
sg6
g4826
sg7
g1432
sg9
I0
sg10
(lp4829
sg12
(lp4830
sg26
(dp4831
sbsS'THierarchicalCluster'
p4832
(i__main__
ClassDefinition
p4833
(dp4834
g4
I1
sg5
I01
sg6
g4832
sg7
S'TOrange'
p4835
sg9
I00
sg10
(lp4836
sg12
(lp4837
(S'THierarchicalClusterList'
p4838
S'branches'
p4839
g4839
S'subclusters'
p4840
I0
I0
I00
Ntp4841
a(S'float'
p4842
S'height'
p4843
g4843
S'height'
p4844
I0
I0
I01
Ntp4845
a(S'TIntList'
p4846
S'mapping'
p4847
g4847
S'indices to the list of all elements in the clustering'
p4848
I0
I0
I00
Ntp4849
a(S'int'
p4850
S'first'
p4851
g4851
S"the index into 'elements' to the first element of the cluster"
p4852
I0
I0
I01
Ntp4853
a(S'int'
p4854
S'last'
p4855
g4855
S"the index into 'elements' to the one after the last element of the cluster"
p4856
I0
I0
I01
Ntp4857
asg26
(dp4858
sbsS'TPreprocessIM'
p4859
(i__main__
ClassDefinition
p4860
(dp4861
g4
I1
sg5
I01
sg6
g4859
sg7
S'TOrange'
p4862
sg9
I01
sg10
(lp4863
sg12
(lp4864
sg26
(dp4865
sbsS'TLongList'
p4866
(ipyprops
ClassDefinition
p4867
(dp4868
g4
I0
sg5
I01
sg6
g4866
sg7
g126
sg9
I0
sg10
(lp4869
sg12
(lp4870
sg26
(dp4871
sbsS'TBasketFeeder'
p4872
(i__main__
ClassDefinition
p4873
(dp4874
g4
I1
sg5
I01
sg6
g4872
sg7
S'TOrange'
p4875
sg9
I00
sg10
(lp4876
sg12
(lp4877
(S'bool'
p4878
S'dontStore'
p4879
g4879
S'disables items storing'
p4880
I0
I0
I01
Ntp4881
a(S'bool'
p4882
S'dontCheckStored'
p4883
g4883
S'disables items lookup in the global cache'
p4884
I0
I0
I01
Ntp4885
a(S'TDomain'
p4886
S'domain'
p4887
g4887
S'domain where the meta attributes are stored'
p4888
I0
I0
I00
Ntp4889
a(S'TDomain'
p4890
S'sourceDomain'
p4891
g4891
S'domain with items that can be reused'
p4892
I0
I0
I00
Ntp4893
asg26
(dp4894
sbsS'TRuleEvaluator_Laplace'
p4895
(i__main__
ClassDefinition
p4896
(dp4897
g4
I1
sg5
I01
sg6
g4895
sg7
S'TRuleEvaluator'
p4898
sg9
I00
sg10
(lp4899
sg12
(lp4900
sg26
(dp4901
sbsS'TColumnAssessor_N'
p4902
(i__main__
ClassDefinition
p4903
(dp4904
g4
I1
sg5
I01
sg6
g4902
sg7
S'TColumnAssessor'
p4905
sg9
I00
sg10
(lp4906
sg12
(lp4907
sg26
(dp4908
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p4909
(i__main__
ClassDefinition
p4910
(dp4911
g4
I1
sg5
I01
sg6
g4909
sg7
S'TSubsetsGenerator_iterator'
p4912
sg9
I00
sg10
(lp4913
sg12
(lp4914
(S'int'
p4915
g2320
g2320
g533
I01
I0
I01
Ntp4916
a(S'int'
p4917
S'max'
p4918
g4918
S'maximal subset size'
p4919
I0
I0
I01
Ntp4920
a(S'bool'
p4921
S'moreToCome'
p4922
g4922
g533
I01
I0
I01
Ntp4923
ag457
asg26
(dp4924
sbsS'TRuleEvaluator_mEVC'
p4925
(i__main__
ClassDefinition
p4926
(dp4927
g4
I1
sg5
I01
sg6
g4925
sg7
S'TRuleEvaluator'
p4928
sg9
I00
sg10
(lp4929
sg12
(lp4930
(S'float'
p4931
g1126
g1126
S'Parameter m for m-estimate after EVC correction'
p4932
I0
I0
I01
Ntp4933
a(S'TEVDistGetter'
p4934
S'evDistGetter'
p4935
g4935
S'get EVC distribution for chi correction'
p4936
I0
I0
I00
Ntp4937
a(S'TVariable'
p4938
S'probVar'
p4939
g4939
S'probability coverage variable (meta usually)'
p4940
I0
I0
I00
Ntp4941
a(S'TRuleValidator'
p4942
S'validator'
p4943
g4943
S'rule validator for best rule'
p4944
I0
I0
I00
Ntp4945
a(S'int'
p4946
S'min_improved'
p4947
g4947
S'minimal number of improved examples'
p4948
I0
I0
I01
Ntp4949
a(S'float'
p4950
S'min_improved_perc'
p4951
g4951
S'minimal percentage of improved examples'
p4952
I0
I0
I01
Ntp4953
a(S'TRule'
p4954
S'bestRule'
p4955
g4955
S'best rule found and evaluated given conditions (min_improved, validator)'
p4956
I0
I0
I00
Ntp4957
a(S'float'
p4958
S'ruleAlpha'
p4959
g4959
S"minimal 'true' rule significance"
p4960
I0
I0
I01
Ntp4961
a(S'float'
p4962
S'attributeAlpha'
p4963
g4963
S'minimal attribute significance'
p4964
I0
I0
I01
Ntp4965
a(S'bool'
p4966
S'returnExpectedProb'
p4967
g4967
S'if true, evaluator returns expected class probability, if false, current class probability'
p4968
I0
I0
I01
Ntp4969
a(S'int'
p4970
S'optimismReduction'
p4971
g4971
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p4972
I0
I0
I01
Ntp4973
asg26
(dp4974
sbsS'TRuleStoppingCriteria'
p4975
(i__main__
ClassDefinition
p4976
(dp4977
g4
I1
sg5
I01
sg6
g4975
sg7
S'TOrange'
p4978
sg9
I01
sg10
(lp4979
sg12
(lp4980
sg26
(dp4981
sbsS'TExample'
p4982
(i__main__
ClassDefinition
p4983
(dp4984
g4
I1
sg5
I01
sg6
g4982
sg7
S'TOrange'
p4985
sg9
I00
sg10
(lp4986
sg12
(lp4987
g2424
ag2427
asg26
(dp4988
sbsS'TFixedDiscretization'
p4989
(i__main__
ClassDefinition
p4990
(dp4991
g4
I1
sg5
I01
sg6
g4989
sg7
S'TDiscretization'
p4992
sg9
I00
sg10
(lp4993
sg12
(lp4994
(S'TFloatList'
p4995
S'points'
p4996
g4996
S'cut-off points'
p4997
I0
I0
I00
Ntp4998
asg26
(dp4999
sbsS'TDomainContingency'
p5000
(ipyprops
ClassDefinition
p5001
(dp5002
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5003
sg7
g126
sg9
I0
sg10
(lp5004
sg12
(lp5005
sg26
(dp5006
sbsS'TPreprocessor_addGaussianClassNoise'
p5007
(i__main__
ClassDefinition
p5008
(dp5009
g4
I1
sg5
I01
sg6
g5007
sg7
S'TPreprocessor'
p5010
sg9
I00
sg10
(lp5011
sg12
(lp5012
(S'float'
p5013
S'deviation'
p5014
g5014
S'class deviation'
p5015
I0
I0
I01
Ntp5016
a(S'TRandomGenerator'
p5017
S'randomGenerator'
p5018
g5018
S'random number generator'
p5019
I0
I0
I00
Ntp5020
asg26
(dp5021
sbsS'TRuleDataStoppingCriteria'
p5022
(i__main__
ClassDefinition
p5023
(dp5024
g4
I1
sg5
I01
sg6
g5022
sg7
S'TOrange'
p5025
sg9
I01
sg10
(lp5026
sg12
(lp5027
sg26
(dp5028
sbsS'TPreprocessor_filter'
p5029
(i__main__
ClassDefinition
p5030
(dp5031
g4
I1
sg5
I01
sg6
g5029
sg7
S'TPreprocessor'
p5032
sg9
I00
sg10
(lp5033
sg12
(lp5034
(S'TFilter'
p5035
S'filter'
p5036
g5036
S'filter'
p5037
I0
I0
I00
Ntp5038
asg26
(dp5039
sbsS'TSOMNodeList'
p5040
(ipyprops
ClassDefinition
p5041
(dp5042
g4
I0
sg5
I01
sg6
g5040
sg7
g126
sg9
I0
sg10
(lp5043
sg12
(lp5044
sg26
(dp5045
sbsS'TExampleDistBySorting'
p5046
(i__main__
ClassDefinition
p5047
(dp5048
g4
I1
sg5
I01
sg6
g5046
sg7
S'TExampleDistConstructor'
p5049
sg9
I00
sg10
(lp5050
sg12
(lp5051
sg26
(dp5052
sbsS'TGraphAsMatrix'
p5053
(i__main__
ClassDefinition
p5054
(dp5055
g4
I1
sg5
I01
sg6
g5053
sg7
S'TGraph'
p5056
sg9
I00
sg10
(lp5057
sg12
(lp5058
g1381
ag1385
ag1389
asg26
(dp5059
sbsS'TIMClustering'
p5060
(i__main__
ClassDefinition
p5061
(dp5062
g4
I1
sg5
I01
sg6
g5060
sg7
S'TOrange'
p5063
sg9
I00
sg10
(lp5064
sg12
(lp5065
(S'TIM'
p5066
S'im'
p5067
g5067
S'incompatibilty matrix'
p5068
I0
I0
I00
Ntp5069
a(S'TIntList'
p5070
S'clusters'
p5071
g5071
S'cluster index for each matrix column'
p5072
I0
I0
I00
Ntp5073
a(S'int'
p5074
S'maxCluster'
p5075
g5075
S'the highest cluster index'
p5076
I0
I0
I01
Ntp5077
a(S'float'
p5078
S'quality'
p5079
g5079
S'cluster quality'
p5080
I0
I0
I01
Ntp5081
asg26
(dp5082
sbsS'TValueFilter_discrete'
p5083
(i__main__
ClassDefinition
p5084
(dp5085
g4
I1
sg5
I01
sg6
g5083
sg7
S'TValueFilter'
p5086
sg9
I00
sg10
(lp5087
sg12
(lp5088
(S'TValueList'
p5089
S'values'
p5090
g5090
S'accepted values'
p5091
I0
I0
I00
Ntp5092
a(S'bool'
p5093
S'negate'
p5094
g5094
S'negate'
p5095
I0
I0
I01
Ntp5096
ag987
ag991
asg26
(dp5097
sbsS'TComputeDomainContingency'
p5098
(i__main__
ClassDefinition
p5099
(dp5100
g4
I1
sg5
I01
sg6
g5098
sg7
S'TOrange'
p5101
sg9
I00
sg10
(lp5102
sg12
(lp5103
g25
asg26
(dp5104
sbsS'TAssociationRulesInducer'
p5105
(i__main__
ClassDefinition
p5106
(dp5107
g4
I1
sg5
I01
sg6
g5105
sg7
S'TOrange'
p5108
sg9
I00
sg10
(lp5109
sg12
(lp5110
(S'int'
p5111
S'maxItemSets'
p5112
g5112
S'maximal number of itemsets (increase if you want)'
p5113
I0
I0
I01
Ntp5114
a(S'float'
p5115
S'confidence'
p5116
g5116
S'required confidence'
p5117
I0
I0
I01
Ntp5118
a(S'float'
p5119
S'support'
p5120
g5120
S'required support'
p5121
I0
I0
I01
Ntp5122
a(S'bool'
p5123
S'classificationRules'
p5124
g5124
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5125
I0
I0
I01
Ntp5126
a(S'bool'
p5127
S'storeExamples'
p5128
g5128
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5129
I0
I0
I01
Ntp5130
asg26
(dp5131
sbsS'TTreeStopCriteria'
p5132
(i__main__
ClassDefinition
p5133
(dp5134
g4
I1
sg5
I01
sg6
g5132
sg7
S'TOrange'
p5135
sg9
I00
sg10
(lp5136
sg12
(lp5137
sg26
(dp5138
sbsS'TPreprocessor_addMissingClasses'
p5139
(i__main__
ClassDefinition
p5140
(dp5141
g4
I1
sg5
I01
sg6
g5139
sg7
S'TPreprocessor'
p5142
sg9
I00
sg10
(lp5143
sg12
(lp5144
(S'float'
p5145
S'proportion'
p5146
g5146
S'proportion of removed class values'
p5147
I0
I0
I01
Ntp5148
a(S'int'
p5149
S'specialType'
p5150
g5150
S'special value type (1=DC, 2=DK)'
p5151
I0
I0
I01
Ntp5152
a(S'TRandomGenerator'
p5153
S'randomGenerator'
p5154
g5154
S'random number generator'
p5155
I0
I0
I00
Ntp5156
asg26
(dp5157
sbsS'TLookupLearner'
p5158
(i__main__
ClassDefinition
p5159
(dp5160
g4
I1
sg5
I01
sg6
g5158
sg7
S'TLearner'
p5161
sg9
I00
sg10
(lp5162
sg12
(lp5163
(S'TLearner'
p5164
S'learnerForUnknown'
p5165
g5165
S'a learner for classifying cases not found in the table'
p5166
I0
I0
I00
Ntp5167
a(S'bool'
p5168
S'allowFastLookups'
p5169
g5169
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5170
I0
I0
I01
Ntp5171
a(S'int'
p5172
S'unknownsHandling'
p5173
g5173
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5174
I0
I0
I01
Ntp5175
ag102
asg26
(dp5176
sbsS'TBasketExampleGenerator'
p5177
(i__main__
ClassDefinition
p5178
(dp5179
g4
I1
sg5
I01
sg6
g5177
sg7
S'TFileExampleGenerator'
p5180
sg9
I00
sg10
(lp5181
sg12
(lp5182
g1465
ag1469
ag1473
ag270
ag274
asg26
(dp5183
sbsS'TRuleEvaluator_Entropy'
p5184
(i__main__
ClassDefinition
p5185
(dp5186
g4
I1
sg5
I01
sg6
g5184
sg7
S'TRuleEvaluator'
p5187
sg9
I00
sg10
(lp5188
sg12
(lp5189
sg26
(dp5190
sbsS'TMeasureAttribute_chiSquare'
p5191
(i__main__
ClassDefinition
p5192
(dp5193
g4
I1
sg5
I01
sg6
g5191
sg7
S'TMeasureAttributeFromProbabilities'
p5194
sg9
I00
sg10
(lp5195
sg12
(lp5196
(S'bool'
p5197
S'computeProbabilities'
p5198
g5198
g533
I0
I0
I01
Ntp5199
ag833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp5200
sbsS'TDistribution'
p5201
(i__main__
ClassDefinition
p5202
(dp5203
g4
I1
sg5
I01
sg6
g5201
sg7
S'TSomeValue'
p5204
sg9
I01
sg10
(lp5205
sg12
(lp5206
g1054
ag1058
ag1062
ag1066
ag1070
ag1074
ag1078
ag1082
asg26
(dp5207
sbsS'TExamplesDistance_DTW'
p5208
(i__main__
ClassDefinition
p5209
(dp5210
g4
I1
sg5
I01
sg6
g5208
sg7
S'TExamplesDistance_Normalized'
p5211
sg9
I00
sg10
(lp5212
sg12
(lp5213
(S'int'
p5214
S'dtwDistance'
p5215
g5215
S' distance measure between individual attributes (default: square of difference)'
p5216
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5217
tp5218
ag406
ag410
ag414
ag418
ag422
ag426
ag430
asg26
(dp5219
S'DistanceType'
p5220
(lp5221
(S'Euclidean'
p5222
I0
tp5223
a(S'Derivative'
p5224
I1
tp5225
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5226
(i__main__
ClassDefinition
p5227
(dp5228
g4
I1
sg5
I01
sg6
g5226
sg7
S'TTreeExampleSplitter'
p5229
sg9
I00
sg10
(lp5230
sg12
(lp5231
sg26
(dp5232
sbsS'TTreePruner_m'
p5233
(i__main__
ClassDefinition
p5234
(dp5235
g4
I1
sg5
I01
sg6
g5233
sg7
S'TTreePruner'
p5236
sg9
I00
sg10
(lp5237
sg12
(lp5238
(S'float'
p5239
g1126
g1126
S'm for m-estimate'
p5240
I0
I0
I01
Ntp5241
asg26
(dp5242
sbsS'TImputer'
p5243
(i__main__
ClassDefinition
p5244
(dp5245
g4
I1
sg5
I01
sg6
g5243
sg7
S'TOrange'
p5246
sg9
I01
sg10
(lp5247
sg12
(lp5248
sg26
(dp5249
sbsS'TExamplesDistanceConstructor_DTW'
p5250
(i__main__
ClassDefinition
p5251
(dp5252
g4
I1
sg5
I01
sg6
g5250
sg7
S'TExamplesDistanceConstructor_Normalized'
p5253
sg9
I00
sg10
(lp5254
sg12
(lp5255
(S'int'
p5256
S'dtwDistance'
p5257
g5257
S'distance measure between individual attributes (default: square of difference)'
p5258
I0
I0
I01
Ntp5259
ag1889
ag1893
ag1269
asg26
(dp5260
sbsS'TStopIMClusteringByAssessor_n'
p5261
(i__main__
ClassDefinition
p5262
(dp5263
g4
I1
sg5
I01
sg6
g5261
sg7
S'TStopIMClusteringByAssessor'
p5264
sg9
I00
sg10
(lp5265
sg12
(lp5266
(S'int'
p5267
g2346
g2346
S'number of clusters'
p5268
I0
I0
I01
Ntp5269
asg26
(dp5270
sbsS'TVarListList'
p5271
(ipyprops
ClassDefinition
p5272
(dp5273
g4
I0
sg5
I01
sg6
g5271
sg7
g126
sg9
I0
sg10
(lp5274
sg12
(lp5275
sg26
(dp5276
sbsS'TRandomGenerator'
p5277
(i__main__
ClassDefinition
p5278
(dp5279
g4
I1
sg5
I01
sg6
g5277
sg7
S'TOrange'
p5280
sg9
I00
sg10
(lp5281
sg12
(lp5282
(S'int'
p5283
S'initseed'
p5284
g5284
S'initial random seed'
p5285
I0
I0
I01
Ntp5286
a(S'int'
p5287
S'uses'
p5288
g5288
S'#times a number was returned'
p5289
I0
I0
I01
Ntp5290
asg26
(dp5291
sbsS'TThresholdCA'
p5292
(i__main__
ClassDefinition
p5293
(dp5294
g4
I1
sg5
I01
sg6
g5292
sg7
S'TOrange'
p5295
sg9
I00
sg10
(lp5296
sg12
(lp5297
sg26
(dp5298
sbsS'TFloatListList'
p5299
(ipyprops
ClassDefinition
p5300
(dp5301
g4
I0
sg5
I01
sg6
g5299
sg7
g126
sg9
I0
sg10
(lp5302
sg12
(lp5303
sg26
(dp5304
sbsS'TPreprocessor_imputeByLearner'
p5305
(i__main__
ClassDefinition
p5306
(dp5307
g4
I1
sg5
I01
sg6
g5305
sg7
S'TPreprocessor'
p5308
sg9
I00
sg10
(lp5309
sg12
(lp5310
(S'TLearner'
p5311
S'learner'
p5312
g5312
S'learner used for inducing a model for imputation'
p5313
I0
I0
I00
Ntp5314
asg26
(dp5315
sbsS'TRuleBeamRefiner_Python'
p5316
(i__main__
ClassDefinition
p5317
(dp5318
g4
I1
sg5
I01
sg6
g5316
sg7
S'TRuleBeamRefiner'
p5319
sg9
I00
sg10
(lp5320
sg12
(lp5321
sg26
(dp5322
sbsS'TClassifierFromVarFD'
p5323
(i__main__
ClassDefinition
p5324
(dp5325
g4
I1
sg5
I01
sg6
g5323
sg7
S'TClassifierFD'
p5326
sg9
I00
sg10
(lp5327
sg12
(lp5328
(S'int'
p5329
S'position'
p5330
g5330
S'position of the attribute in domain'
p5331
I0
I0
I01
Ntp5332
a(S'TTransformValue'
p5333
S'transformer'
p5334
g5334
S'transformer'
p5335
I0
I0
I00
Ntp5336
a(S'TDistribution'
p5337
S'distributionForUnknown'
p5338
g5338
S'distribution for unknown value'
p5339
I0
I0
I00
Ntp5340
a(S'bool'
p5341
S'transformUnknowns'
p5342
g5342
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p5343
I0
I0
I01
Ntp5344
ag255
ag87
ag91
asg26
(dp5345
sbsS'TImputer_model'
p5346
(i__main__
ClassDefinition
p5347
(dp5348
g4
I1
sg5
I01
sg6
g5346
sg7
S'TImputer'
p5349
sg9
I00
sg10
(lp5350
sg12
(lp5351
(S'TClassifierList'
p5352
S'models'
p5353
g5353
S'classifiers'
p5354
I0
I0
I00
Ntp5355
asg26
(dp5356
sbsS'TLogRegLearner'
p5357
(i__main__
ClassDefinition
p5358
(dp5359
g4
I1
sg5
I01
sg6
g5357
sg7
S'TLearner'
p5360
sg9
I00
sg10
(lp5361
sg12
(lp5362
(S'TLogRegFitter'
p5363
S'fitter'
p5364
g5364
S'fits beta coefficients and calculates beta errors.'
p5365
I0
I0
I00
Ntp5366
a(S'TImputerConstructor'
p5367
S'imputerConstructor'
p5368
g5368
S'if present, it constructs an imputer for unknown values'
p5369
I0
I0
I00
Ntp5370
a(S'TDomainContinuizer'
p5371
S'domainContinuizer'
p5372
g5372
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5373
I0
I0
I00
Ntp5374
ag102
asg26
(dp5375
sbsS'TPreprocessor_takeMissing'
p5376
(i__main__
ClassDefinition
p5377
(dp5378
g4
I1
sg5
I01
sg6
g5376
sg7
S'TPreprocessor'
p5379
sg9
I00
sg10
(lp5380
sg12
(lp5381
sg26
(dp5382
sbsS'TExamplesDistance_Euclidean'
p5383
(i__main__
ClassDefinition
p5384
(dp5385
g4
I1
sg5
I01
sg6
g5383
sg7
S'TExamplesDistance_Normalized'
p5386
sg9
I00
sg10
(lp5387
sg12
(lp5388
(S'TDomainDistributions'
p5389
S'distributions'
p5390
g5390
S'distributions (of discrete attributes only)'
p5391
I0
I0
I00
Ntp5392
a(S'TAttributedFloatList'
p5393
S'bothSpecialDist'
p5394
g5394
S'distances between discrete attributes if both values are unknown'
p5395
I0
I0
I00
Ntp5396
ag406
ag410
ag414
ag418
ag422
ag426
ag430
asg26
(dp5397
sbsS'TMeasureAttribute_IM'
p5398
(i__main__
ClassDefinition
p5399
(dp5400
g4
I1
sg5
I01
sg6
g5398
sg7
S'TMeasureAttribute'
p5401
sg9
I00
sg10
(lp5402
sg12
(lp5403
(S'TIMConstructor'
p5404
S'IMconstructor'
p5405
g5405
S'incompatibility matrix constructor'
p5406
I0
I0
I00
Ntp5407
a(S'TColumnAssessor'
p5408
S'columnAssessor'
p5409
g5409
S'column quality assessor'
p5410
I0
I0
I00
Ntp5411
ag847
ag851
ag855
ag859
asg26
(dp5412
sbsS'TFeatureByDistributions'
p5413
(i__main__
ClassDefinition
p5414
(dp5415
g4
I1
sg5
I01
sg6
g5413
sg7
S'TFeatureInducer'
p5416
sg9
I00
sg10
(lp5417
sg12
(lp5418
(S'TClustersFromDistributions'
p5419
S'clustersFromDistributions'
p5420
g5420
S'clustering algorithm'
p5421
I0
I0
I00
Ntp5422
a(S'int'
p5423
S'completion'
p5424
g5424
S' decides how to determine the class for points not covered by any cluster'
p5425
I0
I0
I01
S'FeatureByDistributions_Completion'
p5426
tp5427
asg26
(dp5428
S'Completion'
p5429
(lp5430
(S'NoCompletion'
p5431
S'completion_no'
p5432
tp5433
a(S'CompletionByDefault'
p5434
S'completion_default'
p5435
tp5436
a(S'CompletionByBayes'
p5437
S'completion_bayes'
p5438
tp5439
assbsS'TCostMatrix'
p5440
(i__main__
ClassDefinition
p5441
(dp5442
g4
I1
sg5
I01
sg6
g5440
sg7
S'TOrange'
p5443
sg9
I00
sg10
(lp5444
sg12
(lp5445
(S'TVariable'
p5446
S'classVar'
p5447
g5447
S'attribute to which the matrix applies'
p5448
I0
I0
I00
Ntp5449
a(S'int'
p5450
S'dimension'
p5451
g5451
S'dimension (should equal classVar.noOfValues())'
p5452
I01
I0
I01
Ntp5453
asg26
(dp5454
sbsS'TStopIMClusteringByAssessor_noProfit'
p5455
(i__main__
ClassDefinition
p5456
(dp5457
g4
I1
sg5
I01
sg6
g5455
sg7
S'TStopIMClusteringByAssessor'
p5458
sg9
I00
sg10
(lp5459
sg12
(lp5460
(S'float'
p5461
S'minProfitProportion'
p5462
g5462
S'minimal allowable profit proportion'
p5463
I0
I0
I01
Ntp5464
asg26
(dp5465
sbsS'TRemoveUnusedValues'
p5466
(i__main__
ClassDefinition
p5467
(dp5468
g4
I1
sg5
I01
sg6
g5466
sg7
S'TOrange'
p5469
sg9
I00
sg10
(lp5470
sg12
(lp5471
(S'bool'
p5472
S'removeOneValued'
p5473
g5473
S'if true (default is false), one valued attributes are also removed'
p5474
I0
I0
I01
Ntp5475
asg26
(dp5476
sbsS'TExamplesDistance_Normalized'
p5477
(i__main__
ClassDefinition
p5478
(dp5479
g4
I1
sg5
I01
sg6
g5477
sg7
S'TExamplesDistance'
p5480
sg9
I01
sg10
(lp5481
sg12
(lp5482
g406
ag410
ag414
ag418
ag422
ag426
ag430
asg26
(dp5483
sbsS'TC45TreeNode'
p5484
(i__main__
ClassDefinition
p5485
(dp5486
g4
I1
sg5
I01
sg6
g5484
sg7
S'TOrange'
p5487
sg9
I00
sg10
(lp5488
sg12
(lp5489
(S'int'
p5490
S'nodeType'
p5491
g5491
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p5492
I0
I0
I01
S'C45TreeNode_NodeType'
p5493
tp5494
a(S'TValue'
p5495
S'leaf'
p5496
g5496
S'most frequent class at this node'
p5497
I0
I0
I01
Ntp5498
a(S'float'
p5499
S'items'
p5500
g5500
S'no of items at this node'
p5501
I0
I0
I01
Ntp5502
a(S'TDiscDistribution'
p5503
S'classDist'
p5504
g5504
S'class distribution of items'
p5505
I0
I0
I00
Ntp5506
a(S'TVariable'
p5507
S'tested'
p5508
g5508
S'attribute referenced in test'
p5509
I0
I0
I00
Ntp5510
a(S'float'
p5511
S'cut'
p5512
g5512
S'threshold for continuous attribute'
p5513
I0
I0
I01
Ntp5514
a(S'float'
p5515
S'lower'
p5516
g5516
S'lower limit of soft threshold'
p5517
I0
I0
I01
Ntp5518
a(S'float'
p5519
S'upper'
p5520
g5520
S'upper limit of soft threshold'
p5521
I0
I0
I01
Ntp5522
a(S'TIntList'
p5523
S'mapping'
p5524
g5524
S'mapping for discrete value'
p5525
I0
I0
I00
Ntp5526
a(S'TC45TreeNodeList'
p5527
S'branch'
p5528
g5528
S'branch[x] = (sub)tree for outcome x */'
p5529
I0
I0
I00
Ntp5530
asg26
(dp5531
S'NodeType'
p5532
(lp5533
(S'Leaf'
p5534
S'0'
p5535
tp5536
a(S'Branch'
p5537
I1
tp5538
a(S'Cut'
p5539
I2
tp5540
a(S'Subset'
p5541
I3
tp5542
assbsS'TDistributionAssessor_Measure'
p5543
(i__main__
ClassDefinition
p5544
(dp5545
g4
I1
sg5
I01
sg6
g5543
sg7
S'TDistributionAssessor'
p5546
sg9
I00
sg10
(lp5547
sg12
(lp5548
(S'TMeasureAttribute'
p5549
S'measure'
p5550
g5550
S'attribute quality measure'
p5551
I0
I0
I00
Ntp5552
asg26
(dp5553
sbsS'TIMConstructor'
p5554
(i__main__
ClassDefinition
p5555
(dp5556
g4
I1
sg5
I01
sg6
g5554
sg7
S'TOrange'
p5557
sg9
I01
sg10
(lp5558
sg12
(lp5559
g1156
asg26
(dp5560
sbsS'TRuleFinder_Python'
p5561
(i__main__
ClassDefinition
p5562
(dp5563
g4
I1
sg5
I01
sg6
g5561
sg7
S'TRuleFinder'
p5564
sg9
I00
sg10
(lp5565
sg12
(lp5566
g3596
ag3599
asg26
(dp5567
sbsS'TTabDelimExampleGenerator'
p5568
(i__main__
ClassDefinition
p5569
(dp5570
g4
I1
sg5
I01
sg6
g5568
sg7
S'TFileExampleGenerator'
p5571
sg9
I00
sg10
(lp5572
sg12
(lp5573
(S'TIntList'
p5574
S'attributeTypes'
p5575
g5575
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p5576
I0
I0
I00
Ntp5577
a(S'int'
p5578
S'classPos'
p5579
g5579
S'position of the class attribute'
p5580
I0
I0
I01
Ntp5581
a(S'int'
p5582
S'basketPos'
p5583
g5583
S'position of the (virtual) basket attribute'
p5584
I0
I0
I01
Ntp5585
a(S'int'
p5586
S'headerLines'
p5587
g5587
S'number of header lines (3 for .tab, 1 for .txt)'
p5588
I0
I0
I01
Ntp5589
a(S'bool'
p5590
S'csv'
p5591
g5591
S"also allow ',' as a separator"
p5592
I0
I0
I01
Ntp5593
a(S'TBasketFeeder'
p5594
S'basketFeeder'
p5595
g5595
S'takes care of inserting the meta attributes from the basket if need be'
p5596
I0
I0
I00
Ntp5597
ag1465
ag1469
ag1473
ag270
ag274
asg26
(dp5598
sbsS'TRandomClassifier'
p5599
(i__main__
ClassDefinition
p5600
(dp5601
g4
I1
sg5
I01
sg6
g5599
sg7
S'TClassifier'
p5602
sg9
I00
sg10
(lp5603
sg12
(lp5604
(S'TDistribution'
p5605
S'probabilities'
p5606
g5606
S'probabilities of predictions'
p5607
I0
I0
I00
Ntp5608
ag87
ag91
asg26
(dp5609
sbsS'TkNNLearner'
p5610
(i__main__
ClassDefinition
p5611
(dp5612
g4
I1
sg5
I01
sg6
g5610
sg7
S'TLearner'
p5613
sg9
I00
sg10
(lp5614
sg12
(lp5615
(S'float'
p5616
g1122
g1122
S'number of neighbours (0 for sqrt of #examples)'
p5617
I0
I0
I01
Ntp5618
a(S'bool'
p5619
S'rankWeight'
p5620
g5620
S'enable weighting by ranks'
p5621
I0
I0
I01
Ntp5622
a(S'TExamplesDistanceConstructor'
p5623
S'distanceConstructor'
p5624
g5624
S'metrics'
p5625
I0
I0
I00
Ntp5626
ag102
asg26
(dp5627
sbsS'TTreeDescender_UnknownToNode'
p5628
(i__main__
ClassDefinition
p5629
(dp5630
g4
I1
sg5
I01
sg6
g5628
sg7
g1432
sg9
I0
sg10
(lp5631
sg12
(lp5632
sg26
(dp5633
sbsS'TIntFloatList'
p5634
(ipyprops
ClassDefinition
p5635
(dp5636
g4
I0
sg5
I01
sg6
g5634
sg7
g126
sg9
I0
sg10
(lp5637
sg12
(lp5638
sg26
(dp5639
sbsS'TDistributionAssessor_mf'
p5640
(i__main__
ClassDefinition
p5641
(dp5642
g4
I1
sg5
I01
sg6
g5640
sg7
S'TDistributionAssessor'
p5643
sg9
I00
sg10
(lp5644
sg12
(lp5645
(S'float'
p5646
g1126
g1126
S'm for m-estimate'
p5647
I0
I0
I01
Ntp5648
asg26
(dp5649
sbsS'TExampleClusters'
p5650
(i__main__
ClassDefinition
p5651
(dp5652
g4
I1
sg5
I01
sg6
g5650
sg7
S'TGeneralExampleClustering'
p5653
sg9
I00
sg10
(lp5654
sg12
(lp5655
(S'TExampleCluster'
p5656
S'root'
p5657
g5657
S'root of cluster hierarchy'
p5658
I0
I0
I00
Ntp5659
a(S'float'
p5660
S'quality'
p5661
g5661
S"'quality' of clustering"
p5662
I0
I0
I01
Ntp5663
asg26
(dp5664
sbsS'TExamplesDistance_Python'
p5665
(i__main__
ClassDefinition
p5666
(dp5667
g4
I1
sg5
I01
sg6
g5665
sg7
S'TExamplesDistance'
p5668
sg9
I00
sg10
(lp5669
sg12
(lp5670
sg26
(dp5671
sbsS'TCostLearner'
p5672
(i__main__
ClassDefinition
p5673
(dp5674
g4
I1
sg5
I01
sg6
g5672
sg7
S'TMajorityLearner'
p5675
sg9
I00
sg10
(lp5676
sg12
(lp5677
(S'TCostMatrix'
p5678
S'cost'
p5679
g5679
S'cost matrix'
p5680
I0
I0
I00
Ntp5681
ag3711
ag3715
ag102
asg26
(dp5682
sbsS'TEFMDataDescription'
p5683
(i__main__
ClassDefinition
p5684
(dp5685
g4
I1
sg5
I01
sg6
g5683
sg7
S'TOrange'
p5686
sg9
I00
sg10
(lp5687
S'domainDistributions'
p5688
asg12
(lp5689
(S'TDomain'
p5690
S'domain'
p5691
g5691
S'domain'
p5692
I01
I0
I00
Ntp5693
asg26
(dp5694
sbsS'TClassifierFD'
p5695
(i__main__
ClassDefinition
p5696
(dp5697
g4
I1
sg5
I01
sg6
g5695
sg7
S'TClassifier'
p5698
sg9
I00
sg10
(lp5699
sg12
(lp5700
g255
ag87
ag91
asg26
(dp5701
sbsS'TPreprocessor_drop'
p5702
(i__main__
ClassDefinition
p5703
(dp5704
g4
I1
sg5
I01
sg6
g5702
sg7
S'TPreprocessor'
p5705
sg9
I00
sg10
(lp5706
sg12
(lp5707
(S'TVariableFilterMap'
p5708
S'values'
p5709
g5709
S'variable-filter pairs'
p5710
I0
I0
I00
Ntp5711
a(S'bool'
p5712
S'conjunction'
p5713
g5713
S'decides whether to take conjunction or disjunction of values'
p5714
I0
I0
I01
Ntp5715
asg26
(dp5716
sbsS'TTreeDescender_UnknownToCommonBranch'
p5717
(i__main__
ClassDefinition
p5718
(dp5719
g4
I1
sg5
I01
sg6
g5717
sg7
g1432
sg9
I0
sg10
(lp5720
sg12
(lp5721
sg26
(dp5722
sbsS'TPreprocessor_addNoise'
p5723
(i__main__
ClassDefinition
p5724
(dp5725
g4
I1
sg5
I01
sg6
g5723
sg7
S'TPreprocessor'
p5726
sg9
I00
sg10
(lp5727
sg12
(lp5728
(S'TVariableFloatMap'
p5729
S'proportions'
p5730
g5730
S'proportion of changed values for individual attributes'
p5731
I0
I0
I00
Ntp5732
a(S'float'
p5733
S'defaultProportion'
p5734
g5734
S'default proportion of changed values (for attributes not specified above)'
p5735
I0
I0
I01
Ntp5736
a(S'TRandomGenerator'
p5737
S'randomGenerator'
p5738
g5738
S'random number generator'
p5739
I0
I0
I00
Ntp5740
asg26
(dp5741
sbsS'TStopIMClusteringByAssessor_binary'
p5742
(i__main__
ClassDefinition
p5743
(dp5744
g4
I1
sg5
I01
sg6
g5742
sg7
S'TStopIMClusteringByAssessor'
p5745
sg9
I00
sg10
(lp5746
sg12
(lp5747
sg26
(dp5748
sbsS'TColumnAssessor_mf'
p5749
(i__main__
ClassDefinition
p5750
(dp5751
g4
I1
sg5
I01
sg6
g5749
sg7
S'TColumnAssessor'
p5752
sg9
I00
sg10
(lp5753
sg12
(lp5754
(S'float'
p5755
g1126
g1126
S'm for m-estimate'
p5756
I0
I0
I01
Ntp5757
asg26
(dp5758
sbsS'TExamplesDistanceConstructor'
p5759
(i__main__
ClassDefinition
p5760
(dp5761
g4
I1
sg5
I01
sg6
g5759
sg7
S'TOrange'
p5762
sg9
I01
sg10
(lp5763
sg12
(lp5764
g1269
asg26
(dp5765
sbsS'TSubsetsGenerator'
p5766
(i__main__
ClassDefinition
p5767
(dp5768
g4
I1
sg5
I01
sg6
g5766
sg7
S'TOrange'
p5769
sg9
I01
sg10
(lp5770
sg12
(lp5771
g186
asg26
(dp5772
sbsS'TPreprocessor_addCensorWeight'
p5773
(i__main__
ClassDefinition
p5774
(dp5775
g4
I1
sg5
I01
sg6
g5773
sg7
S'TPreprocessor'
p5776
sg9
I00
sg10
(lp5777
sg12
(lp5778
(S'TVariable'
p5779
S'outcomeVar'
p5780
g5780
S'outcome variable'
p5781
I0
I0
I00
Ntp5782
a(S'TVariable'
p5783
S'timeVar'
p5784
g5784
S'time variable'
p5785
I0
I0
I00
Ntp5786
a(S'TValue'
p5787
S'eventValue'
p5788
g5788
S'event (fail) value'
p5789
I0
I0
I01
Ntp5790
a(S'int'
p5791
S'method'
p5792
g5792
S' weighting method'
p5793
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p5794
tp5795
a(S'float'
p5796
S'maxTime'
p5797
g5797
S'maximal time'
p5798
I0
I0
I01
Ntp5799
a(S'bool'
p5800
S'addComplementary'
p5801
g5801
S'if true (default is false), complementary examples are added for censored examples'
p5802
I0
I0
I01
Ntp5803
asg26
(dp5804
S'Method'
p5805
(lp5806
(S'Linear'
p5807
S'TPreprocessor_addCensorWeight::linear'
p5808
tp5809
a(S'KM'
p5810
S'TPreprocessor_addCensorWeight::km'
p5811
tp5812
a(S'Bayes'
p5813
S'TPreprocessor_addCensorWeight::bayes'
p5814
tp5815
assbsS'TRuleBeamCandidateSelector_Python'
p5816
(i__main__
ClassDefinition
p5817
(dp5818
g4
I1
sg5
I01
sg6
g5816
sg7
S'TRuleBeamCandidateSelector'
p5819
sg9
I00
sg10
(lp5820
sg12
(lp5821
sg26
(dp5822
sbsS'TIntList'
p5823
(ipyprops
ClassDefinition
p5824
(dp5825
g4
I0
sg5
I01
sg6
g5823
sg7
g126
sg9
I0
sg10
(lp5826
sg12
(lp5827
sg26
(dp5828
sbsS'TEntropyDiscretization'
p5829
(i__main__
ClassDefinition
p5830
(dp5831
g4
I1
sg5
I01
sg6
g5829
sg7
S'TDiscretization'
p5832
sg9
I00
sg10
(lp5833
sg12
(lp5834
(S'int'
p5835
S'maxNumberOfIntervals'
p5836
g5836
S'maximal number of intervals; default = 0 (no limits)'
p5837
I0
I0
I01
Ntp5838
a(S'bool'
p5839
S'forceAttribute'
p5840
g5840
S'minimal number of intervals; default = 0 (no limits)'
p5841
I0
I0
I01
Ntp5842
asg26
(dp5843
sbsS'TIMBySorting'
p5844
(i__main__
ClassDefinition
p5845
(dp5846
g4
I1
sg5
I01
sg6
g5844
sg7
S'TIMConstructor'
p5847
sg9
I00
sg10
(lp5848
sg12
(lp5849
g1156
asg26
(dp5850
sbsS'TImputerConstructor_asValue'
p5851
(i__main__
ClassDefinition
p5852
(dp5853
g4
I1
sg5
I01
sg6
g5851
sg7
S'TImputerConstructor'
p5854
sg9
I00
sg10
(lp5855
sg12
(lp5856
g146
asg26
(dp5857
sbsS'TGaussianDistribution'
p5858
(i__main__
ClassDefinition
p5859
(dp5860
g4
I1
sg5
I01
sg6
g5858
sg7
S'TDistribution'
p5861
sg9
I00
sg10
(lp5862
sg12
(lp5863
(S'float'
p5864
S'mean'
p5865
g5865
S'mu'
p5866
I0
I0
I01
Ntp5867
a(S'float'
p5868
S'sigma'
p5869
g5869
S'sigma'
p5870
I0
I0
I01
Ntp5871
ag1054
ag1058
ag1062
ag1066
ag1070
ag1074
ag1078
ag1082
asg26
(dp5872
sbsS'TExampleDistVector'
p5873
(i__main__
ClassDefinition
p5874
(dp5875
g4
I1
sg5
I01
sg6
g5873
sg7
S'TOrange'
p5876
sg9
I00
sg10
(lp5877
sg12
(lp5878
sg26
(dp5879
sbsS'TConditionalProbabilityEstimatorList'
p5880
(ipyprops
ClassDefinition
p5881
(dp5882
g4
I0
sg5
I01
sg6
g5880
sg7
g126
sg9
I0
sg10
(lp5883
sg12
(lp5884
sg26
(dp5885
sbsS'TRuleBeamFilter_Width'
p5886
(i__main__
ClassDefinition
p5887
(dp5888
g4
I1
sg5
I01
sg6
g5886
sg7
S'TRuleBeamFilter'
p5889
sg9
I00
sg10
(lp5890
sg12
(lp5891
(S'int'
p5892
S'width'
p5893
g5893
g533
I0
I0
I01
Ntp5894
asg26
(dp5895
sbsS'TProbabilityEstimator'
p5896
(i__main__
ClassDefinition
p5897
(dp5898
g4
I1
sg5
I01
sg6
g5896
sg7
S'TOrange'
p5899
sg9
I01
sg10
(lp5900
sg12
(lp5901
g1411
ag1415
asg26
(dp5902
sbsS'TMeasureAttribute_info'
p5903
(i__main__
ClassDefinition
p5904
(dp5905
g4
I1
sg5
I01
sg6
g5903
sg7
S'TMeasureAttributeFromProbabilities'
p5906
sg9
I00
sg10
(lp5907
sg12
(lp5908
g833
ag837
ag842
ag847
ag851
ag855
ag859
asg26
(dp5909
sbsS'TImputerConstructor_model'
p5910
(i__main__
ClassDefinition
p5911
(dp5912
g4
I1
sg5
I01
sg6
g5910
sg7
S'TImputerConstructor'
p5913
sg9
I00
sg10
(lp5914
sg12
(lp5915
(S'TLearner'
p5916
S'learnerDiscrete'
p5917
g5917
S'learner for discrete attributes'
p5918
I0
I0
I00
Ntp5919
a(S'TLearner'
p5920
S'learnerContinuous'
p5921
g5921
S'learner for continuous attributes'
p5922
I0
I0
I00
Ntp5923
a(S'bool'
p5924
S'useClass'
p5925
g5925
S'tells whether to use class value in imputation (default: false)'
p5926
I0
I0
I01
Ntp5927
ag146
asg26
(dp5928
sbsS'TFindNearestConstructor_BruteForce'
p5929
(i__main__
ClassDefinition
p5930
(dp5931
g4
I1
sg5
I01
sg6
g5929
sg7
S'TFindNearestConstructor'
p5932
sg9
I00
sg10
(lp5933
sg12
(lp5934
g1688
ag1692
asg26
(dp5935
sbsS'TImputerConstructor'
p5936
(i__main__
ClassDefinition
p5937
(dp5938
g4
I1
sg5
I01
sg6
g5936
sg7
S'TOrange'
p5939
sg9
I01
sg10
(lp5940
sg12
(lp5941
g146
asg26
(dp5942
sbsS'TPreprocessor'
p5943
(i__main__
ClassDefinition
p5944
(dp5945
g4
I1
sg5
I01
sg6
g5943
sg7
S'TOrange'
p5946
sg9
I01
sg10
(lp5947
sg12
(lp5948
sg26
(dp5949
sbsS'TDiscretizer'
p5950
(i__main__
ClassDefinition
p5951
(dp5952
g4
I1
sg5
I01
sg6
g5950
sg7
S'TTransformValue'
p5953
sg9
I01
sg10
(lp5954
sg12
(lp5955
g729
asg26
(dp5956
sbsS'TIMByRowsPreprocessor'
p5957
(i__main__
ClassDefinition
p5958
(dp5959
g4
I1
sg5
I01
sg6
g5957
sg7
S'TOrange'
p5960
sg9
I01
sg10
(lp5961
sg12
(lp5962
sg26
(dp5963
sbsS'TTreeStopCriteria_common'
p5964
(i__main__
ClassDefinition
p5965
(dp5966
g4
I1
sg5
I01
sg6
g5964
sg7
S'TTreeStopCriteria'
p5967
sg9
I00
sg10
(lp5968
sg12
(lp5969
(S'float'
p5970
S'maxMajority'
p5971
g5971
S'a maximal proportion of majority class for division to continue'
p5972
I0
I0
I01
Ntp5973
a(S'float'
p5974
S'minExamples'
p5975
g5975
S'a minimal number of examples for division to continue'
p5976
I0
I0
I01
Ntp5977
asg26
(dp5978
sbsS'TTreeStopCriteria_Python'
p5979
(i__main__
ClassDefinition
p5980
(dp5981
g4
I1
sg5
I01
sg6
g5979
sg7
S'TTreeStopCriteria'
p5982
sg9
I00
sg10
(lp5983
sg12
(lp5984
sg26
(dp5985
sbsS'TExamplesDistanceConstructor_Maximal'
p5986
(i__main__
ClassDefinition
p5987
(dp5988
g4
I1
sg5
I01
sg6
g5986
sg7
S'TExamplesDistanceConstructor_Normalized'
p5989
sg9
I00
sg10
(lp5990
sg12
(lp5991
g1889
ag1893
ag1269
asg26
(dp5992
sbsS'TIGByIM'
p5993
(i__main__
ClassDefinition
p5994
(dp5995
g4
I1
sg5
I01
sg6
g5993
sg7
S'TIGConstructor'
p5996
sg9
I00
sg10
(lp5997
sg12
(lp5998
(S'TIMConstructor'
p5999
S'IMconstructor'
p6000
g6000
S'IM constructor'
p6001
I0
I0
I00
Ntp6002
asg26
(dp6003
sbsS'TRuleEvaluator_LRS'
p6004
(i__main__
ClassDefinition
p6005
(dp6006
g4
I1
sg5
I01
sg6
g6004
sg7
S'TRuleEvaluator'
p6007
sg9
I00
sg10
(lp6008
sg12
(lp6009
(S'TRuleList'
p6010
S'rules'
p6011
g6011
g533
I0
I0
I00
Ntp6012
a(S'bool'
p6013
S'storeRules'
p6014
g6014
g533
I0
I0
I01
Ntp6015
asg26
(dp6016
sbs.