/* This file was generated by pyxtract 
   Do not edit.*/

extern IMPORT_DLL TOrangeType PyOrOrange_Type;


/* -------------- NetworkOptimization --------------*/

PyMethodDef NetworkOptimization_methods[] = {
     {"circularCrossingReduction", (binaryfunc)NetworkOptimization_circularCrossingReduction, METH_VARARGS, "() -> None"},
     {"circularOriginal", (binaryfunc)NetworkOptimization_circularOriginal, METH_VARARGS, "() -> None"},
     {"circularRandom", (binaryfunc)NetworkOptimization_circularRandom, METH_VARARGS, "() -> None"},
     {"closestVertex", (binaryfunc)NetworkOptimization_closestVertex, METH_VARARGS, "(x, y) -> Ndx"},
     {"fruchtermanReingold", (binaryfunc)NetworkOptimization_fruchtermanReingold, METH_VARARGS, "(steps, temperature, coolFactor, hiddenNodes, weighted) -> temperature"},
     {"getVertexPowers", (binaryfunc)NetworkOptimization_getVertexPowers, METH_NOARGS, "() -> list"},
     {"getVerticesInRect", (binaryfunc)NetworkOptimization_getVerticesInRect, METH_VARARGS, "(x1, y1, x2, y2) -> list of vertices"},
     {"radialFruchtermanReingold", (binaryfunc)NetworkOptimization_radialFruchtermanReingold, METH_VARARGS, "(center, steps, temperature) -> temperature"},
     {"random", (binaryfunc)NetworkOptimization_random, METH_VARARGS, "() -> None"},
     {"setGraph", (binaryfunc)NetworkOptimization_setGraph, METH_VARARGS, "(Graph) -> None"},
     {"smoothFruchtermanReingold", (binaryfunc)NetworkOptimization_smoothFruchtermanReingold, METH_VARARGS, "(center, steps, temperature, coolFactor) -> temperature"},
     {NULL, NULL}
};



PyTypeObject PyOrNetworkOptimization_Type_inh = {
  PyObject_HEAD_INIT((_typeobject *)&PyType_Type)
  0,
  "orangeom.NetworkOptimization",
  sizeof(TPyOrange), 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_RICHCOMPARE, /* tp_flags */
  "(Graph) -> None",                                 /* tp_doc */
  0, 0, 0, 0, 0, 0,
  NetworkOptimization_methods,                       /* tp_methods */
  0, 0,
  (_typeobject *)&PyOrOrange_Type,                   /* tp_base */
  0, 0, 0, 0, 0,
  PyType_GenericAlloc,                               /* tp_alloc */
  (newfunc)NetworkOptimization_new,                  /* tp_new */
  _PyObject_GC_Del,                                  /* tp_free */
  0, 0, 0, 0, 0, 0,
};

int cc_func_NetworkOptimization(PyObject *obj, void *ptr) { if (!PyOrNetworkOptimization_Check(obj)) return 0;      *(GCPtr<TNetworkOptimization> *)(ptr) = PyOrange_AsNetworkOptimization(obj); return 1; }
int ccn_func_NetworkOptimization(PyObject *obj, void *ptr) { if (obj == Py_None) { *(GCPtr<TNetworkOptimization> *)(ptr) = GCPtr<TNetworkOptimization>(); return 1; }      if (!PyOrNetworkOptimization_Check(obj)) return 0;      *(GCPtr<TNetworkOptimization> *)(ptr) = PyOrange_AsNetworkOptimization(obj); return 1; }


ORANGEOM_API TOrangeType PyOrNetworkOptimization_Type (PyOrNetworkOptimization_Type_inh, typeid(TNetworkOptimization), 0, cc_NetworkOptimization, ccn_NetworkOptimization, NULL, false, NULL, NULL);



