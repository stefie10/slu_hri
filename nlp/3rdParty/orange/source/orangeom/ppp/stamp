(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
g15
S'constructs a classifier for imputation of discrete values'
p16
I0
I0
I00
Ntp17
a(S'TLearner'
p18
S'learnerForContinuous'
p19
g19
S'constructs a classifier for imputation of continuous values'
p20
I0
I0
I00
Ntp21
a(S'bool'
p22
S'classIsOuter'
p23
g23
S'tells whether the class is the outer variable in contingencies'
p24
I0
I0
I01
Ntp25
asS'constants'
p26
(dp27
sbsS'TRuleDataStoppingCriteria_NoPositives'
p28
(i__main__
ClassDefinition
p29
(dp30
g4
I1
sg5
I01
sg6
g28
sg7
S'TRuleDataStoppingCriteria'
p31
sg9
I00
sg10
(lp32
sg12
(lp33
sg26
(dp34
sbsS'TExampleCluster'
p35
(i__main__
ClassDefinition
p36
(dp37
g4
I1
sg5
I01
sg6
g35
sg7
S'TOrange'
p38
sg9
I00
sg10
(lp39
sg12
(lp40
(S'TExampleCluster'
p41
S'left'
p42
g42
S"'left' cluster"
p43
I0
I0
I00
Ntp44
a(S'TExampleCluster'
p45
S'right'
p46
g46
S"'right' cluster"
p47
I0
I0
I00
Ntp48
a(S'float'
p49
S'distance'
p50
g50
S'distance between the two clusters (not defined for leaves)'
p51
I0
I0
I01
Ntp52
a(S'TExample'
p53
S'centroid'
p54
g54
S"cluster's centroid (always defined for leaves)"
p55
I0
I0
I00
Ntp56
asg26
(dp57
sbsS'TClassifierByLookupTableN'
p58
(i__main__
ClassDefinition
p59
(dp60
g4
I1
sg5
I01
sg6
g58
sg7
S'TClassifierByLookupTable'
p61
sg9
I00
sg10
(lp62
sg12
(lp63
(S'TVarList'
p64
S'variables'
p65
g65
S'attributes'
p66
I01
I0
I00
Ntp67
a(S'TIntList'
p68
S'noOfValues'
p69
g69
S'number of values for each attribute'
p70
I01
I0
I00
Ntp71
a(S'TEFMDataDescription'
p72
S'dataDescription'
p73
g73
S'data description'
p74
I0
I0
I00
Ntp75
a(S'TValueList'
p76
S'lookupTable'
p77
g77
S'a list of class values, one for each attribute value'
p78
I01
I0
I00
Ntp79
a(S'TDistributionList'
p80
S'distributions'
p81
g81
S'a list of class distributions, one for each attribute value'
p82
I01
I0
I00
Ntp83
a(S'TVariable'
p84
S'classVar'
p85
g85
S'class variable'
p86
I0
I0
I00
Ntp87
a(S'bool'
p88
S'computesProbabilities'
p89
g89
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p90
I0
I0
I01
Ntp91
asg26
(dp92
sbsS'TLearner_Python'
p93
(i__main__
ClassDefinition
p94
(dp95
g4
I1
sg5
I01
sg6
g93
sg7
S'TLearner'
p96
sg9
I00
sg10
(lp97
sg12
(lp98
(S'int'
p99
S'needs'
p100
g100
S'the kind of data that learner needs'
p101
I01
I0
I01
Ntp102
asg26
(dp103
sbsS'TSammonStress'
p104
(i__main__
ClassDefinition
p105
(dp106
g4
I1
sg5
I0
sg6
g104
sg7
S'TStressFunc'
p107
sg9
I00
sg10
(lp108
sg12
(lp109
sg26
(dp110
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p111
(i__main__
ClassDefinition
p112
(dp113
g4
I1
sg5
I01
sg6
g111
sg7
S'TConditionalProbabilityEstimator'
p114
sg9
I00
sg10
(lp115
sg12
(lp116
(S'TContingency'
p117
S'probabilities'
p118
g118
S'Contingency that stores conditional probabilities'
p119
I0
I0
I00
Ntp120
a(S'bool'
p121
S'supportsDiscrete'
p122
g122
S'can estimate probabilities of discrete attributes'
p123
I01
I0
I01
Ntp124
a(S'bool'
p125
S'supportsContinuous'
p126
g126
S'can estimate probabilities of continuous attributes'
p127
I01
I0
I01
Ntp128
asg26
(dp129
sbsS'THeatmapList'
p130
(ipyprops
ClassDefinition
p131
(dp132
g4
I0
sg5
I01
sg6
g130
sg7
S'TOrange'
p133
sg9
I0
sg10
(lp134
sg12
(lp135
sg26
(dp136
sbsS'TFeatureInducer'
p137
(i__main__
ClassDefinition
p138
(dp139
g4
I1
sg5
I01
sg6
g137
sg7
S'TOrange'
p140
sg9
I01
sg10
(lp141
sg12
(lp142
sg26
(dp143
sbsS'TImputerConstruct_Python'
p144
(i__main__
ClassDefinition
p145
(dp146
g4
I1
sg5
I01
sg6
g144
sg7
S'TImputerConstructor'
p147
sg9
I00
sg10
(lp148
sg12
(lp149
(S'bool'
p150
S'imputeClass'
p151
g151
S'tells whether to impute the class value (default: true)'
p152
I0
I0
I01
Ntp153
asg26
(dp154
sbsS'TExampleGeneratorList'
p155
(ipyprops
ClassDefinition
p156
(dp157
g4
I0
sg5
I01
sg6
g155
sg7
g133
sg9
I0
sg10
(lp158
sg12
(lp159
sg26
(dp160
sbsS'TIMByRowsConstructor'
p161
(i__main__
ClassDefinition
p162
(dp163
g4
I1
sg5
I01
sg6
g161
sg7
S'TOrange'
p164
sg9
I01
sg10
(lp165
sg12
(lp166
sg26
(dp167
sbsS'TSubsetsGenerator_withRestrictions'
p168
(i__main__
ClassDefinition
p169
(dp170
g4
I1
sg5
I01
sg6
g168
sg7
S'TSubsetsGenerator'
p171
sg9
I00
sg10
(lp172
sg12
(lp173
(S'TSubsetsGenerator'
p174
S'subGenerator'
p175
g175
S'subset generator'
p176
I0
I0
I00
Ntp177
a(S'TVarList'
p178
S'required'
p179
g179
S'set of required attributes'
p180
I0
I0
I00
Ntp181
a(S'TVarList'
p182
S'forbidden'
p183
g183
S'set of forbidden attributes'
p184
I0
I0
I00
Ntp185
a(S'TVarListList'
p186
S'forbiddenSubSubsets'
p187
g187
S'set of forbidden subsets (attributes that must not occur together)'
p188
I0
I0
I00
Ntp189
a(S'TVarList'
p190
S'varList'
p191
g191
S'a set of attributes from which subsets are generated'
p192
I0
I0
I00
Ntp193
asg26
(dp194
sbsS'TEVDistList'
p195
(ipyprops
ClassDefinition
p196
(dp197
g4
I0
sg5
I01
sg6
g195
sg7
g133
sg9
I0
sg10
(lp198
sg12
(lp199
sg26
(dp200
sbsS'TValueFilterList'
p201
(ipyprops
ClassDefinition
p202
(dp203
g4
I0
sg5
I01
sg6
g201
sg7
g133
sg9
I0
sg10
(lp204
sg12
(lp205
sg26
(dp206
sbsS'TRuleBeamFilter_Python'
p207
(i__main__
ClassDefinition
p208
(dp209
g4
I1
sg5
I01
sg6
g207
sg7
S'TRuleBeamFilter'
p210
sg9
I00
sg10
(lp211
sg12
(lp212
sg26
(dp213
sbsS'TTreeExampleSplitter'
p214
(i__main__
ClassDefinition
p215
(dp216
g4
I1
sg5
I01
sg6
g214
sg7
S'TOrange'
p217
sg9
I01
sg10
(lp218
sg12
(lp219
sg26
(dp220
sbsS'TSVMClassifier'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TClassifierFD'
p224
sg9
I00
sg10
(lp225
sg12
(lp226
(S'TIntList'
p227
S'nSV'
p228
g228
S'nSV'
p229
I0
I0
I00
Ntp230
a(S'TFloatList'
p231
S'rho'
p232
g232
S'rho'
p233
I0
I0
I00
Ntp234
a(S'TFloatListList'
p235
S'coef'
p236
g236
S'coef'
p237
I0
I0
I00
Ntp238
a(S'TFloatList'
p239
S'probA'
p240
g240
S'probA - pairwise probability information'
p241
I0
I0
I00
Ntp242
a(S'TFloatList'
p243
S'probB'
p244
g244
S'probB - pairwise probability information'
p245
I0
I0
I00
Ntp246
a(S'TExampleTable'
p247
S'supportVectors'
p248
g248
S'support vectors'
p249
I0
I0
I00
Ntp250
a(S'TExampleTable'
p251
S'examples'
p252
g252
S'examples used to train the classifier'
p253
I0
I0
I00
Ntp254
a(S'TKernelFunc'
p255
S'kernelFunc'
p256
g256
S'custom kernel function'
p257
I0
I0
I00
Ntp258
a(S'TDomain'
p259
S'domain'
p260
g260
S'domain'
p261
I0
I0
I00
Ntp262
ag87
ag91
asg26
(dp263
sbsS'TFilteredGenerator'
p264
(i__main__
ClassDefinition
p265
(dp266
g4
I1
sg5
I01
sg6
g264
sg7
S'TAdapterGenerator'
p267
sg9
I00
sg10
(lp268
sg12
(lp269
(S'TFilter'
p270
S'filter'
p271
g271
S'decides which examples are skipped'
p272
I0
I0
I00
Ntp273
a(S'TDomain'
p274
S'domain'
p275
g275
S'domain'
p276
I0
I0
I00
Ntp277
a(S'int'
p278
S'version'
p279
g279
S'unique version identifier'
p280
I01
I0
I01
Ntp281
asg26
(dp282
sbsS'TPythonVariable'
p283
(i__main__
ClassDefinition
p284
(dp285
g4
I1
sg5
I01
sg6
g283
sg7
S'TVariable'
p286
sg9
I00
sg10
(lp287
sg12
(lp288
(S'bool'
p289
S'usePickle'
p290
g290
S'tells whether to use pickle for saving to/loading from files'
p291
I0
I0
I01
Ntp292
a(S'bool'
p293
S'useSomeValue'
p294
g294
S'tells whether the Variable will operate on Value or SomeValue (default)'
p295
I0
I0
I01
Ntp296
a(S'string'
p297
S'name'
p298
g298
S"variable's name"
p299
I0
I0
I01
Ntp300
a(S'int'
p301
S'varType'
p302
g302
S' variable type'
p303
I0
I0
I01
S'Variable_Type'
p304
tp305
a(S'bool'
p306
S'ordered'
p307
g307
S'variable values are ordered'
p308
I0
I0
I01
Ntp309
a(S'bool'
p310
S'distributed'
p311
g311
S'variable values are distributions'
p312
I0
I0
I01
Ntp313
a(S'int'
p314
S'defaultMetaId'
p315
g315
S'default (proposed, suggested...) meta id for this variable'
p316
I0
I0
I01
Ntp317
a(S'TRandomGenerator'
p318
S'randomGenerator'
p319
g319
S'random generator for random values (initialized when first needed)'
p320
I0
I0
I00
Ntp321
a(S'TVariable'
p322
S'sourceVariable'
p323
g323
S'The attribute that this attribute is computed from (when applicable)'
p324
I0
I0
I00
Ntp325
a(S'TClassifier'
p326
S'getValueFrom'
p327
g327
S'Function to compute the value from values of other variables'
p328
I0
I0
I00
Ntp329
asg26
(dp330
sbsS'TTreeLearner'
p331
(i__main__
ClassDefinition
p332
(dp333
g4
I1
sg5
I01
sg6
g331
sg7
S'TLearner'
p334
sg9
I00
sg10
(lp335
sg12
(lp336
(S'TTreeSplitConstructor'
p337
S'split'
p338
g338
S'split criterion'
p339
I0
I0
I00
Ntp340
a(S'TTreeStopCriteria'
p341
S'stop'
p342
g342
S'stop criterion'
p343
I0
I0
I00
Ntp344
a(S'TComputeDomainContingency'
p345
S'contingencyComputer'
p346
g346
S'computes contingency matrix'
p347
I0
I0
I00
Ntp348
a(S'TLearner'
p349
S'nodeLearner'
p350
g350
S'node learner'
p351
I0
I0
I00
Ntp352
a(S'TTreeExampleSplitter'
p353
S'exampleSplitter'
p354
g354
S'splits examples to branches'
p355
I0
I0
I00
Ntp356
a(S'int'
p357
S'maxDepth'
p358
g358
S'maximal tree depth (0 = root only, -1 = no limit)'
p359
I0
I0
I01
Ntp360
a(S'bool'
p361
S'storeExamples'
p362
g362
S'if true (default: false), learning examples in nodes are stored'
p363
I0
I0
I01
Ntp364
a(S'bool'
p365
S'storeDistributions'
p366
g366
S'if true (default), class distributions of learning examples in nodes are stored'
p367
I0
I0
I01
Ntp368
a(S'bool'
p369
S'storeContingencies'
p370
g370
S'if true (default), contingency matrices for examples are stored'
p371
I0
I0
I01
Ntp372
a(S'bool'
p373
S'storeNodeClassifier'
p374
g374
S'if true (default), the internal nodes have classifiers; needed for pruning'
p375
I0
I0
I01
Ntp376
a(S'TTreeDescender'
p377
S'descender'
p378
g378
S'descends down the tree'
p379
I0
I0
I00
Ntp380
ag102
asg26
(dp381
sbsS'TPreprocessor_shuffle'
p382
(i__main__
ClassDefinition
p383
(dp384
g4
I1
sg5
I01
sg6
g382
sg7
S'TPreprocessor'
p385
sg9
I00
sg10
(lp386
sg12
(lp387
(S'TVarList'
p388
S'attributes'
p389
g389
S'tells which attributes to shuffle'
p390
I0
I0
I00
Ntp391
a(S'TRandomGenerator'
p392
S'randomGenerator'
p393
g393
S'random number generator'
p394
I0
I0
I00
Ntp395
asg26
(dp396
sbsS'TLearner'
p397
(i__main__
ClassDefinition
p398
(dp399
g4
I1
sg5
I01
sg6
g397
sg7
S'TOrange'
p400
sg9
I00
sg10
(lp401
sg12
(lp402
g102
asg26
(dp403
sbsS'TExamplesDistance_Maximal'
p404
(i__main__
ClassDefinition
p405
(dp406
g4
I1
sg5
I01
sg6
g404
sg7
S'TExamplesDistance_Normalized'
p407
sg9
I00
sg10
(lp408
sg12
(lp409
(S'TAttributedFloatList'
p410
S'normalizers'
p411
g411
S'normalizing factors for attributes'
p412
I0
I0
I00
Ntp413
a(S'TAttributedFloatList'
p414
S'bases'
p415
g415
S'lowest values for attributes'
p416
I0
I0
I00
Ntp417
a(S'TAttributedFloatList'
p418
S'averages'
p419
g419
S'average values for continuous attribute values'
p420
I0
I0
I00
Ntp421
a(S'TAttributedFloatList'
p422
S'variances'
p423
g423
S'variations for continuous attribute values'
p424
I0
I0
I00
Ntp425
a(S'int'
p426
S'domainVersion'
p427
g427
S'version of domain on which the ranges were computed'
p428
I0
I0
I01
Ntp429
a(S'bool'
p430
S'normalize'
p431
g431
S'tells whether to normalize distances between attributes'
p432
I0
I0
I01
Ntp433
a(S'bool'
p434
S'ignoreUnknowns'
p435
g435
S'if true (default: false) unknown values are ignored in computation'
p436
I0
I0
I01
Ntp437
asg26
(dp438
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p439
(i__main__
ClassDefinition
p440
(dp441
g4
I1
sg5
I01
sg6
g439
sg7
S'TSubsetsGenerator_iterator'
p442
sg9
I00
sg10
(lp443
sg12
(lp444
(S'TSubsetsGenerator_iterator'
p445
S'subGenerator_iterator'
p446
g446
S'subset generator'
p447
I0
I0
I00
Ntp448
a(S'TVarList'
p449
S'required'
p450
g450
S'set of required attributes'
p451
I0
I0
I00
Ntp452
a(S'TVarList'
p453
S'forbidden'
p454
g454
S'set of forbidden attributes'
p455
I0
I0
I00
Ntp456
a(S'TVarListList'
p457
S'forbiddenSubSubsets'
p458
g458
S'set of forbidden subsets (attributes that must not occur together)'
p459
I0
I0
I00
Ntp460
a(S'TVarList'
p461
S'varList'
p462
g462
S'a set of attributes from which subsets are generated'
p463
I0
I0
I00
Ntp464
asg26
(dp465
sbsS'TPreprocessor_addClassNoise'
p466
(i__main__
ClassDefinition
p467
(dp468
g4
I1
sg5
I01
sg6
g466
sg7
S'TPreprocessor'
p469
sg9
I00
sg10
(lp470
sg12
(lp471
(S'float'
p472
S'proportion'
p473
g473
S'proportion of changed class values'
p474
I0
I0
I01
Ntp475
a(S'TRandomGenerator'
p476
S'randomGenerator'
p477
g477
S'random number generator'
p478
I0
I0
I00
Ntp479
asg26
(dp480
sbsS'TPreprocessor_discretize'
p481
(i__main__
ClassDefinition
p482
(dp483
g4
I1
sg5
I01
sg6
g481
sg7
S'TPreprocessor'
p484
sg9
I00
sg10
(lp485
sg12
(lp486
(S'TVarList'
p487
S'attributes'
p488
g488
S'attributes to be discretized (all, if not defined or empty)'
p489
I0
I0
I00
Ntp490
a(S'bool'
p491
S'discretizeClass'
p492
g492
S'also discretize the class attribute (default: false)'
p493
I0
I0
I01
Ntp494
a(S'TDiscretization'
p495
S'method'
p496
g496
S'discretization method'
p497
I0
I0
I00
Ntp498
asg26
(dp499
sbsS'TRuleClassifier_logit'
p500
(i__main__
ClassDefinition
p501
(dp502
g4
I1
sg5
I01
sg6
g500
sg7
S'TRuleClassifier'
p503
sg9
I00
sg10
(lp504
sg12
(lp505
(S'TDistribution'
p506
S'prior'
p507
g507
S'prior distribution'
p508
I0
I0
I00
Ntp509
a(S'TDomain'
p510
S'domain'
p511
g511
S'Domain'
p512
I0
I0
I00
Ntp513
a(S'TFloatList'
p514
S'ruleBetas'
p515
g515
S'Rule betas'
p516
I0
I0
I00
Ntp517
a(S'float'
p518
S'minStep'
p519
g519
S'minimal step value'
p520
I0
I0
I01
Ntp521
a(S'float'
p522
S'minSignificance'
p523
g523
S'minimum requested significance for betas. '
p524
I0
I0
I01
Ntp525
a(S'float'
p526
S'minBeta'
p527
g527
S'minimum beta by rule to be included in the model. '
p528
I0
I0
I01
Ntp529
a(S'TClassifier'
p530
S'priorClassifier'
p531
g531
S'prior classifier used if provided'
p532
I0
I0
I00
Ntp533
a(S'TRuleList'
p534
S'prefixRules'
p535
g535
S'rules that trigger before logit sum.'
p536
I0
I0
I00
Ntp537
a(S'TRuleList'
p538
S'rules'
p539
g539
S''
p540
I0
I0
I00
Ntp541
a(S'TExampleTable'
p542
S'examples'
p543
g543
g540
I0
I0
I00
Ntp544
a(S'int'
p545
S'weightID'
p546
g546
g540
I0
I0
I01
Ntp547
ag87
ag91
asg26
(dp548
sbsS'TProgressCallback_Python'
p549
(i__main__
ClassDefinition
p550
(dp551
g4
I1
sg5
I01
sg6
g549
sg7
S'TProgressCallback'
p552
sg9
I00
sg10
(lp553
sg12
(lp554
sg26
(dp555
sbsS'TImputeClassifier'
p556
(i__main__
ClassDefinition
p557
(dp558
g4
I1
sg5
I01
sg6
g556
sg7
S'TClassifier'
p559
sg9
I00
sg10
(lp560
sg12
(lp561
(S'TClassifierFromVar'
p562
S'classifierFromVar'
p563
g563
S'ClassifierFromVar that is used to retrieve defined values'
p564
I0
I0
I00
Ntp565
a(S'TClassifier'
p566
S'imputer'
p567
g567
S'classifier that is used to determine the missing values '
p568
I0
I0
I00
Ntp569
ag87
ag91
asg26
(dp570
sbsS'TStopDistributionClustering'
p571
(i__main__
ClassDefinition
p572
(dp573
g4
I1
sg5
I01
sg6
g571
sg7
S'TOrange'
p574
sg9
I01
sg10
(lp575
sg12
(lp576
sg26
(dp577
sbsS'TFilterList'
p578
(ipyprops
ClassDefinition
p579
(dp580
g4
I0
sg5
I01
sg6
g578
sg7
g133
sg9
I0
sg10
(lp581
sg12
(lp582
sg26
(dp583
sbsS'TPythonValue'
p584
(i__main__
ClassDefinition
p585
(dp586
g4
I1
sg5
I01
sg6
g584
sg7
S'TSomeValue'
p587
sg9
I00
sg10
(lp588
sg12
(lp589
sg26
(dp590
sbsS'TAssociationRulesSparseInducer'
p591
(i__main__
ClassDefinition
p592
(dp593
g4
I1
sg5
I01
sg6
g591
sg7
S'TOrange'
p594
sg9
I00
sg10
(lp595
sg12
(lp596
(S'int'
p597
S'maxItemSets'
p598
g598
S'maximal number of itemsets (increase if you want)'
p599
I0
I0
I01
Ntp600
a(S'float'
p601
S'confidence'
p602
g602
S'required confidence'
p603
I0
I0
I01
Ntp604
a(S'float'
p605
S'support'
p606
g606
S'required support'
p607
I0
I0
I01
Ntp608
a(S'bool'
p609
S'storeExamples'
p610
g610
S'stores examples corresponding to rules'
p611
I0
I0
I01
Ntp612
asg26
(dp613
sbsS'TFilter_sameExample'
p614
(i__main__
ClassDefinition
p615
(dp616
g4
I1
sg5
I01
sg6
g614
sg7
S'TFilter'
p617
sg9
I00
sg10
(lp618
sg12
(lp619
(S'TExample'
p620
S'example'
p621
g621
S'example with which examples are compared'
p622
I0
I0
I00
Ntp623
a(S'bool'
p624
S'negate'
p625
g625
S'if true, filter output should be negated.'
p626
I0
I0
I01
Ntp627
a(S'TDomain'
p628
S'domain'
p629
g629
S'domain to which the examples are converted (if needed)'
p630
I0
I0
I00
Ntp631
asg26
(dp632
sbsS'TRuleClassifierConstructor'
p633
(i__main__
ClassDefinition
p634
(dp635
g4
I1
sg5
I01
sg6
g633
sg7
S'TOrange'
p636
sg9
I01
sg10
(lp637
sg12
(lp638
sg26
(dp639
sbsS'TMakeRandomIndicesMultiple'
p640
(i__main__
ClassDefinition
p641
(dp642
g4
I1
sg5
I01
sg6
g640
sg7
S'TMakeRandomIndices'
p643
sg9
I00
sg10
(lp644
sg12
(lp645
(S'int'
p646
S'stratified'
p647
g647
S' requests stratified distributions'
p648
I0
I0
I01
S'MakeRandomIndices_Stratification'
p649
tp650
a(S'int'
p651
S'randseed'
p652
g652
S'a seed for random generator'
p653
I0
I0
I01
Ntp654
a(S'TRandomGenerator'
p655
S'randomGenerator'
p656
g656
S'a random generator'
p657
I0
I0
I00
Ntp658
asg26
(dp659
sbsS'TLearnerFD'
p660
(i__main__
ClassDefinition
p661
(dp662
g4
I1
sg5
I01
sg6
g660
sg7
S'TLearner'
p663
sg9
I00
sg10
(lp664
sg12
(lp665
(S'TDomain'
p666
S'domain'
p667
g667
S'domain'
p668
I0
I0
I00
Ntp669
ag102
asg26
(dp670
sbsS'TP2NN'
p671
(i__main__
ClassDefinition
p672
(dp673
g4
I1
sg5
I01
sg6
g671
sg7
S'TPNN'
p674
sg9
I00
sg10
(lp675
sg12
(lp676
(S'int'
p677
S'dimensions'
p678
g678
S'the number of dimensions'
p679
I01
I0
I01
Ntp680
a(S'TFloatList'
p681
S'offsets'
p682
g682
S'offsets to subtract from the attribute values'
p683
I0
I0
I00
Ntp684
a(S'TFloatList'
p685
S'normalizers'
p686
g686
S'number to divide the values by'
p687
I0
I0
I00
Ntp688
a(S'TFloatList'
p689
S'averages'
p690
g690
S'numbers to use instead of the missing'
p691
I0
I0
I00
Ntp692
a(S'bool'
p693
S'normalizeExamples'
p694
g694
S'if true, attribute values are divided to sum up to 1'
p695
I0
I0
I01
Ntp696
a(S'int'
p697
S'nExamples'
p698
g698
S'the number of examples'
p699
I01
I0
I01
Ntp700
a(S'int'
p701
S'law'
p702
g702
S'law'
p703
I0
I0
I01
Ntp704
ag262
ag87
ag91
asg26
(dp705
sbsS'TTreeSplitConstructor'
p706
(i__main__
ClassDefinition
p707
(dp708
g4
I1
sg5
I01
sg6
g706
sg7
S'TOrange'
p709
sg9
I01
sg10
(lp710
sg12
(lp711
(S'float'
p712
S'minSubset'
p713
g713
S'minimal number of examples in a subset'
p714
I0
I0
I01
Ntp715
asg26
(dp716
sbsS'TProbabilityEstimatorList'
p717
(ipyprops
ClassDefinition
p718
(dp719
g4
I0
sg5
I01
sg6
g717
sg7
g133
sg9
I0
sg10
(lp720
sg12
(lp721
sg26
(dp722
sbsS'TMapIntValue'
p723
(i__main__
ClassDefinition
p724
(dp725
g4
I1
sg5
I01
sg6
g723
sg7
S'TTransformValue'
p726
sg9
I00
sg10
(lp727
sg12
(lp728
(S'TIntList'
p729
S'mapping'
p730
g730
S'a lookup table'
p731
I0
I0
I00
Ntp732
a(S'TTransformValue'
p733
S'subTransform'
p734
g734
S'transformation executed prior to this'
p735
I0
I0
I00
Ntp736
asg26
(dp737
sbsS'TDistributionAssessor_Kramer'
p738
(i__main__
ClassDefinition
p739
(dp740
g4
I1
sg5
I01
sg6
g738
sg7
S'TDistributionAssessor'
p741
sg9
I00
sg10
(lp742
sg12
(lp743
sg26
(dp744
sbsS'TIM'
p745
(i__main__
ClassDefinition
p746
(dp747
g4
I1
sg5
I01
sg6
g745
sg7
S'TOrange'
p748
sg9
I00
sg10
(lp749
sg12
(lp750
(S'int'
p751
S'varType'
p752
g752
S' class variable type'
p753
I0
I0
I01
S'Variable_Type'
p754
tp755
a(S'TExampleTable'
p756
S'rowExamples'
p757
g757
S'examples with free attributes for each row'
p758
I0
I0
I00
Ntp759
asg26
(dp760
sbsS'TSymMatrix'
p761
(i__main__
ClassDefinition
p762
(dp763
g4
I1
sg5
I01
sg6
g761
sg7
S'TOrange'
p764
sg9
I00
sg10
(lp765
sg12
(lp766
(S'int'
p767
S'dim'
p768
g768
S'matrix dimension'
p769
I01
I0
I01
Ntp770
a(S'int'
p771
S'matrixType'
p772
g772
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p773
I0
I0
I01
S'SymMatrix_Shape'
p774
tp775
asg26
(dp776
S'Shape'
p777
(lp778
(S'Lower'
p779
I0
tp780
a(S'Upper'
p781
I1
tp782
a(S'Symmetric'
p783
I2
tp784
a(S'LowerFilled'
p785
I3
tp786
a(S'UpperFilled'
p787
I4
tp788
assbsS'TEVDistGetter_Standard'
p789
(i__main__
ClassDefinition
p790
(dp791
g4
I1
sg5
I01
sg6
g789
sg7
S'TEVDistGetter'
p792
sg9
I00
sg10
(lp793
sg12
(lp794
(S'TEVDistList'
p795
S'dists'
p796
g796
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p797
I0
I0
I00
Ntp798
asg26
(dp799
sbsS'TFeatureByIM'
p800
(i__main__
ClassDefinition
p801
(dp802
g4
I1
sg5
I01
sg6
g800
sg7
S'TFeatureInducer'
p803
sg9
I00
sg10
(lp804
sg12
(lp805
(S'TIMConstructor'
p806
S'IMconstructor'
p807
g807
S'incompatibility matrix constructor'
p808
I0
I0
I00
Ntp809
a(S'TClustersFromIM'
p810
S'clustersFromIM'
p811
g811
S'clustering algorithm'
p812
I0
I0
I00
Ntp813
a(S'int'
p814
S'completion'
p815
g815
S' decides how to determine the class for points not covered by any cluster'
p816
I0
I0
I01
S'FeatureByIM_Completion'
p817
tp818
asg26
(dp819
S'Completion'
p820
(lp821
(S'NoCompletion'
p822
S'completion_no'
p823
tp824
a(S'CompletionByDefault'
p825
S'completion_default'
p826
tp827
a(S'CompletionByBayes'
p828
S'completion_bayes'
p829
tp830
assbsS'TMeasureAttributeFromProbabilities'
p831
(i__main__
ClassDefinition
p832
(dp833
g4
I1
sg5
I01
sg6
g831
sg7
S'TMeasureAttribute'
p834
sg9
I01
sg10
(lp835
sg12
(lp836
(S'TProbabilityEstimatorConstructor'
p837
S'estimatorConstructor'
p838
g838
S'probability estimator (none by default)'
p839
I0
I0
I00
Ntp840
a(S'TConditionalProbabilityEstimatorConstructor'
p841
S'conditionalEstimatorConstructor'
p842
g842
S'conditional probability estimator (none by default)'
p843
I0
I0
I00
Ntp844
a(S'int'
p845
S'unknownsTreatment'
p846
g846
S' treatment of unknown values'
p847
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p848
tp849
a(S'int'
p850
S'needs'
p851
g851
S' describes what kind of data is needed for computation'
p852
I0
I0
I01
S'MeasureAttribute_Needs'
p853
tp854
a(S'bool'
p855
S'handlesDiscrete'
p856
g856
S'tells whether the measure can handle discrete attributes'
p857
I0
I0
I01
Ntp858
a(S'bool'
p859
S'handlesContinuous'
p860
g860
S'tells whether the measure can handle continuous attributes'
p861
I0
I0
I01
Ntp862
a(S'bool'
p863
S'computesThresholds'
p864
g864
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p865
I0
I0
I01
Ntp866
asg26
(dp867
sbsS'TClassifierByExampleTable'
p868
(i__main__
ClassDefinition
p869
(dp870
g4
I1
sg5
I01
sg6
g868
sg7
S'TClassifierFD'
p871
sg9
I00
sg10
(lp872
sg12
(lp873
(S'TExampleTable'
p874
S'sortedExamples'
p875
g875
S'a table of examples'
p876
I0
I0
I00
Ntp877
a(S'bool'
p878
S'containsUnknowns'
p879
g879
S'if true, the table contains unknown values'
p880
I0
I0
I01
Ntp881
a(S'TClassifier'
p882
S'classifierForUnknown'
p883
g883
S'a classifier for unknown cases'
p884
I0
I0
I00
Ntp885
a(S'TEFMDataDescription'
p886
S'dataDescription'
p887
g887
S'data description'
p888
I0
I0
I00
Ntp889
ag262
ag87
ag91
asg26
(dp890
sbsS'TClassifierByLookupTable3'
p891
(i__main__
ClassDefinition
p892
(dp893
g4
I1
sg5
I01
sg6
g891
sg7
S'TClassifierByLookupTable'
p894
sg9
I00
sg10
(lp895
sg12
(lp896
(S'TVariable'
p897
S'variable1'
p898
g898
S'the first attribute used for classification'
p899
I01
I0
I00
Ntp900
a(S'TVariable'
p901
S'variable2'
p902
g902
S'the second attribute used for classification'
p903
I01
I0
I00
Ntp904
a(S'TVariable'
p905
S'variable3'
p906
g906
S'the third attribute used for classification'
p907
I01
I0
I00
Ntp908
a(S'int'
p909
S'noOfValues1'
p910
g910
S'number of values of the first attribute'
p911
I01
I0
I01
Ntp912
a(S'int'
p913
S'noOfValues2'
p914
g914
S'number of values of the second attribute'
p915
I01
I0
I01
Ntp916
a(S'int'
p917
S'noOfValues3'
p918
g918
S'number of values of the third attribute'
p919
I01
I0
I01
Ntp920
a(S'TEFMDataDescription'
p921
S'dataDescription'
p922
g922
S'data description'
p923
I0
I0
I00
Ntp924
ag79
ag83
ag87
ag91
asg26
(dp925
sbsS'TImputerConstructor_maximal'
p926
(i__main__
ClassDefinition
p927
(dp928
g4
I1
sg5
I01
sg6
g926
sg7
S'TImputerConstructor'
p929
sg9
I00
sg10
(lp930
sg12
(lp931
g153
asg26
(dp932
sbsS'TRuleBeamRefiner'
p933
(i__main__
ClassDefinition
p934
(dp935
g4
I1
sg5
I01
sg6
g933
sg7
S'TOrange'
p936
sg9
I01
sg10
(lp937
sg12
(lp938
sg26
(dp939
sbsS'TSubsetsGenerator_iterator'
p940
(i__main__
ClassDefinition
p941
(dp942
g4
I1
sg5
I01
sg6
g940
sg7
S'TOrange'
p943
sg9
I01
sg10
(lp944
sg12
(lp945
g464
asg26
(dp946
sbsS'TEquiDistDiscretizer'
p947
(i__main__
ClassDefinition
p948
(dp949
g4
I1
sg5
I01
sg6
g947
sg7
S'TDiscretizer'
p950
sg9
I00
sg10
(lp951
sg12
(lp952
(S'int'
p953
S'numberOfIntervals'
p954
g954
S'number of intervals'
p955
I0
I0
I01
Ntp956
a(S'float'
p957
S'firstCut'
p958
g958
S'the first cut-off point'
p959
I0
I0
I01
Ntp960
a(S'float'
p961
S'step'
p962
g962
S'step (width of interval)'
p963
I0
I0
I01
Ntp964
ag736
asg26
(dp965
sbsS'TValueFilter_string'
p966
(i__main__
ClassDefinition
p967
(dp968
g4
I1
sg5
I01
sg6
g966
sg7
S'TValueFilter'
p969
sg9
I00
sg10
(lp970
sg12
(lp971
(S'string'
p972
S'min'
p973
(g973
S'ref'
p974
tp975
S' reference value (lower bound for interval operators)'
p976
I0
I0
I01
Ntp977
a(S'string'
p978
S'max'
p979
g979
S'upper bound for interval operators'
p980
I0
I0
I01
Ntp981
a(S'int'
p982
S'oper'
p983
g983
S' operator'
p984
I0
I0
I01
S'ValueFilter_Operator'
p985
tp986
a(S'bool'
p987
S'caseSensitive'
p988
g988
S'if true (default), the operator is case sensitive'
p989
I0
I0
I01
Ntp990
a(S'int'
p991
S'position'
p992
g992
S"attribute's position in domain"
p993
I0
I0
I01
Ntp994
a(S'int'
p995
S'acceptSpecial'
p996
g996
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p997
I0
I0
I01
Ntp998
asg26
(dp999
sbsS'TFindNearest_BruteForce'
p1000
(i__main__
ClassDefinition
p1001
(dp1002
g4
I1
sg5
I01
sg6
g1000
sg7
S'TFindNearest'
p1003
sg9
I00
sg10
(lp1004
sg12
(lp1005
(S'TExamplesDistance'
p1006
S'distance'
p1007
g1007
S'metrics'
p1008
I0
I0
I00
Ntp1009
a(S'TExampleGenerator'
p1010
S'examples'
p1011
g1011
S'a list of stored examples'
p1012
I0
I0
I00
Ntp1013
a(S'int'
p1014
S'weightID'
p1015
g1015
S'weight to use when counting examples'
p1016
I0
I0
I01
Ntp1017
a(S'int'
p1018
S'distanceID'
p1019
g1019
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1020
I0
I0
I01
Ntp1021
a(S'bool'
p1022
S'includeSame'
p1023
g1023
S'tells whether to include examples that are same as the reference example'
p1024
I0
I0
I01
Ntp1025
asg26
(dp1026
sbsS'TRuleBeamInitializer'
p1027
(i__main__
ClassDefinition
p1028
(dp1029
g4
I1
sg5
I01
sg6
g1027
sg7
S'TOrange'
p1030
sg9
I01
sg10
(lp1031
sg12
(lp1032
sg26
(dp1033
sbsS'TMeasureAttribute_relevance'
p1034
(i__main__
ClassDefinition
p1035
(dp1036
g4
I1
sg5
I01
sg6
g1034
sg7
S'TMeasureAttributeFromProbabilities'
p1037
sg9
I00
sg10
(lp1038
sg12
(lp1039
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp1040
sbsS'TFilter_hasSpecial'
p1041
(i__main__
ClassDefinition
p1042
(dp1043
g4
I1
sg5
I01
sg6
g1041
sg7
S'TFilter'
p1044
sg9
I00
sg10
(lp1045
sg12
(lp1046
g627
ag631
asg26
(dp1047
sbsS'TDiscDistribution'
p1048
(i__main__
ClassDefinition
p1049
(dp1050
g4
I1
sg5
I01
sg6
g1048
sg7
S'TDistribution'
p1051
sg9
I00
sg10
(lp1052
sg12
(lp1053
(S'TFloatList'
p1054
S'variances'
p1055
g1055
S'variances'
p1056
I0
I0
I00
Ntp1057
a(S'TVariable'
p1058
S'variable'
p1059
g1059
S'attribute descriptor (optional)'
p1060
I0
I0
I00
Ntp1061
a(S'float'
p1062
S'unknowns'
p1063
g1063
S'number of unknown values'
p1064
I0
I0
I01
Ntp1065
a(S'float'
p1066
S'abs'
p1067
g1067
S'sum of frequencies (not including unknown values!)'
p1068
I0
I0
I01
Ntp1069
a(S'float'
p1070
S'cases'
p1071
g1071
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1072
I0
I0
I01
Ntp1073
a(S'bool'
p1074
S'normalized'
p1075
g1075
S'distribution is normalized'
p1076
I0
I0
I01
Ntp1077
a(S'bool'
p1078
S'supportsDiscrete'
p1079
g1079
S'distribution supports discrete interface'
p1080
I01
I0
I01
Ntp1081
a(S'bool'
p1082
S'supportsContinuous'
p1083
g1083
S'distribution supports continuous interface'
p1084
I01
I0
I01
Ntp1085
a(S'TRandomGenerator'
p1086
S'randomGenerator'
p1087
g1087
S'random generator; initialized when needed, if not given earlier'
p1088
I0
I0
I00
Ntp1089
asg26
(dp1090
sbsS'TBayesLearner'
p1091
(i__main__
ClassDefinition
p1092
(dp1093
g4
I1
sg5
I01
sg6
g1091
sg7
S'TLearner'
p1094
sg9
I00
sg10
(lp1095
sg12
(lp1096
(S'TProbabilityEstimatorConstructor'
p1097
S'estimatorConstructor'
p1098
g1098
S'constructs a probability estimator for P(C)'
p1099
I0
I0
I00
Ntp1100
a(S'TConditionalProbabilityEstimatorConstructor'
p1101
S'conditionalEstimatorConstructor'
p1102
g1102
S'constructs a probability estimator for P(C|A) '
p1103
I0
I0
I00
Ntp1104
a(S'TConditionalProbabilityEstimatorConstructor'
p1105
S'conditionalEstimatorConstructorContinuous'
p1106
g1106
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1107
I0
I0
I00
Ntp1108
a(S'bool'
p1109
S'normalizePredictions'
p1110
g1110
S'instructs learner to construct a classifier that normalizes probabilities'
p1111
I0
I0
I01
Ntp1112
a(S'bool'
p1113
S'adjustThreshold'
p1114
g1114
S'adjust probability thresholds (for binary classes only)'
p1115
I0
I0
I01
Ntp1116
ag102
asg26
(dp1117
sbsS'TIMByRelief'
p1118
(i__main__
ClassDefinition
p1119
(dp1120
g4
I1
sg5
I01
sg6
g1118
sg7
S'TIMConstructor'
p1121
sg9
I00
sg10
(lp1122
sg12
(lp1123
(S'TExamplesDistance_Relief'
p1124
S'distance'
p1125
g1125
S'distance measure'
p1126
I0
I0
I00
Ntp1127
a(S'float'
p1128
S'k'
p1129
g1129
S'number of neighbours'
p1130
I0
I0
I01
Ntp1131
a(S'float'
p1132
S'm'
p1133
g1133
S'number of reference examples'
p1134
I0
I0
I01
Ntp1135
a(S'float'
p1136
S'kFromColumns'
p1137
g1137
S'if positive, number of neighbours is #columns*kFromColumns'
p1138
I0
I0
I01
Ntp1139
a(S'bool'
p1140
S'ignoreSameExample'
p1141
g1141
S'does not put reference example into M'
p1142
I0
I0
I01
Ntp1143
a(S'bool'
p1144
S'convertToBinary'
p1145
g1145
S'convert to binary class (hit-miss)'
p1146
I0
I0
I01
Ntp1147
a(S'bool'
p1148
S'correctClassFirst'
p1149
g1149
S'puts the correct class proportion to the first place'
p1150
I0
I0
I01
Ntp1151
a(S'bool'
p1152
S'allExamples'
p1153
g1153
S'uses all examples for reference examples'
p1154
I0
I0
I01
Ntp1155
a(S'bool'
p1156
S'allSameNeighbours'
p1157
g1157
S'uses all the examples same to the reference as neighbours'
p1158
I0
I0
I01
Ntp1159
a(S'bool'
p1160
S'recordRowExamples'
p1161
g1161
S'enables creation of rowExample list'
p1162
I0
I0
I01
Ntp1163
asg26
(dp1164
sbsS'TConditionalProbabilityEstimator'
p1165
(i__main__
ClassDefinition
p1166
(dp1167
g4
I1
sg5
I01
sg6
g1165
sg7
S'TOrange'
p1168
sg9
I01
sg10
(lp1169
sg12
(lp1170
g124
ag128
asg26
(dp1171
sbsS'TColumnAssessor_Laplace'
p1172
(i__main__
ClassDefinition
p1173
(dp1174
g4
I1
sg5
I01
sg6
g1172
sg7
S'TColumnAssessor'
p1175
sg9
I00
sg10
(lp1176
sg12
(lp1177
sg26
(dp1178
sbsS'TPreprocessor_addGaussianNoise'
p1179
(i__main__
ClassDefinition
p1180
(dp1181
g4
I1
sg5
I01
sg6
g1179
sg7
S'TPreprocessor'
p1182
sg9
I00
sg10
(lp1183
sg12
(lp1184
(S'TVariableFloatMap'
p1185
S'deviations'
p1186
g1186
S'deviations individual attribute values'
p1187
I0
I0
I00
Ntp1188
a(S'float'
p1189
S'defaultDeviation'
p1190
g1190
S'default deviation'
p1191
I0
I0
I01
Ntp1192
a(S'TRandomGenerator'
p1193
S'randomGenerator'
p1194
g1194
S'random number generator'
p1195
I0
I0
I00
Ntp1196
asg26
(dp1197
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1198
(i__main__
ClassDefinition
p1199
(dp1200
g4
I1
sg5
I01
sg6
g1198
sg7
S'TRuleStoppingCriteria'
p1201
sg9
I00
sg10
(lp1202
sg12
(lp1203
sg26
(dp1204
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1205
(i__main__
ClassDefinition
p1206
(dp1207
g4
I1
sg5
I01
sg6
g1205
sg7
S'TTreeSplitConstructor_Measure'
p1208
sg9
I00
sg10
(lp1209
sg12
(lp1210
(S'TMeasureAttribute'
p1211
S'measure'
p1212
g1212
S'attribute quality measure'
p1213
I0
I0
I00
Ntp1214
a(S'float'
p1215
S'worstAcceptable'
p1216
g1216
S'the worst acceptable quality of the attribute'
p1217
I0
I0
I01
Ntp1218
ag715
asg26
(dp1219
sbsS'TMeasureAttribute_relief'
p1220
(i__main__
ClassDefinition
p1221
(dp1222
g4
I1
sg5
I01
sg6
g1220
sg7
S'TMeasureAttribute'
p1223
sg9
I00
sg10
(lp1224
sg12
(lp1225
(S'float'
p1226
g1129
g1129
S'number of neighbours'
p1227
I0
I0
I01
Ntp1228
a(S'float'
p1229
g1133
g1133
S'number of reference examples'
p1230
I0
I0
I01
Ntp1231
a(S'bool'
p1232
S'checkCachedData'
p1233
g1233
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p1234
I0
I0
I01
Ntp1235
ag854
ag858
ag862
ag866
asg26
(dp1236
sbsS'TFilter_compatibleExample'
p1237
(i__main__
ClassDefinition
p1238
(dp1239
g4
I1
sg5
I01
sg6
g1237
sg7
S'TFilter'
p1240
sg9
I00
sg10
(lp1241
sg12
(lp1242
(S'TExample'
p1243
S'example'
p1244
g1244
S'example with which examples are compared'
p1245
I0
I0
I00
Ntp1246
ag627
ag631
asg26
(dp1247
sbsS'TRemoveRedundant'
p1248
(i__main__
ClassDefinition
p1249
(dp1250
g4
I1
sg5
I01
sg6
g1248
sg7
S'TOrange'
p1251
sg9
I01
sg10
(lp1252
sg12
(lp1253
(S'bool'
p1254
S'keepValues'
p1255
g1255
S'keep an attribute if number values is only smaller, not one'
p1256
I0
I0
I01
Ntp1257
asg26
(dp1258
sbsS'TExamplesDistanceConstructor_Hamming'
p1259
(i__main__
ClassDefinition
p1260
(dp1261
g4
I1
sg5
I01
sg6
g1259
sg7
S'TExamplesDistanceConstructor'
p1262
sg9
I00
sg10
(lp1263
sg12
(lp1264
(S'bool'
p1265
S'ignoreClass'
p1266
g1266
S'if true (default), class value is ignored when computing distances'
p1267
I0
I0
I01
Ntp1268
a(S'bool'
p1269
S'ignoreUnknowns'
p1270
g1270
S'if true (default: false) unknown values are ignored in computation'
p1271
I0
I0
I01
Ntp1272
a(S'bool'
p1273
S'ignoreClass'
p1274
g1274
S'if true (default), class value is ignored when computing distances'
p1275
I0
I0
I01
Ntp1276
asg26
(dp1277
sbsS'TSomeValue'
p1278
(i__main__
ClassDefinition
p1279
(dp1280
g4
I1
sg5
I01
sg6
g1278
sg7
S'TOrange'
p1281
sg9
I01
sg10
(lp1282
sg12
(lp1283
sg26
(dp1284
sbsS'TRuleClassifierConstructor_firstRule'
p1285
(i__main__
ClassDefinition
p1286
(dp1287
g4
I1
sg5
I01
sg6
g1285
sg7
S'TRuleClassifierConstructor'
p1288
sg9
I00
sg10
(lp1289
sg12
(lp1290
sg26
(dp1291
sbsS'TStressFunc'
p1292
(i__main__
ClassDefinition
p1293
(dp1294
g4
I1
sg5
I0
sg6
g1292
sg7
S'TOrange'
p1295
sg9
I01
sg10
(lp1296
sg12
(lp1297
sg26
(dp1298
sbsS'TStopDistributionClustering_noProfit'
p1299
(i__main__
ClassDefinition
p1300
(dp1301
g4
I1
sg5
I01
sg6
g1299
sg7
S'TStopDistributionClustering'
p1302
sg9
I00
sg10
(lp1303
sg12
(lp1304
(S'float'
p1305
S'minProfitProportion'
p1306
g1306
S'minimal allowable profit proportion'
p1307
I0
I0
I01
Ntp1308
asg26
(dp1309
sbsS'TBiModalDiscretization'
p1310
(i__main__
ClassDefinition
p1311
(dp1312
g4
I1
sg5
I01
sg6
g1310
sg7
S'TDiscretization'
p1313
sg9
I00
sg10
(lp1314
sg12
(lp1315
(S'bool'
p1316
S'splitInTwo'
p1317
g1317
S'if true (default), flanks are merged into a single interval'
p1318
I0
I0
I01
Ntp1319
asg26
(dp1320
sbsS'TColoredIG'
p1321
(i__main__
ClassDefinition
p1322
(dp1323
g4
I1
sg5
I01
sg6
g1321
sg7
S'TGeneralExampleClustering'
p1324
sg9
I00
sg10
(lp1325
sg12
(lp1326
(S'TIG'
p1327
S'ig'
p1328
g1328
S'incompatibility graph'
p1329
I0
I0
I00
Ntp1330
a(S'TIntList'
p1331
S'colors'
p1332
g1332
S'colors (one element corresponding to each ig node)'
p1333
I0
I0
I00
Ntp1334
asg26
(dp1335
sbsS'TMeasureAttribute'
p1336
(i__main__
ClassDefinition
p1337
(dp1338
g4
I1
sg5
I01
sg6
g1336
sg7
S'TOrange'
p1339
sg9
I00
sg10
(lp1340
sg12
(lp1341
g854
ag858
ag862
ag866
asg26
(dp1342
S'Needs'
p1343
(lp1344
(S'Contingency_Class'
p1345
I0
tp1346
a(S'DomainContingency'
p1347
I1
tp1348
a(S'Generator'
p1349
I2
tp1350
asS'UnknownsTreatment'
p1351
(lp1352
(S'IgnoreUnknowns'
p1353
I0
tp1354
a(S'ReduceByUnknowns'
p1355
I1
tp1356
a(S'UnknownsToCommon'
p1357
I2
tp1358
a(S'UnknownsAsValue'
p1359
I3
tp1360
assbsS'TRuleEvaluator'
p1361
(i__main__
ClassDefinition
p1362
(dp1363
g4
I1
sg5
I01
sg6
g1361
sg7
S'TOrange'
p1364
sg9
I01
sg10
(lp1365
sg12
(lp1366
sg26
(dp1367
sbsS'TStringVariable'
p1368
(i__main__
ClassDefinition
p1369
(dp1370
g4
I1
sg5
I01
sg6
g1368
sg7
S'TVariable'
p1371
sg9
I00
sg10
(lp1372
sg12
(lp1373
g300
ag305
ag309
ag313
ag317
ag321
ag325
ag329
asg26
(dp1374
sbsS'TAssessIMQuality'
p1375
(i__main__
ClassDefinition
p1376
(dp1377
g4
I1
sg5
I01
sg6
g1375
sg7
S'TOrange'
p1378
sg9
I00
sg10
(lp1379
sg12
(lp1380
(S'TColumnAssessor'
p1381
S'columnAssessor'
p1382
g1382
S'column quality assessor'
p1383
I0
I0
I00
Ntp1384
asg26
(dp1385
sbsS'TGraphAsTree'
p1386
(i__main__
ClassDefinition
p1387
(dp1388
g4
I1
sg5
I01
sg6
g1386
sg7
S'TGraph'
p1389
sg9
I00
sg10
(lp1390
sg12
(lp1391
(S'int'
p1392
S'nVertices'
p1393
g1393
S'the number of vertices'
p1394
I01
I0
I01
Ntp1395
a(S'int'
p1396
S'nEdgeTypes'
p1397
g1397
S'the number of edge types'
p1398
I01
I0
I01
Ntp1399
a(S'bool'
p1400
S'directed'
p1401
g1401
S'directed'
p1402
I01
I0
I01
Ntp1403
asg26
(dp1404
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1405
(i__main__
ClassDefinition
p1406
(dp1407
g4
I1
sg5
I01
sg6
g1405
sg7
S'TTreeExampleSplitter'
p1408
sg9
I00
sg10
(lp1409
sg12
(lp1410
sg26
(dp1411
sbsS'TProbabilityEstimator_FromDistribution'
p1412
(i__main__
ClassDefinition
p1413
(dp1414
g4
I1
sg5
I01
sg6
g1412
sg7
S'TProbabilityEstimator'
p1415
sg9
I00
sg10
(lp1416
sg12
(lp1417
(S'TDistribution'
p1418
S'probabilities'
p1419
g1419
S'probabilities'
p1420
I0
I0
I00
Ntp1421
a(S'bool'
p1422
S'supportsDiscrete'
p1423
g1423
S'can estimate probabilities of discrete attributes'
p1424
I01
I0
I01
Ntp1425
a(S'bool'
p1426
S'supportsContinuous'
p1427
g1427
S'can estimate probabilities of continuous attributes'
p1428
I01
I0
I01
Ntp1429
asg26
(dp1430
sbsS'TFilter_index'
p1431
(ipyprops
ClassDefinition
p1432
(dp1433
g4
I0
sg5
I01
sg6
g1431
sg7
g133
sg9
I0
sg10
(lp1434
sg12
(lp1435
sg26
(dp1436
sbsS'TDistributionList'
p1437
(ipyprops
ClassDefinition
p1438
(dp1439
g4
I0
sg5
I01
sg6
g1437
sg7
g133
sg9
I0
sg10
(lp1440
sg12
(lp1441
sg26
(dp1442
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1443
(i__main__
ClassDefinition
p1444
(dp1445
g4
I1
sg5
I01
sg6
g1443
sg7
S'TTreeDescender'
p1446
sg9
I0
sg10
(lp1447
sg12
(lp1448
sg26
(dp1449
sbsS'TRuleList'
p1450
(ipyprops
ClassDefinition
p1451
(dp1452
g4
I0
sg5
I01
sg6
g1450
sg7
g133
sg9
I0
sg10
(lp1453
sg12
(lp1454
sg26
(dp1455
sbsS'TLogitClassifierState'
p1456
(i__main__
ClassDefinition
p1457
(dp1458
g4
I1
sg5
I01
sg6
g1456
sg7
S'TOrange'
p1459
sg9
I00
sg10
(lp1460
sg12
(lp1461
sg26
(dp1462
sbsS'TExamplesDistance'
p1463
(i__main__
ClassDefinition
p1464
(dp1465
g4
I1
sg5
I01
sg6
g1463
sg7
S'TOrange'
p1466
sg9
I01
sg10
(lp1467
sg12
(lp1468
sg26
(dp1469
sbsS'TFileExampleGenerator'
p1470
(i__main__
ClassDefinition
p1471
(dp1472
g4
I1
sg5
I01
sg6
g1470
sg7
S'TExampleGenerator'
p1473
sg9
I01
sg10
(lp1474
sg12
(lp1475
(S'string'
p1476
S'filename'
p1477
g1477
S'filename'
p1478
I0
I0
I01
Ntp1479
a(S'int'
p1480
S'startDataPos'
p1481
g1481
S'starting position of the data in file'
p1482
I0
I0
I01
Ntp1483
a(S'int'
p1484
S'startDataLine'
p1485
g1485
S'line in the file where the data starts'
p1486
I0
I0
I01
Ntp1487
ag277
ag281
asg26
(dp1488
sbsS'TNormalizeContinuous'
p1489
(i__main__
ClassDefinition
p1490
(dp1491
g4
I1
sg5
I01
sg6
g1489
sg7
S'TTransformValue'
p1492
sg9
I00
sg10
(lp1493
sg12
(lp1494
(S'float'
p1495
S'average'
p1496
g1496
S'the average value'
p1497
I0
I0
I01
Ntp1498
a(S'float'
p1499
S'span'
p1500
g1500
S'the value span'
p1501
I0
I0
I01
Ntp1502
ag736
asg26
(dp1503
sbsS'TContingencyClassAttr'
p1504
(i__main__
ClassDefinition
p1505
(dp1506
g4
I1
sg5
I01
sg6
g1504
sg7
S'TContingencyClass'
p1507
sg9
I00
sg10
(lp1508
sg12
(lp1509
(S'TVariable'
p1510
S'outerVariable'
p1511
g1511
S'outer attribute'
p1512
I0
I0
I00
Ntp1513
a(S'TVariable'
p1514
S'innerVariable'
p1515
g1515
S'inner attribute'
p1516
I0
I0
I00
Ntp1517
a(S'int'
p1518
S'varType'
p1519
g1519
S' outer attribute type'
p1520
I0
I0
I01
S'Variable_Type'
p1521
tp1522
a(S'TDistribution'
p1523
S'outerDistribution'
p1524
g1524
S'distribution of values of outer attributes'
p1525
I0
I0
I00
Ntp1526
a(S'TDistribution'
p1527
S'innerDistribution'
p1528
g1528
S'distribution of values of inner attributes'
p1529
I0
I0
I00
Ntp1530
a(S'TDistribution'
p1531
S'innerDistributionUnknown'
p1532
g1532
S'distribution of inner variable for examples where the outer value was unknown'
p1533
I0
I0
I00
Ntp1534
asg26
(dp1535
sbsS'TMissValuesGenerator'
p1536
(i__main__
ClassDefinition
p1537
(dp1538
g4
I1
sg5
I01
sg6
g1536
sg7
S'TChangeExampleGenerator'
p1539
sg9
I00
sg10
(lp1540
sg12
(lp1541
(S'TIntFloatList'
p1542
S'replaceProbabilities'
p1543
g1543
S"probabilities for replacing attributes' values"
p1544
I0
I0
I00
Ntp1545
a(S'TRandomGenerator'
p1546
S'randomGenerator'
p1547
g1547
S'random generator'
p1548
I0
I0
I00
Ntp1549
ag277
ag281
asg26
(dp1550
sbsS'TLogRegClassifier'
p1551
(i__main__
ClassDefinition
p1552
(dp1553
g4
I1
sg5
I01
sg6
g1551
sg7
S'TClassifierFD'
p1554
sg9
I00
sg10
(lp1555
sg12
(lp1556
(S'TDomain'
p1557
S'continuizedDomain'
p1558
g1558
S'if absent, there is no continuous attributes in original domain'
p1559
I0
I0
I00
Ntp1560
a(S'TEFMDataDescription'
p1561
S'dataDescription'
p1562
g1562
S'Data needed for classification in presence of undefined values'
p1563
I0
I0
I00
Ntp1564
a(S'TAttributedFloatList'
p1565
S'beta'
p1566
g1566
S'estimated beta coefficients for logistic regression'
p1567
I0
I0
I00
Ntp1568
a(S'TAttributedFloatList'
p1569
S'beta_se'
p1570
g1570
S'estimated standard errors for beta coefficients'
p1571
I0
I0
I00
Ntp1572
a(S'TAttributedFloatList'
p1573
S'wald_Z'
p1574
g1574
S'Wald Z statstic for beta coefficients'
p1575
I0
I0
I00
Ntp1576
a(S'TAttributedFloatList'
p1577
S'P'
p1578
g1578
S'estimated significances for beta coefficients'
p1579
I0
I0
I00
Ntp1580
a(S'float'
p1581
S'likelihood'
p1582
g1582
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1583
I0
I0
I01
Ntp1584
a(S'int'
p1585
S'fit_status'
p1586
g1586
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1587
I0
I0
I01
Ntp1588
a(S'TImputer'
p1589
S'imputer'
p1590
g1590
S'if present, it imputes unknown values'
p1591
I0
I0
I00
Ntp1592
ag262
ag87
ag91
asg26
(dp1593
sbsS'TClassifierRandomGenerator'
p1594
(i__main__
ClassDefinition
p1595
(dp1596
g4
I1
sg5
I01
sg6
g1594
sg7
S'TExampleGenerator'
p1597
sg9
I00
sg10
(lp1598
sg12
(lp1599
(S'TClassifier'
p1600
S'classify'
p1601
g1601
S'classifier'
p1602
I0
I0
I00
Ntp1603
a(S'int'
p1604
S'noOfEx'
p1605
g1605
S'number of examples'
p1606
I0
I0
I01
Ntp1607
ag277
ag281
asg26
(dp1608
sbsS'TPreprocessor_select'
p1609
(i__main__
ClassDefinition
p1610
(dp1611
g4
I1
sg5
I01
sg6
g1609
sg7
S'TPreprocessor'
p1612
sg9
I00
sg10
(lp1613
sg12
(lp1614
(S'TVarList'
p1615
S'attributes'
p1616
g1616
S'tells which attributes to select'
p1617
I0
I0
I00
Ntp1618
asg26
(dp1619
sbsS'TSVMClassifierSparse'
p1620
(i__main__
ClassDefinition
p1621
(dp1622
g4
I1
sg5
I01
sg6
g1620
sg7
S'TSVMClassifier'
p1623
sg9
I00
sg10
(lp1624
sg12
(lp1625
(S'bool'
p1626
S'useNonMeta'
p1627
g1627
S'include non meta attributes'
p1628
I0
I0
I01
Ntp1629
ag230
ag234
ag238
ag242
ag246
ag250
ag254
ag258
ag262
ag87
ag91
asg26
(dp1630
sbsS'TFilter_disjunction'
p1631
(i__main__
ClassDefinition
p1632
(dp1633
g4
I1
sg5
I01
sg6
g1631
sg7
S'TFilter'
p1634
sg9
I00
sg10
(lp1635
sg12
(lp1636
(S'TFilterList'
p1637
S'filters'
p1638
g1638
S'a list of filters;'
p1639
I0
I0
I00
Ntp1640
ag627
ag631
asg26
(dp1641
sbsS'TChangeExampleGenerator'
p1642
(i__main__
ClassDefinition
p1643
(dp1644
g4
I1
sg5
I01
sg6
g1642
sg7
S'TAdapterGenerator'
p1645
sg9
I01
sg10
(lp1646
sg12
(lp1647
g277
ag281
asg26
(dp1648
sbsS'TAttributedFloatList'
p1649
(ipyprops
ClassDefinition
p1650
(dp1651
g4
I0
sg5
I01
sg6
g1649
sg7
S'TFloatList'
p1652
sg9
I0
sg10
(lp1653
sg12
(lp1654
sg26
(dp1655
sbsS'TIMByRowsByRelief'
p1656
(i__main__
ClassDefinition
p1657
(dp1658
g4
I1
sg5
I01
sg6
g1656
sg7
S'TIMByRowsConstructor'
p1659
sg9
I00
sg10
(lp1660
sg12
(lp1661
(S'float'
p1662
g1129
g1129
S'number of neighbours'
p1663
I0
I0
I01
Ntp1664
a(S'float'
p1665
g1133
g1133
S'number of reference examples'
p1666
I0
I0
I01
Ntp1667
a(S'float'
p1668
S'kFromColumns'
p1669
g1669
S'if positive, number of neighbours is #columns*kFromColumns'
p1670
I0
I0
I01
Ntp1671
a(S'bool'
p1672
S'ignoreSameExample'
p1673
g1673
S'does not put reference example into M'
p1674
I0
I0
I01
Ntp1675
a(S'bool'
p1676
S'convertToBinary'
p1677
g1677
S'convert to binary class (hit-miss)'
p1678
I0
I0
I01
Ntp1679
a(S'bool'
p1680
S'correctClassFirst'
p1681
g1681
S'puts the correct class proportion to the first place'
p1682
I0
I0
I01
Ntp1683
a(S'bool'
p1684
S'allExamples'
p1685
g1685
S'uses all examples for reference examples'
p1686
I0
I0
I01
Ntp1687
a(S'bool'
p1688
S'allSameNeighbours'
p1689
g1689
S'uses all the examples same to the reference as neighbours'
p1690
I0
I0
I01
Ntp1691
asg26
(dp1692
sbsS'TFindNearestConstructor'
p1693
(i__main__
ClassDefinition
p1694
(dp1695
g4
I1
sg5
I01
sg6
g1693
sg7
S'TOrange'
p1696
sg9
I01
sg10
(lp1697
sg12
(lp1698
(S'TExamplesDistanceConstructor'
p1699
S'distanceConstructor'
p1700
g1700
S'metrics'
p1701
I0
I0
I00
Ntp1702
a(S'bool'
p1703
S'includeSame'
p1704
g1704
S'tells whether to include examples that are same as the reference example'
p1705
I0
I0
I01
Ntp1706
asg26
(dp1707
sbsS'TRuleClassifier_firstRule'
p1708
(i__main__
ClassDefinition
p1709
(dp1710
g4
I1
sg5
I01
sg6
g1708
sg7
S'TRuleClassifier'
p1711
sg9
I00
sg10
(lp1712
sg12
(lp1713
(S'TDistribution'
p1714
S'prior'
p1715
g1715
S'prior distribution'
p1716
I0
I0
I00
Ntp1717
ag541
ag544
ag547
ag87
ag91
asg26
(dp1718
sbsS'TColumnAssessor'
p1719
(i__main__
ClassDefinition
p1720
(dp1721
g4
I1
sg5
I01
sg6
g1719
sg7
S'TOrange'
p1722
sg9
I01
sg10
(lp1723
sg12
(lp1724
sg26
(dp1725
sbsS'TTableAverager'
p1726
(i__main__
ClassDefinition
p1727
(dp1728
g4
I1
sg5
I01
sg6
g1726
sg7
S'TOrange'
p1729
sg9
I00
sg10
(lp1730
sg12
(lp1731
sg26
(dp1732
sbsS'TComputeDomainContingency_Preprocessor'
p1733
(i__main__
ClassDefinition
p1734
(dp1735
g4
I1
sg5
I01
sg6
g1733
sg7
S'TComputeDomainContingency'
p1736
sg9
I00
sg10
(lp1737
sg12
(lp1738
(S'TPreprocessor'
p1739
S'preprocessor'
p1740
g1740
S'preprocesses the exmaples (see the manual for restrictions!)'
p1741
I0
I0
I00
Ntp1742
a(S'bool'
p1743
S'resultInOriginalDomain'
p1744
g1744
S'tells whether the resulting DomainContingency should consist of original attributes'
p1745
I0
I0
I01
Ntp1746
ag25
asg26
(dp1747
sbsS'TFloatFloatList'
p1748
(ipyprops
ClassDefinition
p1749
(dp1750
g4
I0
sg5
I01
sg6
g1748
sg7
g133
sg9
I0
sg10
(lp1751
sg12
(lp1752
sg26
(dp1753
sbsS'TMeasureAttribute_MSE'
p1754
(i__main__
ClassDefinition
p1755
(dp1756
g4
I1
sg5
I01
sg6
g1754
sg7
S'TMeasureAttribute'
p1757
sg9
I00
sg10
(lp1758
sg12
(lp1759
(S'float'
p1760
g1133
g1133
S'm for m-estimate'
p1761
I0
I0
I01
Ntp1762
a(S'int'
p1763
S'unknownsTreatment'
p1764
g1764
S' treatment of unknown values'
p1765
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1766
tp1767
ag854
ag858
ag862
ag866
asg26
(dp1768
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1769
(i__main__
ClassDefinition
p1770
(dp1771
g4
I1
sg5
I01
sg6
g1769
sg7
S'TStopIMClusteringByAssessor'
p1772
sg9
I00
sg10
(lp1773
sg12
(lp1774
sg26
(dp1775
sbsS'TItemsetsSparseInducer'
p1776
(i__main__
ClassDefinition
p1777
(dp1778
g4
I1
sg5
I01
sg6
g1776
sg7
S'TOrange'
p1779
sg9
I00
sg10
(lp1780
sg12
(lp1781
(S'int'
p1782
S'maxItemSets'
p1783
g1783
S'maximal number of itemsets (increase if you want)'
p1784
I0
I0
I01
Ntp1785
a(S'float'
p1786
S'support'
p1787
g1787
S'required support'
p1788
I0
I0
I01
Ntp1789
a(S'bool'
p1790
S'storeExamples'
p1791
g1791
S'stores examples corresponding to itemsets'
p1792
I0
I0
I01
Ntp1793
asg26
(dp1794
sbsS'TPreprocessor_dropMissing'
p1795
(i__main__
ClassDefinition
p1796
(dp1797
g4
I1
sg5
I01
sg6
g1795
sg7
S'TPreprocessor'
p1798
sg9
I00
sg10
(lp1799
sg12
(lp1800
sg26
(dp1801
sbsS'TDomainContinuizer'
p1802
(i__main__
ClassDefinition
p1803
(dp1804
g4
I1
sg5
I01
sg6
g1802
sg7
S'TOrange'
p1805
sg9
I00
sg10
(lp1806
sg12
(lp1807
(S'bool'
p1808
S'zeroBased'
p1809
g1809
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1810
I0
I0
I01
Ntp1811
a(S'int'
p1812
S'continuousTreatment'
p1813
g1813
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1814
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1815
tp1816
a(S'int'
p1817
S'multinomialTreatment'
p1818
g1818
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-error, 5-convert as ordinal, 6-ordinal,normalized'
p1819
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1820
tp1821
a(S'int'
p1822
S'classTreatment'
p1823
g1823
S' 3-leave as is unless target is given, 4-error if not continuous nor binary nor target given, 5-convert as ordinal (unless target given)'
p1824
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1825
tp1826
asg26
(dp1827
S'MultinomialTreatment'
p1828
(lp1829
(S'LowestIsBase'
p1830
I0
tp1831
a(S'FrequentIsBase'
p1832
I1
tp1833
a(S'NValues'
p1834
I2
tp1835
a(S'Ignore'
p1836
I3
tp1837
a(S'IgnoreAllDiscrete'
p1838
I4
tp1839
a(S'ReportError'
p1840
I5
tp1841
a(S'AsOrdinal'
p1842
I6
tp1843
a(S'AsNormalizedOrdinal'
p1844
I7
tp1845
asS'ClassTreatment'
p1846
(lp1847
(S'LeaveUnlessTarget'
p1848
S'3'
p1849
tp1850
a(S'ErrorIfCannotHandle'
p1851
S'4'
p1852
tp1853
a(S'AsOrdinal'
p1854
S'5'
p1855
tp1856
asS'ContinuousTreatment'
p1857
(lp1858
(S'Leave'
p1859
I0
tp1860
a(S'NormalizeBySpan'
p1861
I1
tp1862
a(S'NormalizeByVariance'
p1863
I2
tp1864
assbsS'TMeasureAttribute_gainRatio'
p1865
(i__main__
ClassDefinition
p1866
(dp1867
g4
I1
sg5
I01
sg6
g1865
sg7
S'TMeasureAttributeFromProbabilities'
p1868
sg9
I00
sg10
(lp1869
sg12
(lp1870
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp1871
sbsS'TPNN'
p1872
(i__main__
ClassDefinition
p1873
(dp1874
g4
I1
sg5
I01
sg6
g1872
sg7
S'TClassifierFD'
p1875
sg9
I00
sg10
(lp1876
sg12
(lp1877
g680
ag684
ag688
ag692
ag696
ag700
ag704
ag262
ag87
ag91
asg26
(dp1878
sbsS'TStressFunc_Python'
p1879
(i__main__
ClassDefinition
p1880
(dp1881
g4
I1
sg5
I0
sg6
g1879
sg7
S'TStressFunc'
p1882
sg9
I00
sg10
(lp1883
sg12
(lp1884
sg26
(dp1885
sbsS'TBiModalDiscretizer'
p1886
(i__main__
ClassDefinition
p1887
(dp1888
g4
I1
sg5
I01
sg6
g1886
sg7
S'TDiscretizer'
p1889
sg9
I00
sg10
(lp1890
sg12
(lp1891
(S'float'
p1892
S'low'
p1893
g1893
S'low threshold'
p1894
I0
I0
I01
Ntp1895
a(S'float'
p1896
S'high'
p1897
g1897
S'high threshold'
p1898
I0
I0
I01
Ntp1899
ag736
asg26
(dp1900
sbsS'TExamplesDistanceConstructor_Euclidean'
p1901
(i__main__
ClassDefinition
p1902
(dp1903
g4
I1
sg5
I01
sg6
g1901
sg7
S'TExamplesDistanceConstructor_Normalized'
p1904
sg9
I00
sg10
(lp1905
sg12
(lp1906
(S'bool'
p1907
S'normalize'
p1908
g1908
S'tells whether to normalize distances between attributes'
p1909
I0
I0
I01
Ntp1910
a(S'bool'
p1911
S'ignoreUnknowns'
p1912
g1912
S'if true (default: false) unknown values are ignored in computation'
p1913
I0
I0
I01
Ntp1914
ag1276
asg26
(dp1915
sbsS'TContingencyAttrAttr'
p1916
(i__main__
ClassDefinition
p1917
(dp1918
g4
I1
sg5
I01
sg6
g1916
sg7
S'TContingency'
p1919
sg9
I00
sg10
(lp1920
sg12
(lp1921
g1513
ag1517
ag1522
ag1526
ag1530
ag1534
asg26
(dp1922
sbsS'TRuleBeamRefiner_Selector'
p1923
(i__main__
ClassDefinition
p1924
(dp1925
g4
I1
sg5
I01
sg6
g1923
sg7
S'TRuleBeamRefiner'
p1926
sg9
I00
sg10
(lp1927
sg12
(lp1928
(S'TDiscretization'
p1929
S'discretization'
p1930
g1930
S'discretization for continuous attributes'
p1931
I0
I0
I00
Ntp1932
asg26
(dp1933
sbsS'TProbabilityEstimatorConstructor_Laplace'
p1934
(i__main__
ClassDefinition
p1935
(dp1936
g4
I1
sg5
I01
sg6
g1934
sg7
S'TProbabilityEstimatorConstructor'
p1937
sg9
I00
sg10
(lp1938
sg12
(lp1939
(S'float'
p1940
S'l'
p1941
g1941
S'number of examples added to each class (default: 1)'
p1942
I0
I0
I01
Ntp1943
a(S'bool'
p1944
S'renormalize'
p1945
g1945
S'computes the estimate on the original (not the normalized) distribution'
p1946
I0
I0
I01
Ntp1947
asg26
(dp1948
sbsS'TExamplesDistance_Relief'
p1949
(i__main__
ClassDefinition
p1950
(dp1951
g4
I1
sg5
I01
sg6
g1949
sg7
S'TExamplesDistance'
p1952
sg9
I00
sg10
(lp1953
sg12
(lp1954
(S'TDomainDistributions'
p1955
S'distributions'
p1956
g1956
S"distributions of attributes' values"
p1957
I0
I0
I00
Ntp1958
a(S'TAttributedFloatList'
p1959
S'averages'
p1960
g1960
S'average values of attributes'
p1961
I0
I0
I00
Ntp1962
a(S'TAttributedFloatList'
p1963
S'normalizations'
p1964
g1964
S"ranges of attributes' values"
p1965
I0
I0
I00
Ntp1966
a(S'TAttributedFloatList'
p1967
S'bothSpecial'
p1968
g1968
S'distance if both values of both attributes are undefined'
p1969
I0
I0
I00
Ntp1970
asg26
(dp1971
sbsS'TExamplesDistance_Manhattan'
p1972
(i__main__
ClassDefinition
p1973
(dp1974
g4
I1
sg5
I01
sg6
g1972
sg7
S'TExamplesDistance_Normalized'
p1975
sg9
I00
sg10
(lp1976
sg12
(lp1977
g413
ag417
ag421
ag425
ag429
ag433
ag437
asg26
(dp1978
sbsS'TExamplesDistanceConstructor_Manhattan'
p1979
(i__main__
ClassDefinition
p1980
(dp1981
g4
I1
sg5
I01
sg6
g1979
sg7
S'TExamplesDistanceConstructor_Normalized'
p1982
sg9
I00
sg10
(lp1983
sg12
(lp1984
g1910
ag1914
ag1276
asg26
(dp1985
sbsS'TStringList'
p1986
(ipyprops
ClassDefinition
p1987
(dp1988
g4
I0
sg5
I01
sg6
g1986
sg7
g133
sg9
I0
sg10
(lp1989
sg12
(lp1990
sg26
(dp1991
sbsS'TTreeDescender'
p1992
(i__main__
ClassDefinition
p1993
(dp1994
g4
I1
sg5
I01
sg6
g1992
sg7
S'TOrange'
p1995
sg9
I01
sg10
(lp1996
sg12
(lp1997
sg26
(dp1998
sbsS'TColumnAssessor_Measure'
p1999
(i__main__
ClassDefinition
p2000
(dp2001
g4
I1
sg5
I01
sg6
g1999
sg7
S'TColumnAssessor'
p2002
sg9
I00
sg10
(lp2003
sg12
(lp2004
(S'TMeasureAttribute'
p2005
S'measure'
p2006
g2006
S'attribute quality measure'
p2007
I0
I0
I00
Ntp2008
asg26
(dp2009
sbsS'TIMBlurer'
p2010
(i__main__
ClassDefinition
p2011
(dp2012
g4
I1
sg5
I01
sg6
g2010
sg7
S'TIMByRowsPreprocessor'
p2013
sg9
I00
sg10
(lp2014
sg12
(lp2015
(S'float'
p2016
S'weight'
p2017
g2017
S'weight of neighbours'
p2018
I0
I0
I01
Ntp2019
a(S'float'
p2020
S'origWeight'
p2021
g2021
S'weight of original row'
p2022
I0
I0
I01
Ntp2023
a(S'TFloatList'
p2024
S'attrWeights'
p2025
g2025
S'weights by individual (different) attributes'
p2026
I0
I0
I00
Ntp2027
a(S'bool'
p2028
S'adjustOrigWeight'
p2029
g2029
S'uses 1-weight(s) for weight of original row'
p2030
I0
I0
I01
Ntp2031
a(S'bool'
p2032
S'onlyEmpty'
p2033
g2033
S'blurs only empty cells'
p2034
I0
I0
I01
Ntp2035
asg26
(dp2036
sbsS'TFilter'
p2037
(i__main__
ClassDefinition
p2038
(dp2039
g4
I1
sg5
I01
sg6
g2037
sg7
S'TOrange'
p2040
sg9
I01
sg10
(lp2041
sg12
(lp2042
g627
ag631
asg26
(dp2043
sbsS'TC45Learner'
p2044
(i__main__
ClassDefinition
p2045
(dp2046
g4
I1
sg5
I01
sg6
g2044
sg7
S'TLearner'
p2047
sg9
I00
sg10
(lp2048
sg12
(lp2049
(S'bool'
p2050
S'gainRatio'
p2051
(g2051
S'g'
p2052
tp2053
S' use gain ratio (instead of information gain)'
p2054
I0
I0
I01
Ntp2055
a(S'bool'
p2056
S'subset'
p2057
(g2057
S's'
p2058
tp2059
S' use subsetting'
p2060
I0
I0
I01
Ntp2061
a(S'bool'
p2062
S'batch'
p2063
(g2063
S'b'
p2064
tp2065
S' batch'
p2066
I0
I0
I01
Ntp2067
a(S'bool'
p2068
S'probThresh'
p2069
(g2069
S'p'
p2070
tp2071
S' probability threshold'
p2072
I0
I0
I01
Ntp2073
a(S'int'
p2074
S'minObjs'
p2075
(g2075
g1133
tp2076
S' minimal number of objects (examples) in leaves'
p2077
I0
I0
I01
Ntp2078
a(S'int'
p2079
S'window'
p2080
(g2080
S'w'
p2081
tp2082
S' window'
p2083
I0
I0
I01
Ntp2084
a(S'int'
p2085
S'increment'
p2086
(g2086
S'i'
p2087
tp2088
S' increment'
p2089
I0
I0
I01
Ntp2090
a(S'float'
p2091
S'cf'
p2092
(g2092
S'c'
p2093
tp2094
S' cf'
p2095
I0
I0
I01
Ntp2096
a(S'int'
p2097
S'trials'
p2098
(g2098
S't'
p2099
tp2100
S' trials'
p2101
I0
I0
I01
Ntp2102
a(S'bool'
p2103
S'prune'
p2104
g2104
S'return pruned tree'
p2105
I0
I0
I01
Ntp2106
a(S'bool'
p2107
S'convertToOrange'
p2108
g2108
S'return TreeClassifier instead of C45TreeClassifier'
p2109
I0
I0
I01
Ntp2110
a(S'bool'
p2111
S'storeExamples'
p2112
g2112
S'stores examples when (if) converting to TreeClassifier'
p2113
I0
I0
I01
Ntp2114
a(S'bool'
p2115
S'storeContingencies'
p2116
g2116
S'stores contingencies when (if) converting to TreeClassifier'
p2117
I0
I0
I01
Ntp2118
ag102
asg26
(dp2119
sbsS'TAttributedBoolList'
p2120
(ipyprops
ClassDefinition
p2121
(dp2122
g4
I0
sg5
I01
sg6
g2120
sg7
S'TBoolList'
p2123
sg9
I0
sg10
(lp2124
sg12
(lp2125
sg26
(dp2126
sbsS'TFeatureByMinComplexity'
p2127
(i__main__
ClassDefinition
p2128
(dp2129
g4
I1
sg5
I01
sg6
g2127
sg7
S'TFeatureInducer'
p2130
sg9
I00
sg10
(lp2131
sg12
(lp2132
(S'TColorIG'
p2133
S'colorIG'
p2134
g2134
S'graph coloring algorithm'
p2135
I0
I0
I00
Ntp2136
a(S'int'
p2137
S'completion'
p2138
g2138
S' decides how to determine the class for points not covered by any cluster'
p2139
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2140
tp2141
asg26
(dp2142
S'Completion'
p2143
(lp2144
(S'NoCompletion'
p2145
S'completion_no'
p2146
tp2147
a(S'CompletionByDefault'
p2148
S'completion_default'
p2149
tp2150
a(S'CompletionByBayes'
p2151
S'completion_bayes'
p2152
tp2153
assbsS'TPreprocessor_dropMissingClasses'
p2154
(i__main__
ClassDefinition
p2155
(dp2156
g4
I1
sg5
I01
sg6
g2154
sg7
S'TPreprocessor'
p2157
sg9
I00
sg10
(lp2158
sg12
(lp2159
sg26
(dp2160
sbsS'TkNNClassifier'
p2161
(i__main__
ClassDefinition
p2162
(dp2163
g4
I1
sg5
I01
sg6
g2161
sg7
S'TClassifierFD'
p2164
sg9
I00
sg10
(lp2165
sg12
(lp2166
(S'TFindNearest'
p2167
S'findNearest'
p2168
g2168
g540
I0
I0
I00
Ntp2169
a(S'float'
p2170
g1129
g1129
S'number of neighbours (0 for sqrt of #examples)'
p2171
I0
I0
I01
Ntp2172
a(S'bool'
p2173
S'rankWeight'
p2174
g2174
S'enable weighting by ranks'
p2175
I0
I0
I01
Ntp2176
a(S'int'
p2177
S'weightID'
p2178
g2178
S'id of meta-attribute with weight'
p2179
I0
I0
I01
Ntp2180
a(S'int'
p2181
S'nExamples'
p2182
g2182
S'the number of learning examples '
p2183
I0
I0
I01
Ntp2184
ag262
ag87
ag91
asg26
(dp2185
sbsS'TSgnSammonStress'
p2186
(i__main__
ClassDefinition
p2187
(dp2188
g4
I1
sg5
I0
sg6
g2186
sg7
S'TStressFunc'
p2189
sg9
I00
sg10
(lp2190
sg12
(lp2191
sg26
(dp2192
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2193
(i__main__
ClassDefinition
p2194
(dp2195
g4
I1
sg5
I01
sg6
g2193
sg7
S'TRuleBeamCandidateSelector'
p2196
sg9
I00
sg10
(lp2197
sg12
(lp2198
sg26
(dp2199
sbsS'TExamplesDistanceConstructor_Relief'
p2200
(i__main__
ClassDefinition
p2201
(dp2202
g4
I1
sg5
I01
sg6
g2200
sg7
S'TExamplesDistanceConstructor'
p2203
sg9
I00
sg10
(lp2204
sg12
(lp2205
g1276
asg26
(dp2206
sbsS'TOrange'
p2207
(i__main__
ClassDefinition
p2208
(dp2209
g4
I1
sg5
I01
sg6
g2207
sg7
Nsg9
I00
sg10
(lp2210
sg12
(lp2211
sg26
(dp2212
sbsS'TRuleValidator'
p2213
(i__main__
ClassDefinition
p2214
(dp2215
g4
I1
sg5
I01
sg6
g2213
sg7
S'TOrange'
p2216
sg9
I01
sg10
(lp2217
sg12
(lp2218
sg26
(dp2219
sbsS'TColorIG'
p2220
(i__main__
ClassDefinition
p2221
(dp2222
g4
I1
sg5
I01
sg6
g2220
sg7
S'TOrange'
p2223
sg9
I01
sg10
(lp2224
sg12
(lp2225
sg26
(dp2226
sbsS'TRuleValidator_Python'
p2227
(i__main__
ClassDefinition
p2228
(dp2229
g4
I1
sg5
I01
sg6
g2227
sg7
S'TRuleValidator'
p2230
sg9
I00
sg10
(lp2231
sg12
(lp2232
sg26
(dp2233
sbsS'TSubsetsGenerator_constSize_iterator'
p2234
(i__main__
ClassDefinition
p2235
(dp2236
g4
I1
sg5
I01
sg6
g2234
sg7
S'TSubsetsGenerator_iterator'
p2237
sg9
I00
sg10
(lp2238
sg12
(lp2239
(S'bool'
p2240
S'moreToCome'
p2241
g2241
g540
I01
I0
I01
Ntp2242
ag464
asg26
(dp2243
sbsS'TIMByRowsBySorting'
p2244
(i__main__
ClassDefinition
p2245
(dp2246
g4
I1
sg5
I01
sg6
g2244
sg7
S'TIMByRowsConstructor'
p2247
sg9
I00
sg10
(lp2248
sg12
(lp2249
sg26
(dp2250
sbsS'TAssociationLearner'
p2251
(i__main__
ClassDefinition
p2252
(dp2253
g4
I1
sg5
I01
sg6
g2251
sg7
S'TLearner'
p2254
sg9
I00
sg10
(lp2255
sg12
(lp2256
(S'float'
p2257
S'confidence'
p2258
g2258
S'required confidence'
p2259
I0
I0
I01
Ntp2260
a(S'float'
p2261
S'support'
p2262
g2262
S'required support'
p2263
I0
I0
I01
Ntp2264
a(S'int'
p2265
S'voteWeight'
p2266
g2266
S'vote weight (s=support, c=confidence, p=product)'
p2267
I0
I0
I01
Ntp2268
a(S'int'
p2269
S'maxItemSets'
p2270
g2270
S'maximal number of itemsets (increase if you want)'
p2271
I0
I0
I01
Ntp2272
ag102
asg26
(dp2273
sbsS'TRuleBeamInitializer_Python'
p2274
(i__main__
ClassDefinition
p2275
(dp2276
g4
I1
sg5
I01
sg6
g2274
sg7
S'TRuleBeamInitializer'
p2277
sg9
I00
sg10
(lp2278
sg12
(lp2279
sg26
(dp2280
sbsS'TDistributionAssessor'
p2281
(i__main__
ClassDefinition
p2282
(dp2283
g4
I1
sg5
I01
sg6
g2281
sg7
S'TOrange'
p2284
sg9
I01
sg10
(lp2285
sg12
(lp2286
sg26
(dp2287
sbsS'TRuleCovererAndRemover_Python'
p2288
(i__main__
ClassDefinition
p2289
(dp2290
g4
I1
sg5
I01
sg6
g2288
sg7
S'TRuleCovererAndRemover'
p2291
sg9
I00
sg10
(lp2292
sg12
(lp2293
sg26
(dp2294
sbsS'TMeasureAttribute_gainRatioA'
p2295
(i__main__
ClassDefinition
p2296
(dp2297
g4
I1
sg5
I01
sg6
g2295
sg7
S'TMeasureAttribute_gainRatio'
p2298
sg9
I00
sg10
(lp2299
sg12
(lp2300
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp2301
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2302
(i__main__
ClassDefinition
p2303
(dp2304
g4
I1
sg5
I01
sg6
g2302
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2305
sg9
I00
sg10
(lp2306
sg12
(lp2307
(S'TProbabilityEstimatorConstructor'
p2308
S'estimatorConstructor'
p2309
g2309
S'ProbabilityEstimator to be used '
p2310
I0
I0
I00
Ntp2311
asg26
(dp2312
sbsS'TCartesianClassifier'
p2313
(i__main__
ClassDefinition
p2314
(dp2315
g4
I1
sg5
I01
sg6
g2313
sg7
S'TClassifierFD'
p2316
sg9
I00
sg10
(lp2317
sg12
(lp2318
g262
ag87
ag91
asg26
(dp2319
sbsS'TLinearClassifier'
p2320
(i__main__
ClassDefinition
p2321
(dp2322
g4
I1
sg5
I01
sg6
g2320
sg7
S'TClassifierFD'
p2323
sg9
I00
sg10
(lp2324
sg12
(lp2325
(S'TFloatListList'
p2326
S'weights'
p2327
g2327
S'Computed feature weights'
p2328
I0
I0
I00
Ntp2329
a(S'TExampleTable'
p2330
S'examples'
p2331
g2331
S'Examples used to train the classifier'
p2332
I0
I0
I00
Ntp2333
ag262
ag87
ag91
asg26
(dp2334
sbsS'TTreeDescender_UnknownToBranch'
p2335
(i__main__
ClassDefinition
p2336
(dp2337
g4
I1
sg5
I01
sg6
g2335
sg7
g1446
sg9
I0
sg10
(lp2338
sg12
(lp2339
sg26
(dp2340
sbsS'TSubsetsGenerator_constSize'
p2341
(i__main__
ClassDefinition
p2342
(dp2343
g4
I1
sg5
I01
sg6
g2341
sg7
S'TSubsetsGenerator'
p2344
sg9
I00
sg10
(lp2345
sg12
(lp2346
(S'int'
p2347
S'B'
p2348
g2348
S'subset size'
p2349
I0
I0
I01
Ntp2350
ag193
asg26
(dp2351
sbsS'TColorIG_MCF'
p2352
(i__main__
ClassDefinition
p2353
(dp2354
g4
I1
sg5
I01
sg6
g2352
sg7
S'TColorIG'
p2355
sg9
I00
sg10
(lp2356
sg12
(lp2357
sg26
(dp2358
sbsS'TBasicAttrStat'
p2359
(i__main__
ClassDefinition
p2360
(dp2361
g4
I1
sg5
I01
sg6
g2359
sg7
S'TOrange'
p2362
sg9
I00
sg10
(lp2363
sg12
(lp2364
(S'float'
p2365
S'sum'
p2366
g2366
S'sum of values'
p2367
I0
I0
I01
Ntp2368
a(S'float'
p2369
S'sum2'
p2370
g2370
S'sum of squares of values'
p2371
I0
I0
I01
Ntp2372
a(S'float'
p2373
S'n'
p2374
g2374
S'number of examples for which the attribute is defined'
p2375
I0
I0
I01
Ntp2376
a(S'float'
p2377
S'min'
p2378
g2378
S'the lowest value of the attribute'
p2379
I0
I0
I01
Ntp2380
a(S'float'
p2381
S'max'
p2382
g2382
S'the highest value of the attribute'
p2383
I0
I0
I01
Ntp2384
a(S'float'
p2385
S'avg'
p2386
g2386
S'the average value of the attribute'
p2387
I0
I0
I01
Ntp2388
a(S'float'
p2389
S'dev'
p2390
g2390
S'the deviation of the value of the attribute'
p2391
I0
I0
I01
Ntp2392
a(S'TVariable'
p2393
S'variable'
p2394
g2394
S'the attribute to which the data applies'
p2395
I0
I0
I00
Ntp2396
a(S'bool'
p2397
S'holdRecomputation'
p2398
g2398
S'temporarily disables recomputation of avg and dev while adding values'
p2399
I0
I0
I01
Ntp2400
asg26
(dp2401
sbsS'TTreeSplitConstructor_Attribute'
p2402
(i__main__
ClassDefinition
p2403
(dp2404
g4
I1
sg5
I01
sg6
g2402
sg7
S'TTreeSplitConstructor_Measure'
p2405
sg9
I00
sg10
(lp2406
sg12
(lp2407
g1214
ag1218
ag715
asg26
(dp2408
sbsS'TRemoveRedundantByInduction'
p2409
(i__main__
ClassDefinition
p2410
(dp2411
g4
I1
sg5
I01
sg6
g2409
sg7
S'TRemoveRedundant'
p2412
sg9
I00
sg10
(lp2413
sg12
(lp2414
(S'TFeatureInducer'
p2415
S'featureReducer'
p2416
g2416
S'feature construction algorithm'
p2417
I0
I0
I00
Ntp2418
a(S'TMeasureAttribute'
p2419
S'measure'
p2420
g2420
S'measure for initial ordering of attributes'
p2421
I0
I0
I00
Ntp2422
a(S'TDiscretization'
p2423
S'discretization'
p2424
g2424
S'discretization method'
p2425
I0
I0
I00
Ntp2426
ag1257
asg26
(dp2427
sbsS'TFilter_conjunction'
p2428
(i__main__
ClassDefinition
p2429
(dp2430
g4
I1
sg5
I01
sg6
g2428
sg7
S'TFilter'
p2431
sg9
I00
sg10
(lp2432
sg12
(lp2433
(S'TFilterList'
p2434
S'filters'
p2435
g2435
S'a list of filters;'
p2436
I0
I0
I00
Ntp2437
ag627
ag631
asg26
(dp2438
sbsS'TExampleForMissing'
p2439
(i__main__
ClassDefinition
p2440
(dp2441
g4
I1
sg5
I01
sg6
g2439
sg7
S'TExample'
p2442
sg9
I00
sg10
(lp2443
sg12
(lp2444
(S'TEFMDataDescription'
p2445
S'dataDescription'
p2446
g2446
S'data description'
p2447
I0
I0
I00
Ntp2448
a(S'TDomain'
p2449
S'domain'
p2450
g2450
S"Example's domain"
p2451
I01
I0
I00
Ntp2452
a(S'int'
p2453
S'id'
p2454
g2454
g540
I0
I0
I01
Ntp2455
asg26
(dp2456
sbsS'TRuleBeamFilter'
p2457
(i__main__
ClassDefinition
p2458
(dp2459
g4
I1
sg5
I01
sg6
g2457
sg7
S'TOrange'
p2460
sg9
I01
sg10
(lp2461
sg12
(lp2462
sg26
(dp2463
sbsS'TBayesClassifier'
p2464
(i__main__
ClassDefinition
p2465
(dp2466
g4
I1
sg5
I01
sg6
g2464
sg7
S'TClassifierFD'
p2467
sg9
I00
sg10
(lp2468
sg12
(lp2469
(S'TDistribution'
p2470
S'distribution'
p2471
g2471
S'class distributions (P(C))'
p2472
I0
I0
I00
Ntp2473
a(S'TDomainContingency'
p2474
S'conditionalDistributions'
p2475
g2475
S'conditional distributions, P(C|A)'
p2476
I0
I0
I00
Ntp2477
a(S'TProbabilityEstimator'
p2478
S'estimator'
p2479
g2479
S'a probability estimator for P(C)'
p2480
I0
I0
I00
Ntp2481
a(S'TConditionalProbabilityEstimatorList'
p2482
S'conditionalEstimators'
p2483
g2483
S'a probability estimator for P(C|A)'
p2484
I0
I0
I00
Ntp2485
a(S'bool'
p2486
S'normalizePredictions'
p2487
g2487
S'if true, classifier will normalize predictions'
p2488
I0
I0
I01
Ntp2489
a(S'float'
p2490
S'threshold'
p2491
g2491
S'threshold probability for class 1 (for binary classes only)'
p2492
I0
I0
I01
Ntp2493
ag262
ag87
ag91
asg26
(dp2494
sbsS'TFilter_sameValue'
p2495
(i__main__
ClassDefinition
p2496
(dp2497
g4
I1
sg5
I01
sg6
g2495
sg7
S'TFilter'
p2498
sg9
I00
sg10
(lp2499
sg12
(lp2500
(S'int'
p2501
S'position'
p2502
g2502
S'position of the observed attribute'
p2503
I0
I0
I01
Ntp2504
a(S'TValue'
p2505
S'value'
p2506
g2506
S'value that the selected examples should have'
p2507
I0
I0
I01
Ntp2508
ag627
ag631
asg26
(dp2509
sbsS'TGraph'
p2510
(i__main__
ClassDefinition
p2511
(dp2512
g4
I1
sg5
I01
sg6
g2510
sg7
S'TOrange'
p2513
sg9
I01
sg10
(lp2514
sg12
(lp2515
g1395
ag1399
ag1403
asg26
(dp2516
sbsS'TPreprocessor_addClassWeight'
p2517
(i__main__
ClassDefinition
p2518
(dp2519
g4
I1
sg5
I01
sg6
g2517
sg7
S'TPreprocessor'
p2520
sg9
I00
sg10
(lp2521
sg12
(lp2522
(S'TFloatList'
p2523
S'classWeights'
p2524
g2524
S'weights of examples of particular classes'
p2525
I0
I0
I00
Ntp2526
a(S'bool'
p2527
S'equalize'
p2528
g2528
S'reweight examples to equalize class proportions'
p2529
I0
I0
I01
Ntp2530
a(S'TRandomGenerator'
p2531
S'randomGenerator'
p2532
g2532
S'random number generator'
p2533
I0
I0
I00
Ntp2534
asg26
(dp2535
sbsS'THierarchicalClusterList'
p2536
(ipyprops
ClassDefinition
p2537
(dp2538
g4
I0
sg5
I01
sg6
g2536
sg7
g133
sg9
I0
sg10
(lp2539
sg12
(lp2540
sg26
(dp2541
sbsS'TStopIMClusteringByAssessor'
p2542
(i__main__
ClassDefinition
p2543
(dp2544
g4
I1
sg5
I01
sg6
g2542
sg7
S'TOrange'
p2545
sg9
I01
sg10
(lp2546
sg12
(lp2547
sg26
(dp2548
sbsS'TValueFilter_continuous'
p2549
(i__main__
ClassDefinition
p2550
(dp2551
g4
I1
sg5
I01
sg6
g2549
sg7
S'TValueFilter'
p2552
sg9
I00
sg10
(lp2553
sg12
(lp2554
(S'float'
p2555
S'min'
p2556
(g2556
S'ref'
p2557
tp2558
S' reference value (lower bound for interval operators)'
p2559
I0
I0
I01
Ntp2560
a(S'float'
p2561
S'max'
p2562
g2562
S'upper bound for interval operators'
p2563
I0
I0
I01
Ntp2564
a(S'bool'
p2565
S'outside'
p2566
g2566
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2567
I0
I0
I01
Ntp2568
a(S'int'
p2569
S'oper'
p2570
g2570
S' operator'
p2571
I0
I0
I01
S'ValueFilter_Operator'
p2572
tp2573
ag994
ag998
asg26
(dp2574
sbsS'TAssociationRule'
p2575
(i__main__
ClassDefinition
p2576
(dp2577
g4
I1
sg5
I01
sg6
g2575
sg7
S'TOrange'
p2578
sg9
I00
sg10
(lp2579
sg12
(lp2580
(S'TExample'
p2581
S'left'
p2582
g2582
S'left side of the rule'
p2583
I01
I0
I00
Ntp2584
a(S'TExample'
p2585
S'right'
p2586
g2586
S'right side of the rule'
p2587
I01
I0
I00
Ntp2588
a(S'float'
p2589
S'support'
p2590
g2590
S'support for the rule'
p2591
I0
I0
I01
Ntp2592
a(S'float'
p2593
S'confidence'
p2594
g2594
S'confidence of the rule'
p2595
I0
I0
I01
Ntp2596
a(S'float'
p2597
S'coverage'
p2598
g2598
S"rule's coverage"
p2599
I0
I0
I01
Ntp2600
a(S'float'
p2601
S'strength'
p2602
g2602
S"rule's strength"
p2603
I0
I0
I01
Ntp2604
a(S'float'
p2605
S'lift'
p2606
g2606
S"rule's lift"
p2607
I0
I0
I01
Ntp2608
a(S'float'
p2609
S'leverage'
p2610
g2610
S"rule's leverage"
p2611
I0
I0
I01
Ntp2612
a(S'float'
p2613
S'nAppliesLeft'
p2614
g2614
S"number of examples covered by the rule's left side"
p2615
I0
I0
I01
Ntp2616
a(S'float'
p2617
S'nAppliesRight'
p2618
g2618
S"number of examples covered by the rule's right side"
p2619
I0
I0
I01
Ntp2620
a(S'float'
p2621
S'nAppliesBoth'
p2622
g2622
S'number of examples covered by the rule'
p2623
I0
I0
I01
Ntp2624
a(S'float'
p2625
S'nExamples'
p2626
g2626
S'number of learning examples'
p2627
I0
I0
I01
Ntp2628
a(S'int'
p2629
S'nLeft'
p2630
g2630
S"number of items on the rule's left side"
p2631
I01
I0
I01
Ntp2632
a(S'int'
p2633
S'nRight'
p2634
g2634
S"number of items on the rule's right side"
p2635
I01
I0
I01
Ntp2636
a(S'TExampleTable'
p2637
S'examples'
p2638
g2638
S'examples which the rule was built from'
p2639
I01
I0
I00
Ntp2640
a(S'TIntList'
p2641
S'matchLeft'
p2642
g2642
S'indices of examples that match the left side of the rule'
p2643
I01
I0
I00
Ntp2644
a(S'TIntList'
p2645
S'matchBoth'
p2646
g2646
S'indices to examples that match both sides of the rule'
p2647
I01
I0
I00
Ntp2648
asg26
(dp2649
sbsS'TValueFilter'
p2650
(i__main__
ClassDefinition
p2651
(dp2652
g4
I1
sg5
I01
sg6
g2650
sg7
S'TOrange'
p2653
sg9
I01
sg10
(lp2654
sg12
(lp2655
g994
ag998
asg26
(dp2656
S'Operator'
p2657
(lp2658
(S'None'
p2659
I0
tp2660
a(S'Equal'
p2661
I1
tp2662
a(S'NotEqual'
p2663
I2
tp2664
a(S'Less'
p2665
I3
tp2666
a(S'LessEqual'
p2667
I4
tp2668
a(S'Greater'
p2669
I5
tp2670
a(S'GreaterEqual'
p2671
I6
tp2672
a(S'Between'
p2673
I7
tp2674
a(S'Outside'
p2675
I8
tp2676
a(S'Contains'
p2677
I9
tp2678
a(S'NotContains'
p2679
I10
tp2680
a(S'BeginsWith'
p2681
I11
tp2682
a(S'EndsWith'
p2683
I12
tp2684
a(S'Listed'
p2685
I13
tp2686
assbsS'TClustersFromDistributions'
p2687
(i__main__
ClassDefinition
p2688
(dp2689
g4
I1
sg5
I01
sg6
g2687
sg7
S'TOrange'
p2690
sg9
I01
sg10
(lp2691
sg12
(lp2692
sg26
(dp2693
sbsS'TVariable'
p2694
(i__main__
ClassDefinition
p2695
(dp2696
g4
I1
sg5
I01
sg6
g2694
sg7
S'TOrange'
p2697
sg9
I01
sg10
(lp2698
sg12
(lp2699
g300
ag305
ag309
ag313
ag317
ag321
ag325
ag329
asg26
(dp2700
S'Type'
p2701
(lp2702
(S'None'
p2703
S'(int)TValue::NONE'
p2704
tp2705
a(S'Discrete'
p2706
S'(int)TValue::INTVAR'
p2707
tp2708
a(S'Continuous'
p2709
S'(int)TValue::FLOATVAR'
p2710
tp2711
a(S'Other'
p2712
S'(int)(TValue::FLOATVAR+1)'
p2713
tp2714
a(S'String'
p2715
S'(int)STRINGVAR'
p2716
tp2717
asS'MakeStatus'
p2718
(lp2719
(S'OK'
p2720
I0
tp2721
a(S'MissingValues'
p2722
I1
tp2723
a(S'NoRecognizedValues'
p2724
I2
tp2725
a(S'Incompatible'
p2726
I3
tp2727
a(S'NotFound'
p2728
I4
tp2729
assbsS'TNoiseValuesGenerator'
p2730
(i__main__
ClassDefinition
p2731
(dp2732
g4
I1
sg5
I01
sg6
g2730
sg7
S'TChangeExampleGenerator'
p2733
sg9
I00
sg10
(lp2734
sg12
(lp2735
(S'TIntFloatList'
p2736
S'replaceProbabilities'
p2737
g2737
S"probabilities for replacing attributes' values"
p2738
I0
I0
I00
Ntp2739
a(S'TRandomGenerator'
p2740
S'randomGenerator'
p2741
g2741
S'random generator'
p2742
I0
I0
I00
Ntp2743
ag277
ag281
asg26
(dp2744
sbsS'TC45TreeNodeList'
p2745
(ipyprops
ClassDefinition
p2746
(dp2747
g4
I0
sg5
I01
sg6
g2745
sg7
g133
sg9
I0
sg10
(lp2748
sg12
(lp2749
sg26
(dp2750
sbsS'TTreeExampleSplitter_UnknownsToAll'
p2751
(i__main__
ClassDefinition
p2752
(dp2753
g4
I1
sg5
I01
sg6
g2751
sg7
S'TTreeExampleSplitter'
p2754
sg9
I00
sg10
(lp2755
sg12
(lp2756
sg26
(dp2757
sbsS'TEquiNDiscretization'
p2758
(i__main__
ClassDefinition
p2759
(dp2760
g4
I1
sg5
I01
sg6
g2758
sg7
S'TDiscretization'
p2761
sg9
I00
sg10
(lp2762
sg12
(lp2763
(S'int'
p2764
S'numberOfIntervals'
p2765
g2765
S'number of intervals'
p2766
I0
I0
I01
Ntp2767
a(S'bool'
p2768
S'recursiveDivision'
p2769
g2769
S'find cut-off points by recursive division (default = true)'
p2770
I0
I0
I01
Ntp2771
asg26
(dp2772
sbsS'TImputerConstructor_average'
p2773
(i__main__
ClassDefinition
p2774
(dp2775
g4
I1
sg5
I01
sg6
g2773
sg7
S'TImputerConstructor'
p2776
sg9
I00
sg10
(lp2777
sg12
(lp2778
g153
asg26
(dp2779
sbsS'TDomainBasicAttrStat'
p2780
(ipyprops
ClassDefinition
p2781
(dp2782
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p2783
sg7
g133
sg9
I0
sg10
(lp2784
sg12
(lp2785
sg26
(dp2786
sbsS'TRuleCovererAndRemover'
p2787
(i__main__
ClassDefinition
p2788
(dp2789
g4
I1
sg5
I01
sg6
g2787
sg7
S'TOrange'
p2790
sg9
I01
sg10
(lp2791
sg12
(lp2792
sg26
(dp2793
sbsS'TImputerConstructor_random'
p2794
(i__main__
ClassDefinition
p2795
(dp2796
g4
I1
sg5
I01
sg6
g2794
sg7
S'TImputerConstructor'
p2797
sg9
I00
sg10
(lp2798
sg12
(lp2799
(S'bool'
p2800
S'deterministic'
p2801
g2801
S"tells whether to initialize random by example's CRC (default: false)"
p2802
I0
I0
I01
Ntp2803
ag153
asg26
(dp2804
sbsS'TCostWrapperClassifier'
p2805
(i__main__
ClassDefinition
p2806
(dp2807
g4
I1
sg5
I01
sg6
g2805
sg7
S'TClassifier'
p2808
sg9
I00
sg10
(lp2809
sg12
(lp2810
(S'TClassifier'
p2811
S'classifier'
p2812
g2812
S'basic classifier'
p2813
I0
I0
I00
Ntp2814
a(S'TCostMatrix'
p2815
S'costMatrix'
p2816
g2816
S'cost matrix'
p2817
I0
I0
I00
Ntp2818
ag87
ag91
asg26
(dp2819
sbsS'TPreprocessor_ignore'
p2820
(i__main__
ClassDefinition
p2821
(dp2822
g4
I1
sg5
I01
sg6
g2820
sg7
S'TPreprocessor'
p2823
sg9
I00
sg10
(lp2824
sg12
(lp2825
(S'TVarList'
p2826
S'attributes'
p2827
g2827
S'tells which attributes to remove'
p2828
I0
I0
I00
Ntp2829
asg26
(dp2830
sbsS'TEVDist'
p2831
(i__main__
ClassDefinition
p2832
(dp2833
g4
I1
sg5
I01
sg6
g2831
sg7
S'TOrange'
p2834
sg9
I00
sg10
(lp2835
sg12
(lp2836
(S'float'
p2837
S'mu'
p2838
g2838
S'mu of Fisher-Tippett distribution'
p2839
I0
I0
I01
Ntp2840
a(S'float'
p2841
S'beta'
p2842
g2842
S'beta of Fisher-Tippett distribution'
p2843
I0
I0
I01
Ntp2844
a(S'TFloatList'
p2845
S'percentiles'
p2846
g2846
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p2847
I0
I0
I00
Ntp2848
a(S'float'
p2849
S'maxPercentile'
p2850
g2850
S'maxPercentile Value, default 0.95'
p2851
I0
I0
I01
Ntp2852
a(S'float'
p2853
S'step'
p2854
g2854
S'step of percentiles, default 0.1'
p2855
I0
I0
I01
Ntp2856
asg26
(dp2857
sbsS'TMeasureAttribute_Python'
p2858
(i__main__
ClassDefinition
p2859
(dp2860
g4
I1
sg5
I01
sg6
g2858
sg7
S'TMeasureAttribute'
p2861
sg9
I00
sg10
(lp2862
sg12
(lp2863
g854
ag858
ag862
ag866
asg26
(dp2864
sbsS'TPreprocessor_take'
p2865
(i__main__
ClassDefinition
p2866
(dp2867
g4
I1
sg5
I01
sg6
g2865
sg7
S'TPreprocessor'
p2868
sg9
I00
sg10
(lp2869
sg12
(lp2870
(S'TVariableFilterMap'
p2871
S'values'
p2872
g2872
S'variable-filter pairs'
p2873
I0
I0
I00
Ntp2874
a(S'bool'
p2875
S'conjunction'
p2876
g2876
S'decides whether to take conjunction or disjunction of values'
p2877
I0
I0
I01
Ntp2878
asg26
(dp2879
sbsS'TDistributionAssessor_m'
p2880
(i__main__
ClassDefinition
p2881
(dp2882
g4
I1
sg5
I01
sg6
g2880
sg7
S'TDistributionAssessor'
p2883
sg9
I00
sg10
(lp2884
sg12
(lp2885
(S'float'
p2886
g1133
g1133
S'm for m-estimate'
p2887
I0
I0
I01
Ntp2888
asg26
(dp2889
sbsS'TThresholdDiscretizer'
p2890
(i__main__
ClassDefinition
p2891
(dp2892
g4
I1
sg5
I01
sg6
g2890
sg7
S'TDiscretizer'
p2893
sg9
I00
sg10
(lp2894
sg12
(lp2895
(S'float'
p2896
S'threshold'
p2897
g2897
S'threshold'
p2898
I0
I0
I01
Ntp2899
ag736
asg26
(dp2900
sbsS'TExampleTable'
p2901
(i__main__
ClassDefinition
p2902
(dp2903
g4
I1
sg5
I01
sg6
g2901
sg7
S'TExampleGenerator'
p2904
sg9
I00
sg10
(lp2905
sg12
(lp2906
(S'TRandomGenerator'
p2907
S'randomGenerator'
p2908
g2908
S'random generator used by randomExample'
p2909
I0
I0
I00
Ntp2910
a(S'TExampleGenerator'
p2911
S'lock'
p2912
g2912
S'the real owner of examples'
p2913
I01
I0
I00
Ntp2914
a(S'bool'
p2915
S'ownsExamples'
p2916
g2916
S'if false, examples in this table are references to examples in another table'
p2917
I01
I0
I01
Ntp2918
ag277
ag281
asg26
(dp2919
sbsS'TEVDistGetter'
p2920
(i__main__
ClassDefinition
p2921
(dp2922
g4
I1
sg5
I01
sg6
g2920
sg7
S'TOrange'
p2923
sg9
I01
sg10
(lp2924
sg12
(lp2925
sg26
(dp2926
sbsS'TTreeSplitConstructor_Threshold'
p2927
(i__main__
ClassDefinition
p2928
(dp2929
g4
I1
sg5
I01
sg6
g2927
sg7
S'TTreeSplitConstructor_Measure'
p2930
sg9
I00
sg10
(lp2931
sg12
(lp2932
g1214
ag1218
ag715
asg26
(dp2933
sbsS'TStopDistributionClustering_n'
p2934
(i__main__
ClassDefinition
p2935
(dp2936
g4
I1
sg5
I01
sg6
g2934
sg7
S'TStopDistributionClustering'
p2937
sg9
I00
sg10
(lp2938
sg12
(lp2939
(S'int'
p2940
g2374
g2374
S'number of clusters'
p2941
I0
I0
I01
Ntp2942
asg26
(dp2943
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p2944
(i__main__
ClassDefinition
p2945
(dp2946
g4
I1
sg5
I01
sg6
g2944
sg7
S'TTreeExampleSplitter'
p2947
sg9
I00
sg10
(lp2948
sg12
(lp2949
sg26
(dp2950
sbsS'TClassifier_Python'
p2951
(i__main__
ClassDefinition
p2952
(dp2953
g4
I1
sg5
I01
sg6
g2951
sg7
S'TClassifier'
p2954
sg9
I00
sg10
(lp2955
sg12
(lp2956
g87
ag91
asg26
(dp2957
sbsS'TSgnRelStress'
p2958
(i__main__
ClassDefinition
p2959
(dp2960
g4
I1
sg5
I0
sg6
g2958
sg7
S'TStressFunc'
p2961
sg9
I00
sg10
(lp2962
sg12
(lp2963
sg26
(dp2964
sbsS'TFilter_isDefined'
p2965
(i__main__
ClassDefinition
p2966
(dp2967
g4
I1
sg5
I01
sg6
g2965
sg7
S'TFilter'
p2968
sg9
I00
sg10
(lp2969
sg12
(lp2970
(S'TAttributedBoolList'
p2971
S'check'
p2972
g2972
S'tells which attributes to check; checks all if the list is empty'
p2973
I0
I0
I00
Ntp2974
ag627
ag631
asg26
(dp2975
sbsS'TRemoveRedundantByQuality'
p2976
(i__main__
ClassDefinition
p2977
(dp2978
g4
I1
sg5
I01
sg6
g2976
sg7
S'TRemoveRedundant'
p2979
sg9
I00
sg10
(lp2980
sg12
(lp2981
(S'bool'
p2982
S'remeasure'
p2983
g2983
S'reapply the measure after removal'
p2984
I0
I0
I01
Ntp2985
a(S'float'
p2986
S'minQuality'
p2987
g2987
S'minimal acceptable quality'
p2988
I0
I0
I01
Ntp2989
a(S'int'
p2990
S'removeBut'
p2991
g2991
S'the desired number of attributes'
p2992
I0
I0
I01
Ntp2993
a(S'TMeasureAttribute'
p2994
S'measure'
p2995
g2995
S'attribute quality measure'
p2996
I0
I0
I00
Ntp2997
ag1257
asg26
(dp2998
sbsS'TGraphAsList'
p2999
(i__main__
ClassDefinition
p3000
(dp3001
g4
I1
sg5
I01
sg6
g2999
sg7
S'TGraph'
p3002
sg9
I00
sg10
(lp3003
sg12
(lp3004
g1395
ag1399
ag1403
asg26
(dp3005
sbsS'TProbabilityEstimatorConstructor_m'
p3006
(i__main__
ClassDefinition
p3007
(dp3008
g4
I1
sg5
I01
sg6
g3006
sg7
S'TProbabilityEstimatorConstructor'
p3009
sg9
I00
sg10
(lp3010
sg12
(lp3011
(S'float'
p3012
g1133
g1133
S'parameter m for m-estimation'
p3013
I0
I0
I01
Ntp3014
a(S'bool'
p3015
S'renormalize'
p3016
g3016
S'computes the estimate on the original (not the normalized) distribution'
p3017
I0
I0
I01
Ntp3018
asg26
(dp3019
sbsS'TDistanceMap'
p3020
(i__main__
ClassDefinition
p3021
(dp3022
g4
I1
sg5
I01
sg6
g3020
sg7
S'TOrange'
p3023
sg9
I00
sg10
(lp3024
sg12
(lp3025
(S'int'
p3026
S'dim'
p3027
g3027
S'bitmap dimension (in cells)'
p3028
I01
I0
I01
Ntp3029
a(S'int'
p3030
S'matrixType'
p3031
g3031
S'0 lower, 1 upper, 2 symmetric'
p3032
I0
I0
I01
Ntp3033
a(S'TIntList'
p3034
S'elementIndices'
p3035
g3035
S'indices to elements (one for row + one at the end)'
p3036
I01
I0
I00
Ntp3037
asg26
(dp3038
sbsS'TDistanceMapConstructor'
p3039
(i__main__
ClassDefinition
p3040
(dp3041
g4
I1
sg5
I01
sg6
g3039
sg7
S'TOrange'
p3042
sg9
I00
sg10
(lp3043
sg12
(lp3044
(S'TSymMatrix'
p3045
S'distanceMatrix'
p3046
g3046
S'distance matrix'
p3047
I0
I0
I00
Ntp3048
a(S'TIntList'
p3049
S'order'
p3050
g3050
S'order of elements'
p3051
I0
I0
I00
Ntp3052
asg26
(dp3053
sbsS'TTransformValue'
p3054
(i__main__
ClassDefinition
p3055
(dp3056
g4
I1
sg5
I01
sg6
g3054
sg7
S'TOrange'
p3057
sg9
I01
sg10
(lp3058
sg12
(lp3059
g736
asg26
(dp3060
sbsS'TComputeDomainContingency_DomainTransformation'
p3061
(i__main__
ClassDefinition
p3062
(dp3063
g4
I1
sg5
I01
sg6
g3061
sg7
S'TComputeDomainContingency'
p3064
sg9
I00
sg10
(lp3065
sg12
(lp3066
(S'TDomainTransformerConstructor'
p3067
S'domainTransformerConstructor'
p3068
g3068
S'constructs a domain in which each attribute corresponds one of originals'
p3069
I0
I0
I00
Ntp3070
a(S'bool'
p3071
S'resultInOriginalDomain'
p3072
g3072
S'tells whether the resulting DomainContingency should consist of original attributes'
p3073
I0
I0
I01
Ntp3074
ag25
asg26
(dp3075
sbsS'TStopDistributionClustering_noBigChange'
p3076
(i__main__
ClassDefinition
p3077
(dp3078
g4
I1
sg5
I01
sg6
g3076
sg7
S'TStopDistributionClustering'
p3079
sg9
I00
sg10
(lp3080
sg12
(lp3081
sg26
(dp3082
sbsS'TTreePruner'
p3083
(i__main__
ClassDefinition
p3084
(dp3085
g4
I1
sg5
I01
sg6
g3083
sg7
S'TOrange'
p3086
sg9
I01
sg10
(lp3087
sg12
(lp3088
sg26
(dp3089
sbsg1652
(ipyprops
ClassDefinition
p3090
(dp3091
g4
I0
sg5
I01
sg6
g1652
sg7
g133
sg9
I0
sg10
(lp3092
sg12
(lp3093
sg26
(dp3094
sbsS'TStringValue'
p3095
(i__main__
ClassDefinition
p3096
(dp3097
g4
I1
sg5
I01
sg6
g3095
sg7
S'TSomeValue'
p3098
sg9
I00
sg10
(lp3099
sg12
(lp3100
sg26
(dp3101
sbsS'TVarList'
p3102
(ipyprops
ClassDefinition
p3103
(dp3104
g4
I0
sg5
I01
sg6
g3102
sg7
g133
sg9
I0
sg10
(lp3105
sg12
(lp3106
sg26
(dp3107
sbsS'TRuleLearner'
p3108
(i__main__
ClassDefinition
p3109
(dp3110
g4
I1
sg5
I01
sg6
g3108
sg7
S'TLearner'
p3111
sg9
I00
sg10
(lp3112
sg12
(lp3113
(S'TRuleDataStoppingCriteria'
p3114
S'dataStopping'
p3115
g3115
g540
I0
I0
I00
Ntp3116
a(S'TRuleStoppingCriteria'
p3117
S'ruleStopping'
p3118
g3118
g540
I0
I0
I00
Ntp3119
a(S'TRuleCovererAndRemover'
p3120
S'coverAndRemove'
p3121
g3121
g540
I0
I0
I00
Ntp3122
a(S'TRuleFinder'
p3123
S'ruleFinder'
p3124
g3124
g540
I0
I0
I00
Ntp3125
a(S'TRuleClassifierConstructor'
p3126
S'classifierConstructor'
p3127
g3127
S'classifier'
p3128
I0
I0
I00
Ntp3129
a(S'TProgressCallback'
p3130
S'progressCallback'
p3131
g3131
S'progress callback function'
p3132
I0
I0
I00
Ntp3133
a(S'bool'
p3134
S'storeExamples'
p3135
g3135
g540
I0
I0
I01
Ntp3136
a(S'int'
p3137
S'targetClass'
p3138
g3138
g540
I0
I0
I01
Ntp3139
a(S'TRuleList'
p3140
S'baseRules'
p3141
g3141
g540
I0
I0
I00
Ntp3142
ag102
asg26
(dp3143
sbsS'TOrdinal2Continuous'
p3144
(i__main__
ClassDefinition
p3145
(dp3146
g4
I1
sg5
I01
sg6
g3144
sg7
S'TTransformValue'
p3147
sg9
I00
sg10
(lp3148
sg12
(lp3149
(S'float'
p3150
S'factor'
p3151
g3151
S'number of values'
p3152
I0
I0
I01
Ntp3153
ag736
asg26
(dp3154
sbsS'TLinearLearner'
p3155
(i__main__
ClassDefinition
p3156
(dp3157
g4
I1
sg5
I01
sg6
g3155
sg7
S'TLearner'
p3158
sg9
I00
sg10
(lp3159
sg12
(lp3160
(S'int'
p3161
S'solver_type'
p3162
g3162
S' Solver type (loss function)'
p3163
I0
I0
I01
S'LinearLearner_LossFunction'
p3164
tp3165
a(S'float'
p3166
S'eps'
p3167
g3167
S'Stopping criteria'
p3168
I0
I0
I01
Ntp3169
a(S'float'
p3170
S'C'
p3171
g3171
S'Regularization parameter'
p3172
I0
I0
I01
Ntp3173
ag102
asg26
(dp3174
S'LossFunction'
p3175
(lp3176
(S'L2_LR'
p3177
I0
tp3178
a(S'L2Loss_SVM_Dual'
p3179
I1
tp3180
a(S'L2Loss_SVM'
p3181
I2
tp3182
a(S'L1Loss_SVM_Dual'
p3183
I3
tp3184
assbsS'TTreeSplitConstructor_Combined'
p3185
(i__main__
ClassDefinition
p3186
(dp3187
g4
I1
sg5
I01
sg6
g3185
sg7
S'TTreeSplitConstructor'
p3188
sg9
I00
sg10
(lp3189
sg12
(lp3190
(S'TTreeSplitConstructor'
p3191
S'discreteSplitConstructor'
p3192
g3192
S'split constructor for discrete attributes'
p3193
I0
I0
I00
Ntp3194
a(S'TTreeSplitConstructor'
p3195
S'continuousSplitConstructor'
p3196
g3196
S'split constructor for continuous attributes'
p3197
I0
I0
I00
Ntp3198
ag715
asg26
(dp3199
sbsS'TTransformValue_Python'
p3200
(i__main__
ClassDefinition
p3201
(dp3202
g4
I1
sg5
I01
sg6
g3200
sg7
S'TTransformValue'
p3203
sg9
I00
sg10
(lp3204
sg12
(lp3205
g736
asg26
(dp3206
sbsS'TRuleStoppingCriteria_Python'
p3207
(i__main__
ClassDefinition
p3208
(dp3209
g4
I1
sg5
I01
sg6
g3207
sg7
S'TRuleStoppingCriteria'
p3210
sg9
I00
sg10
(lp3211
sg12
(lp3212
sg26
(dp3213
sbsS'TRuleEvaluator_Python'
p3214
(i__main__
ClassDefinition
p3215
(dp3216
g4
I1
sg5
I01
sg6
g3214
sg7
S'TRuleEvaluator'
p3217
sg9
I00
sg10
(lp3218
sg12
(lp3219
sg26
(dp3220
sbsS'TIGBySorting'
p3221
(i__main__
ClassDefinition
p3222
(dp3223
g4
I1
sg5
I01
sg6
g3221
sg7
S'TIGConstructor'
p3224
sg9
I00
sg10
(lp3225
sg12
(lp3226
sg26
(dp3227
sbsS'TConditionalProbabilityEstimator_ByRows'
p3228
(i__main__
ClassDefinition
p3229
(dp3230
g4
I1
sg5
I01
sg6
g3228
sg7
S'TConditionalProbabilityEstimator'
p3231
sg9
I00
sg10
(lp3232
sg12
(lp3233
(S'TProbabilityEstimatorList'
p3234
S'estimatorList'
p3235
g3235
S'A list of probability estimators'
p3236
I0
I0
I00
Ntp3237
ag124
ag128
asg26
(dp3238
sbsS'TFindNearest'
p3239
(i__main__
ClassDefinition
p3240
(dp3241
g4
I1
sg5
I01
sg6
g3239
sg7
S'TOrange'
p3242
sg9
I01
sg10
(lp3243
sg12
(lp3244
g1021
ag1025
asg26
(dp3245
sbsS'TProgressCallback'
p3246
(i__main__
ClassDefinition
p3247
(dp3248
g4
I1
sg5
I01
sg6
g3246
sg7
S'TOrange'
p3249
sg9
I01
sg10
(lp3250
sg12
(lp3251
sg26
(dp3252
sbsS'THierarchicalClustering'
p3253
(i__main__
ClassDefinition
p3254
(dp3255
g4
I1
sg5
I01
sg6
g3253
sg7
S'TOrange'
p3256
sg9
I00
sg10
(lp3257
sg12
(lp3258
(S'int'
p3259
S'linkage'
p3260
g3260
S' linkage'
p3261
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3262
tp3263
a(S'bool'
p3264
S'overwriteMatrix'
p3265
g3265
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3266
I0
I0
I01
Ntp3267
a(S'TProgressCallback'
p3268
S'progressCallback'
p3269
g3269
S'progress callback function'
p3270
I0
I0
I00
Ntp3271
asg26
(dp3272
S'Linkage'
p3273
(lp3274
(S'Single'
p3275
I0
tp3276
a(S'Average'
p3277
I1
tp3278
a(S'Complete'
p3279
I2
tp3280
a(S'Ward'
p3281
I3
tp3282
assbsS'TLogRegFitter_Cholesky'
p3283
(i__main__
ClassDefinition
p3284
(dp3285
g4
I1
sg5
I01
sg6
g3283
sg7
S'TLogRegFitter'
p3286
sg9
I00
sg10
(lp3287
sg12
(lp3288
sg26
(dp3289
sbsS'TClassifierFromVar'
p3290
(i__main__
ClassDefinition
p3291
(dp3292
g4
I1
sg5
I01
sg6
g3290
sg7
S'TClassifier'
p3293
sg9
I00
sg10
(lp3294
sg12
(lp3295
(S'TVariable'
p3296
S'whichVar'
p3297
(g3297
S'variable'
p3298
tp3299
S' variable'
p3300
I0
I0
I00
Ntp3301
a(S'TTransformValue'
p3302
S'transformer'
p3303
g3303
S'transformer'
p3304
I0
I0
I00
Ntp3305
a(S'TDistribution'
p3306
S'distributionForUnknown'
p3307
g3307
S'distribution for unknown value'
p3308
I0
I0
I00
Ntp3309
a(S'bool'
p3310
S'transformUnknowns'
p3311
g3311
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3312
I0
I0
I01
Ntp3313
ag87
ag91
asg26
(dp3314
sbsg2123
(ipyprops
ClassDefinition
p3315
(dp3316
g4
I0
sg5
I01
sg6
g2123
sg7
g133
sg9
I0
sg10
(lp3317
sg12
(lp3318
sg26
(dp3319
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p3320
(i__main__
ClassDefinition
p3321
(dp3322
g4
I1
sg5
I01
sg6
g3320
sg7
S'TTreeExampleSplitter'
p3323
sg9
I00
sg10
(lp3324
sg12
(lp3325
sg26
(dp3326
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3327
(i__main__
ClassDefinition
p3328
(dp3329
g4
I1
sg5
I01
sg6
g3327
sg7
S'TTreeSplitConstructor_Measure'
p3330
sg9
I00
sg10
(lp3331
sg12
(lp3332
g1214
ag1218
ag715
asg26
(dp3333
sbsS'TClassifier'
p3334
(i__main__
ClassDefinition
p3335
(dp3336
g4
I1
sg5
I01
sg6
g3334
sg7
S'TOrange'
p3337
sg9
I00
sg10
(lp3338
sg12
(lp3339
g87
ag91
asg26
(dp3340
sbsS'TTreeSplitConstructor_Python'
p3341
(i__main__
ClassDefinition
p3342
(dp3343
g4
I1
sg5
I01
sg6
g3341
sg7
S'TTreeSplitConstructor'
p3344
sg9
I00
sg10
(lp3345
sg12
(lp3346
g715
asg26
(dp3347
sbsS'TIG'
p3348
(i__main__
ClassDefinition
p3349
(dp3350
g4
I1
sg5
I01
sg6
g3348
sg7
S'TOrange'
p3351
sg9
I00
sg10
(lp3352
sg12
(lp3353
sg26
(dp3354
sbsS'TTreeClassifier'
p3355
(i__main__
ClassDefinition
p3356
(dp3357
g4
I1
sg5
I01
sg6
g3355
sg7
S'TClassifierFD'
p3358
sg9
I00
sg10
(lp3359
sg12
(lp3360
(S'TTreeNode'
p3361
S'tree'
p3362
g3362
S'decision tree'
p3363
I0
I0
I00
Ntp3364
a(S'TTreeDescender'
p3365
S'descender'
p3366
g3366
S'object that descends down the tree'
p3367
I0
I0
I00
Ntp3368
ag262
ag87
ag91
asg26
(dp3369
sbsS'TMeasureAttribute_logOddsRatio'
p3370
(i__main__
ClassDefinition
p3371
(dp3372
g4
I1
sg5
I01
sg6
g3370
sg7
S'TMeasureAttributeFromProbabilities'
p3373
sg9
I00
sg10
(lp3374
sg12
(lp3375
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp3376
sbsS'TTreeExampleSplitter_Python'
p3377
(i__main__
ClassDefinition
p3378
(dp3379
g4
I1
sg5
I01
sg6
g3377
sg7
S'TTreeExampleSplitter'
p3380
sg9
I00
sg10
(lp3381
sg12
(lp3382
sg26
(dp3383
sbsS'TKernelFunc_Python'
p3384
(i__main__
ClassDefinition
p3385
(dp3386
g4
I1
sg5
I01
sg6
g3384
sg7
S'TKernelFunc'
p3387
sg9
I00
sg10
(lp3388
sg12
(lp3389
sg26
(dp3390
sbsS'TAdapterGenerator'
p3391
(i__main__
ClassDefinition
p3392
(dp3393
g4
I1
sg5
I01
sg6
g3391
sg7
S'TExampleGenerator'
p3394
sg9
I00
sg10
(lp3395
sg12
(lp3396
g277
ag281
asg26
(dp3397
sbsS'TIMFromExamples'
p3398
(i__main__
ClassDefinition
p3399
(dp3400
g4
I1
sg5
I01
sg6
g3398
sg7
S'TOrange'
p3401
sg9
I01
sg10
(lp3402
sg12
(lp3403
sg26
(dp3404
sbsS'TFilter_random'
p3405
(i__main__
ClassDefinition
p3406
(dp3407
g4
I1
sg5
I01
sg6
g3405
sg7
S'TFilter'
p3408
sg9
I00
sg10
(lp3409
sg12
(lp3410
(S'float'
p3411
S'prob'
p3412
g3412
S'probability of selecting an example'
p3413
I0
I0
I01
Ntp3414
a(S'TRandomGenerator'
p3415
S'randomGenerator'
p3416
g3416
S'random generator'
p3417
I0
I0
I00
Ntp3418
ag627
ag631
asg26
(dp3419
sbsS'TC45ExampleGenerator'
p3420
(i__main__
ClassDefinition
p3421
(dp3422
g4
I1
sg5
I01
sg6
g3420
sg7
S'TFileExampleGenerator'
p3423
sg9
I00
sg10
(lp3424
sg12
(lp3425
(S'TBoolList'
p3426
S'skip'
p3427
g3427
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3428
I0
I0
I00
Ntp3429
ag1479
ag1483
ag1487
ag277
ag281
asg26
(dp3430
sbsS'TProbabilityEstimatorConstructor_loess'
p3431
(i__main__
ClassDefinition
p3432
(dp3433
g4
I1
sg5
I01
sg6
g3431
sg7
S'TProbabilityEstimatorConstructor'
p3434
sg9
I00
sg10
(lp3435
sg12
(lp3436
(S'float'
p3437
S'windowProportion'
p3438
g3438
S'The proportion of points in a window for LR'
p3439
I0
I0
I01
Ntp3440
a(S'int'
p3441
S'nPoints'
p3442
g3442
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3443
I0
I0
I01
Ntp3444
a(S'int'
p3445
S'distributionMethod'
p3446
g3446
S" Meaning of the 'nPoints'"
p3447
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3448
tp3449
asg26
(dp3450
S'DistributionMethod'
p3451
(lp3452
(S'Minimal'
p3453
S'DISTRIBUTE_MINIMAL'
p3454
tp3455
a(S'Factor'
p3456
S'DISTRIBUTE_FACTOR'
p3457
tp3458
a(S'Fixed'
p3459
S'DISTRIBUTE_FIXED'
p3460
tp3461
a(S'Uniform'
p3462
S'DISTRIBUTE_UNIFORM'
p3463
tp3464
a(S'Maximal'
p3465
S'DISTRIBUTE_MAXIMAL'
p3466
tp3467
assbsS'TLogRegFitter'
p3468
(i__main__
ClassDefinition
p3469
(dp3470
g4
I1
sg5
I01
sg6
g3468
sg7
S'TOrange'
p3471
sg9
I01
sg10
(lp3472
sg12
(lp3473
sg26
(dp3474
S'ErrorCode'
p3475
(lp3476
(S'OK'
p3477
I0
tp3478
a(S'Infinity'
p3479
I1
tp3480
a(S'Divergence'
p3481
I2
tp3482
a(S'Constant'
p3483
I3
tp3484
a(S'Singularity'
p3485
I4
tp3486
assbsS'TMakeRandomIndicesCV'
p3487
(i__main__
ClassDefinition
p3488
(dp3489
g4
I1
sg5
I01
sg6
g3487
sg7
S'TMakeRandomIndices'
p3490
sg9
I00
sg10
(lp3491
sg12
(lp3492
(S'int'
p3493
S'folds'
p3494
g3494
S'number of folds'
p3495
I0
I0
I01
Ntp3496
ag650
ag654
ag658
asg26
(dp3497
sbsS'TClassifierList'
p3498
(ipyprops
ClassDefinition
p3499
(dp3500
g4
I0
sg5
I01
sg6
g3498
sg7
g133
sg9
I0
sg10
(lp3501
sg12
(lp3502
sg26
(dp3503
sbsS'TPreprocessor_removeDuplicates'
p3504
(i__main__
ClassDefinition
p3505
(dp3506
g4
I1
sg5
I01
sg6
g3504
sg7
S'TPreprocessor'
p3507
sg9
I00
sg10
(lp3508
sg12
(lp3509
sg26
(dp3510
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3511
(i__main__
ClassDefinition
p3512
(dp3513
g4
I1
sg5
I01
sg6
g3511
sg7
S'TTreeExampleSplitter'
p3514
sg9
I00
sg10
(lp3515
sg12
(lp3516
sg26
(dp3517
sbsS'TExamplesDistanceConstructor_Normalized'
p3518
(i__main__
ClassDefinition
p3519
(dp3520
g4
I1
sg5
I01
sg6
g3518
sg7
S'TExamplesDistanceConstructor'
p3521
sg9
I01
sg10
(lp3522
sg12
(lp3523
g1910
ag1914
ag1276
asg26
(dp3524
sbsS'TCostWrapperLearner'
p3525
(i__main__
ClassDefinition
p3526
(dp3527
g4
I1
sg5
I01
sg6
g3525
sg7
S'TLearner'
p3528
sg9
I00
sg10
(lp3529
sg12
(lp3530
(S'TLearner'
p3531
S'basicLearner'
p3532
g3532
S'basic learner'
p3533
I0
I0
I00
Ntp3534
a(S'TCostMatrix'
p3535
S'costMatrix'
p3536
g3536
S'cost matrix'
p3537
I0
I0
I00
Ntp3538
ag102
asg26
(dp3539
sbsS'TRandomLearner'
p3540
(i__main__
ClassDefinition
p3541
(dp3542
g4
I1
sg5
I01
sg6
g3540
sg7
S'TLearner'
p3543
sg9
I00
sg10
(lp3544
sg12
(lp3545
(S'TDistribution'
p3546
S'probabilities'
p3547
g3547
S'probabilities of predictions'
p3548
I0
I0
I00
Ntp3549
ag102
asg26
(dp3550
sbsS'TImputer_asValue'
p3551
(i__main__
ClassDefinition
p3552
(dp3553
g4
I1
sg5
I01
sg6
g3551
sg7
S'TImputer'
p3554
sg9
I00
sg10
(lp3555
sg12
(lp3556
(S'TDomain'
p3557
S'domain'
p3558
g3558
S'domain to which the values are converted'
p3559
I0
I0
I00
Ntp3560
a(S'TExample'
p3561
S'defaults'
p3562
g3562
S'values to impute instead of missing ones - for continuous attributes only!'
p3563
I0
I0
I00
Ntp3564
asg26
(dp3565
sbsS'TPearsonCorrelation'
p3566
(i__main__
ClassDefinition
p3567
(dp3568
g4
I1
sg5
I01
sg6
g3566
sg7
S'TOrange'
p3569
sg9
I00
sg10
(lp3570
sg12
(lp3571
(S'float'
p3572
S'r'
p3573
g3573
S'correlation coefficient'
p3574
I0
I0
I01
Ntp3575
a(S'float'
p3576
g2099
g2099
S't-statics significance'
p3577
I0
I0
I01
Ntp3578
a(S'int'
p3579
S'df'
p3580
g3580
S'degrees of freedom'
p3581
I0
I0
I01
Ntp3582
a(S'float'
p3583
g2070
g2070
S'significance'
p3584
I0
I0
I01
Ntp3585
asg26
(dp3586
sbsS'TDistributionAssessor_Laplace'
p3587
(i__main__
ClassDefinition
p3588
(dp3589
g4
I1
sg5
I01
sg6
g3587
sg7
S'TDistributionAssessor'
p3590
sg9
I00
sg10
(lp3591
sg12
(lp3592
sg26
(dp3593
sbsS'TColumnAssessor_Relief'
p3594
(i__main__
ClassDefinition
p3595
(dp3596
g4
I1
sg5
I01
sg6
g3594
sg7
S'TColumnAssessor'
p3597
sg9
I00
sg10
(lp3598
sg12
(lp3599
sg26
(dp3600
sbsS'TClassifierByLookupTable'
p3601
(i__main__
ClassDefinition
p3602
(dp3603
g4
I1
sg5
I01
sg6
g3601
sg7
S'TClassifier'
p3604
sg9
I01
sg10
(lp3605
sg12
(lp3606
g79
ag83
ag87
ag91
asg26
(dp3607
sbsS'TRuleBeamFinder'
p3608
(i__main__
ClassDefinition
p3609
(dp3610
g4
I1
sg5
I01
sg6
g3608
sg7
S'TRuleFinder'
p3611
sg9
I00
sg10
(lp3612
sg12
(lp3613
(S'TRuleBeamInitializer'
p3614
S'initializer'
p3615
g3615
g540
I0
I0
I00
Ntp3616
a(S'TRuleBeamRefiner'
p3617
S'refiner'
p3618
g3618
g540
I0
I0
I00
Ntp3619
a(S'TRuleBeamCandidateSelector'
p3620
S'candidateSelector'
p3621
g3621
g540
I0
I0
I00
Ntp3622
a(S'TRuleBeamFilter'
p3623
S'ruleFilter'
p3624
g3624
g540
I0
I0
I00
Ntp3625
a(S'TRuleValidator'
p3626
S'ruleStoppingValidator'
p3627
g3627
g540
I0
I0
I00
Ntp3628
a(S'TRuleValidator'
p3629
S'validator'
p3630
g3630
g540
I0
I0
I00
Ntp3631
a(S'TRuleEvaluator'
p3632
S'evaluator'
p3633
g3633
g540
I0
I0
I00
Ntp3634
asg26
(dp3635
sbsS'TC45Classifier'
p3636
(i__main__
ClassDefinition
p3637
(dp3638
g4
I1
sg5
I01
sg6
g3636
sg7
S'TClassifierFD'
p3639
sg9
I00
sg10
(lp3640
sg12
(lp3641
(S'TC45TreeNode'
p3642
S'tree'
p3643
g3643
S'tree'
p3644
I0
I0
I00
Ntp3645
ag262
ag87
ag91
asg26
(dp3646
sbsS'TGeneralExampleClustering'
p3647
(i__main__
ClassDefinition
p3648
(dp3649
g4
I1
sg5
I01
sg6
g3647
sg7
S'TOrange'
p3650
sg9
I01
sg10
(lp3651
sg12
(lp3652
sg26
(dp3653
sbsS'TMeasureAttribute_cost'
p3654
(i__main__
ClassDefinition
p3655
(dp3656
g4
I1
sg5
I01
sg6
g3654
sg7
S'TMeasureAttributeFromProbabilities'
p3657
sg9
I00
sg10
(lp3658
sg12
(lp3659
(S'TCostMatrix'
p3660
S'cost'
p3661
g3661
S'cost matrix'
p3662
I0
I0
I00
Ntp3663
ag840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp3664
sbsS'TImputerConstructor_minimal'
p3665
(i__main__
ClassDefinition
p3666
(dp3667
g4
I1
sg5
I01
sg6
g3665
sg7
S'TImputerConstructor'
p3668
sg9
I00
sg10
(lp3669
sg12
(lp3670
g153
asg26
(dp3671
sbsS'TClustersFromIM'
p3672
(i__main__
ClassDefinition
p3673
(dp3674
g4
I1
sg5
I01
sg6
g3672
sg7
S'TOrange'
p3675
sg9
I01
sg10
(lp3676
sg12
(lp3677
sg26
(dp3678
sbsS'TFilter_values'
p3679
(i__main__
ClassDefinition
p3680
(dp3681
g4
I1
sg5
I01
sg6
g3679
sg7
S'TFilter'
p3682
sg9
I00
sg10
(lp3683
sg12
(lp3684
(S'TValueFilterList'
p3685
S'conditions'
p3686
g3686
S'a list of filters'
p3687
I0
I0
I00
Ntp3688
a(S'bool'
p3689
S'conjunction'
p3690
g3690
S'if true, filter computes conjunction, otherwise disjunction'
p3691
I0
I0
I01
Ntp3692
ag627
ag631
asg26
(dp3693
S'Operator'
p3694
(lp3695
(S'None'
p3696
I0
tp3697
a(S'Equal'
p3698
I1
tp3699
a(S'NotEqual'
p3700
I2
tp3701
a(S'Less'
p3702
I3
tp3703
a(S'LessEqual'
p3704
I4
tp3705
a(S'Greater'
p3706
I5
tp3707
a(S'GreaterEqual'
p3708
I6
tp3709
a(S'Between'
p3710
I7
tp3711
a(S'Outside'
p3712
I8
tp3713
a(S'Contains'
p3714
I9
tp3715
a(S'NotContains'
p3716
I10
tp3717
a(S'BeginsWith'
p3718
I11
tp3719
a(S'EndsWith'
p3720
I12
tp3721
a(S'Listed'
p3722
I13
tp3723
assbsS'TRuleClassifier'
p3724
(i__main__
ClassDefinition
p3725
(dp3726
g4
I1
sg5
I01
sg6
g3724
sg7
S'TClassifier'
p3727
sg9
I01
sg10
(lp3728
sg12
(lp3729
g541
ag544
ag547
ag87
ag91
asg26
(dp3730
sbsS'TAssociationRules'
p3731
(ipyprops
ClassDefinition
p3732
(dp3733
g4
I0
sg5
I01
sg6
g3731
sg7
g133
sg9
I0
sg10
(lp3734
sg12
(lp3735
sg26
(dp3736
sbsS'TMajorityLearner'
p3737
(i__main__
ClassDefinition
p3738
(dp3739
g4
I1
sg5
I01
sg6
g3737
sg7
S'TLearner'
p3740
sg9
I00
sg10
(lp3741
sg12
(lp3742
(S'TProbabilityEstimatorConstructor'
p3743
S'estimatorConstructor'
p3744
g3744
S'constructs probability estimator'
p3745
I0
I0
I00
Ntp3746
a(S'TDistribution'
p3747
S'aprioriDistribution'
p3748
g3748
S'apriori class distribution'
p3749
I0
I0
I00
Ntp3750
ag102
asg26
(dp3751
sbsS'TSVMLearner'
p3752
(i__main__
ClassDefinition
p3753
(dp3754
g4
I1
sg5
I01
sg6
g3752
sg7
S'TLearner'
p3755
sg9
I00
sg10
(lp3756
sg12
(lp3757
(S'int'
p3758
S'svm_type'
p3759
g3759
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p3760
I0
I0
I01
S'SVMLearner_SVMType'
p3761
tp3762
a(S'int'
p3763
S'kernel_type'
p3764
g3764
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p3765
I0
I0
I01
S'SVMLearner_Kernel'
p3766
tp3767
a(S'float'
p3768
S'degree'
p3769
g3769
S'polynomial kernel degree'
p3770
I0
I0
I01
Ntp3771
a(S'float'
p3772
S'gamma'
p3773
g3773
S'poly/rbf/sigm parameter'
p3774
I0
I0
I01
Ntp3775
a(S'float'
p3776
S'coef0'
p3777
g3777
S'poly/sigm parameter'
p3778
I0
I0
I01
Ntp3779
a(S'float'
p3780
S'cache_size'
p3781
g3781
S'cache size in MB'
p3782
I0
I0
I01
Ntp3783
a(S'float'
p3784
S'eps'
p3785
g3785
S'stopping criteria'
p3786
I0
I0
I01
Ntp3787
a(S'float'
p3788
g3171
g3171
S'for C_SVC and C_SVR'
p3789
I0
I0
I01
Ntp3790
a(S'float'
p3791
S'nu'
p3792
g3792
S'for NU_SVC and ONE_CLASS'
p3793
I0
I0
I01
Ntp3794
a(S'float'
p3795
g2070
g2070
S'for C_SVR'
p3796
I0
I0
I01
Ntp3797
a(S'int'
p3798
S'shrinking'
p3799
g3799
S'shrinking'
p3800
I0
I0
I01
Ntp3801
a(S'int'
p3802
S'probability'
p3803
g3803
S'probability'
p3804
I0
I0
I01
Ntp3805
a(S'bool'
p3806
S'verbose'
p3807
g3807
S'verbose'
p3808
I0
I0
I01
Ntp3809
a(S'TKernelFunc'
p3810
S'kernelFunc'
p3811
g3811
S'custom kernel function'
p3812
I0
I0
I00
Ntp3813
ag102
asg26
(dp3814
S'Kernel'
p3815
(lp3816
(S'Linear'
p3817
S'LINEAR'
p3818
tp3819
a(S'Polynomial'
p3820
S'POLY'
p3821
tp3822
a(S'RBF'
p3823
S'RBF'
p3824
tp3825
a(S'Sigmoid'
p3826
S'SIGMOID'
p3827
tp3828
a(S'Custom'
p3829
S'CUSTOM'
p3830
tp3831
asS'SVMType'
p3832
(lp3833
(S'C_SVC'
p3834
S'C_SVC'
p3835
tp3836
a(S'Nu_SVC'
p3837
S'NU_SVC'
p3838
tp3839
a(S'OneClass'
p3840
S'ONE_CLASS'
p3841
tp3842
a(S'Epsilon_SVR'
p3843
S'EPSILON_SVR'
p3844
tp3845
a(S'Nu_SVR'
p3846
S'NU_SVR'
p3847
tp3848
assbsS'TImputerConstructor_defaults'
p3849
(i__main__
ClassDefinition
p3850
(dp3851
g4
I1
sg5
I01
sg6
g3849
sg7
S'TImputerConstructor'
p3852
sg9
I00
sg10
(lp3853
sg12
(lp3854
(S'TExample'
p3855
S'defaults'
p3856
g3856
S'default values to be imputed instead missing ones'
p3857
I0
I0
I00
Ntp3858
ag153
asg26
(dp3859
sbsS'TConditionalProbabilityEstimatorConstructor'
p3860
(i__main__
ClassDefinition
p3861
(dp3862
g4
I1
sg5
I01
sg6
g3860
sg7
S'TOrange'
p3863
sg9
I01
sg10
(lp3864
sg12
(lp3865
sg26
(dp3866
sbsS'TPreprocessor_takeMissingClasses'
p3867
(i__main__
ClassDefinition
p3868
(dp3869
g4
I1
sg5
I01
sg6
g3867
sg7
S'TPreprocessor'
p3870
sg9
I00
sg10
(lp3871
sg12
(lp3872
sg26
(dp3873
sbsS'TClustersFromIMByAssessor'
p3874
(i__main__
ClassDefinition
p3875
(dp3876
g4
I1
sg5
I01
sg6
g3874
sg7
S'TClustersFromIM'
p3877
sg9
I00
sg10
(lp3878
sg12
(lp3879
(S'TColumnAssessor'
p3880
S'columnAssessor'
p3881
g3881
S'column quality assessor'
p3882
I0
I0
I00
Ntp3883
a(S'TStopIMClusteringByAssessor'
p3884
S'stopCriterion'
p3885
g3885
S'stop criterion'
p3886
I0
I0
I00
Ntp3887
asg26
(dp3888
sbsS'TRuleValidator_LRS'
p3889
(i__main__
ClassDefinition
p3890
(dp3891
g4
I1
sg5
I01
sg6
g3889
sg7
S'TRuleValidator'
p3892
sg9
I00
sg10
(lp3893
sg12
(lp3894
(S'float'
p3895
S'alpha'
p3896
g3896
g540
I0
I0
I01
Ntp3897
a(S'float'
p3898
S'min_coverage'
p3899
g3899
g540
I0
I0
I01
Ntp3900
a(S'int'
p3901
S'max_rule_complexity'
p3902
g3902
g540
I0
I0
I01
Ntp3903
a(S'float'
p3904
S'min_quality'
p3905
g3905
g540
I0
I0
I01
Ntp3906
asg26
(dp3907
sbsS'TLogRegFitter_Python'
p3908
(i__main__
ClassDefinition
p3909
(dp3910
g4
I1
sg5
I01
sg6
g3908
sg7
S'TLogRegFitter'
p3911
sg9
I00
sg10
(lp3912
sg12
(lp3913
sg26
(dp3914
sbsS'TNetwork'
p3915
(i__main__
ClassDefinition
p3916
(dp3917
g4
I1
sg5
I0
sg6
g3915
sg7
S'TGraphAsList'
p3918
sg9
I00
sg10
(lp3919
sg12
(lp3920
(S'TExampleTable'
p3921
S'items'
p3922
g3922
S'ExampleTable of vertices data'
p3923
I0
I0
I00
Ntp3924
a(S'TExampleTable'
p3925
S'links'
p3926
g3926
S'ExampleTable of edges data'
p3927
I0
I0
I00
Ntp3928
ag1395
ag1399
ag1403
asg26
(dp3929
sbsS'TMakeRandomIndices2'
p3930
(i__main__
ClassDefinition
p3931
(dp3932
g4
I1
sg5
I01
sg6
g3930
sg7
S'TMakeRandomIndices'
p3933
sg9
I00
sg10
(lp3934
sg12
(lp3935
(S'float'
p3936
S'p0'
p3937
g3937
S"a proportion or a number of 0's"
p3938
I0
I0
I01
Ntp3939
ag650
ag654
ag658
asg26
(dp3940
sbsS'TValueList'
p3941
(ipyprops
ClassDefinition
p3942
(dp3943
g4
I0
sg5
I01
sg6
S'TValueList'
p3944
sg7
g133
sg9
I0
sg10
(lp3945
sg12
(lp3946
sg26
(dp3947
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p3948
(i__main__
ClassDefinition
p3949
(dp3950
g4
I1
sg5
I01
sg6
g3948
sg7
S'TTreeExampleSplitter'
p3951
sg9
I00
sg10
(lp3952
sg12
(lp3953
sg26
(dp3954
sbsS'TContDistribution'
p3955
(i__main__
ClassDefinition
p3956
(dp3957
g4
I1
sg5
I01
sg6
g3955
sg7
S'TDistribution'
p3958
sg9
I00
sg10
(lp3959
sg12
(lp3960
(S'TFloatList'
p3961
S'variances'
p3962
g3962
S'variances'
p3963
I0
I0
I00
Ntp3964
a(S'float'
p3965
S'sum'
p3966
g3966
S'weighted sum of elements (i.e. N*average)'
p3967
I01
I0
I01
Ntp3968
a(S'float'
p3969
S'sum2'
p3970
g3970
S'weighted sum of squares of elements'
p3971
I01
I0
I01
Ntp3972
ag1061
ag1065
ag1069
ag1073
ag1077
ag1081
ag1085
ag1089
asg26
(dp3973
sbsS'TTreeDescender_UnknownMergeAsSelector'
p3974
(i__main__
ClassDefinition
p3975
(dp3976
g4
I1
sg5
I01
sg6
g3974
sg7
g1446
sg9
I0
sg10
(lp3977
sg12
(lp3978
sg26
(dp3979
sbsS'TContingencyAttrClass'
p3980
(i__main__
ClassDefinition
p3981
(dp3982
g4
I1
sg5
I01
sg6
g3980
sg7
S'TContingencyClass'
p3983
sg9
I00
sg10
(lp3984
sg12
(lp3985
g1513
ag1517
ag1522
ag1526
ag1530
ag1534
asg26
(dp3986
sbsS'TDomainTransformerConstructor'
p3987
(i__main__
ClassDefinition
p3988
(dp3989
g4
I1
sg5
I01
sg6
g3987
sg7
S'TOrange'
p3990
sg9
I01
sg10
(lp3991
sg12
(lp3992
(S'bool'
p3993
S'preservesOrder'
p3994
g3994
S'a flag telling that original attributes have corresponding attribute in the same order'
p3995
I01
I0
I01
Ntp3996
a(S'bool'
p3997
S'preservesAttributes'
p3998
g3998
S'a flag telling whether each original has a corresponding new attribute'
p3999
I01
I0
I01
Ntp4000
asg26
(dp4001
sbsS'TPythonValueSpecial'
p4002
(i__main__
ClassDefinition
p4003
(dp4004
g4
I1
sg5
I01
sg6
g4002
sg7
S'TOrange'
p4005
sg9
I00
sg10
(lp4006
sg12
(lp4007
(S'int'
p4008
S'valueType'
p4009
g4009
S'value type'
p4010
I0
I0
I01
Ntp4011
asg26
(dp4012
sbsS'TIGConstructor'
p4013
(i__main__
ClassDefinition
p4014
(dp4015
g4
I1
sg5
I01
sg6
g4013
sg7
S'TOrange'
p4016
sg9
I01
sg10
(lp4017
sg12
(lp4018
sg26
(dp4019
sbsS'TProbabilityEstimatorConstructor'
p4020
(i__main__
ClassDefinition
p4021
(dp4022
g4
I1
sg5
I01
sg6
g4020
sg7
S'TOrange'
p4023
sg9
I01
sg10
(lp4024
sg12
(lp4025
sg26
(dp4026
sbsS'TTreeNodeList'
p4027
(ipyprops
ClassDefinition
p4028
(dp4029
g4
I0
sg5
I01
sg6
g4027
sg7
g133
sg9
I0
sg10
(lp4030
sg12
(lp4031
sg26
(dp4032
sbsS'TFloatVariable'
p4033
(i__main__
ClassDefinition
p4034
(dp4035
g4
I1
sg5
I01
sg6
g4033
sg7
S'TVariable'
p4036
sg9
I00
sg10
(lp4037
sg12
(lp4038
(S'float'
p4039
S'startValue'
p4040
g4040
S'lowest value'
p4041
I0
I0
I01
Ntp4042
a(S'float'
p4043
S'endValue'
p4044
g4044
S'highest value'
p4045
I0
I0
I01
Ntp4046
a(S'float'
p4047
S'stepValue'
p4048
g4048
S'step'
p4049
I0
I0
I01
Ntp4050
a(S'int'
p4051
S'numberOfDecimals'
p4052
g4052
S'number of digits after decimal point'
p4053
I0
I0
I01
Ntp4054
a(S'bool'
p4055
S'scientificFormat'
p4056
g4056
S'use scientific format in output'
p4057
I0
I0
I01
Ntp4058
a(S'int'
p4059
S'adjustDecimals'
p4060
g4060
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4061
I0
I0
I01
Ntp4062
ag300
ag305
ag309
ag313
ag317
ag321
ag325
ag329
asg26
(dp4063
sbsS'TImputer_random'
p4064
(i__main__
ClassDefinition
p4065
(dp4066
g4
I1
sg5
I01
sg6
g4064
sg7
S'TImputer'
p4067
sg9
I00
sg10
(lp4068
sg12
(lp4069
(S'bool'
p4070
S'imputeClass'
p4071
g4071
S'Tells whether to impute the class values, too (default: true)'
p4072
I0
I0
I01
Ntp4073
a(S'bool'
p4074
S'deterministic'
p4075
g4075
S"tells whether to initialize random by example's CRC (default: false)"
p4076
I0
I0
I01
Ntp4077
a(S'TDistributionList'
p4078
S'distributions'
p4079
g4079
S'probability functions'
p4080
I0
I0
I00
Ntp4081
asg26
(dp4082
sbsS'TFilter_hasMeta'
p4083
(i__main__
ClassDefinition
p4084
(dp4085
g4
I1
sg5
I01
sg6
g4083
sg7
S'TFilter'
p4086
sg9
I00
sg10
(lp4087
sg12
(lp4088
(S'int'
p4089
S'id'
p4090
g4090
S'meta attribute id'
p4091
I0
I0
I01
Ntp4092
ag627
ag631
asg26
(dp4093
sbsS'TProbabilityEstimatorConstructor_kernel'
p4094
(i__main__
ClassDefinition
p4095
(dp4096
g4
I1
sg5
I01
sg6
g4094
sg7
S'TProbabilityEstimatorConstructor'
p4097
sg9
I00
sg10
(lp4098
sg12
(lp4099
(S'float'
p4100
S'minImpact'
p4101
g4101
S'Minimal impact the point must have to be counted'
p4102
I0
I0
I01
Ntp4103
a(S'float'
p4104
S'smoothing'
p4105
g4105
S'Smoothing factor'
p4106
I0
I0
I01
Ntp4107
a(S'int'
p4108
S'nPoints'
p4109
g4109
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4110
I0
I0
I01
Ntp4111
asg26
(dp4112
sbsS'TRuleCovererAndRemover_Default'
p4113
(i__main__
ClassDefinition
p4114
(dp4115
g4
I1
sg5
I01
sg6
g4113
sg7
S'TRuleCovererAndRemover'
p4116
sg9
I00
sg10
(lp4117
sg12
(lp4118
sg26
(dp4119
sbsS'TMakeRandomIndices'
p4120
(i__main__
ClassDefinition
p4121
(dp4122
g4
I1
sg5
I01
sg6
g4120
sg7
S'TOrange'
p4123
sg9
I00
sg10
(lp4124
sg12
(lp4125
g650
ag654
ag658
asg26
(dp4126
S'Stratification'
p4127
(lp4128
(S'StratifiedIfPossible'
p4129
S'-1'
p4130
tp4131
a(S'NotStratified'
p4132
I0
tp4133
a(S'Stratified'
p4134
I1
tp4135
assbsS'TFilter_Python'
p4136
(i__main__
ClassDefinition
p4137
(dp4138
g4
I1
sg5
I01
sg6
g4136
sg7
S'TFilter'
p4139
sg9
I00
sg10
(lp4140
sg12
(lp4141
g627
ag631
asg26
(dp4142
sbsS'TRuleBeamInitializer_Default'
p4143
(i__main__
ClassDefinition
p4144
(dp4145
g4
I1
sg5
I01
sg6
g4143
sg7
S'TRuleBeamInitializer'
p4146
sg9
I00
sg10
(lp4147
sg12
(lp4148
sg26
(dp4149
sbsS'TExamplesDistanceConstructor_Python'
p4150
(i__main__
ClassDefinition
p4151
(dp4152
g4
I1
sg5
I01
sg6
g4150
sg7
S'TExamplesDistanceConstructor'
p4153
sg9
I00
sg10
(lp4154
sg12
(lp4155
g1276
asg26
(dp4156
sbsS'TTreeDescender_Python'
p4157
(i__main__
ClassDefinition
p4158
(dp4159
g4
I1
sg5
I01
sg6
g4157
sg7
S'TTreeDescender'
p4160
sg9
I00
sg10
(lp4161
sg12
(lp4162
sg26
(dp4163
sbsS'TSubsetsGenerator_constant'
p4164
(i__main__
ClassDefinition
p4165
(dp4166
g4
I1
sg5
I01
sg6
g4164
sg7
S'TSubsetsGenerator'
p4167
sg9
I00
sg10
(lp4168
sg12
(lp4169
(S'TVarList'
p4170
S'constant'
p4171
g4171
S'a subset that is returned (once!)'
p4172
I0
I0
I00
Ntp4173
ag193
asg26
(dp4174
sbsS'TGaussianNoiseGenerator'
p4175
(i__main__
ClassDefinition
p4176
(dp4177
g4
I1
sg5
I01
sg6
g4175
sg7
S'TChangeExampleGenerator'
p4178
sg9
I00
sg10
(lp4179
sg12
(lp4180
(S'TIntFloatList'
p4181
S'deviations'
p4182
g4182
S"deviations for attributes' values"
p4183
I0
I0
I00
Ntp4184
a(S'TRandomGenerator'
p4185
S'randomGenerator'
p4186
g4186
S'random generator'
p4187
I0
I0
I00
Ntp4188
ag277
ag281
asg26
(dp4189
sbsS'TClustersFromDistributionsByAssessor'
p4190
(i__main__
ClassDefinition
p4191
(dp4192
g4
I1
sg5
I01
sg6
g4190
sg7
S'TClustersFromDistributions'
p4193
sg9
I00
sg10
(lp4194
sg12
(lp4195
(S'TDistributionAssessor'
p4196
S'distributionAssessor'
p4197
g4197
S'column quality assessor'
p4198
I0
I0
I00
Ntp4199
a(S'TStopDistributionClustering'
p4200
S'stopCriterion'
p4201
g4201
S'stop criterion'
p4202
I0
I0
I00
Ntp4203
a(S'float'
p4204
S'minProfitProportion'
p4205
g4205
S'minimal merge profit'
p4206
I0
I0
I01
Ntp4207
asg26
(dp4208
sbsS'TExamplesDistance_Hamming'
p4209
(i__main__
ClassDefinition
p4210
(dp4211
g4
I1
sg5
I01
sg6
g4209
sg7
S'TExamplesDistance'
p4212
sg9
I00
sg10
(lp4213
sg12
(lp4214
(S'bool'
p4215
S'ignoreClass'
p4216
g4216
S'if true (default), class value is ignored when computing distances'
p4217
I0
I0
I01
Ntp4218
a(S'bool'
p4219
S'ignoreUnknowns'
p4220
g4220
S'if true (default: false) unknown values are ignored in computation'
p4221
I0
I0
I01
Ntp4222
asg26
(dp4223
sbsS'TDefaultClassifier'
p4224
(i__main__
ClassDefinition
p4225
(dp4226
g4
I1
sg5
I01
sg6
g4224
sg7
S'TClassifier'
p4227
sg9
I00
sg10
(lp4228
sg12
(lp4229
(S'TValue'
p4230
S'defaultVal'
p4231
g4231
S'default prediction'
p4232
I0
I0
I01
Ntp4233
a(S'TDistribution'
p4234
S'defaultDistribution'
p4235
g4235
S'default distribution'
p4236
I0
I0
I00
Ntp4237
ag87
ag91
asg26
(dp4238
sbsS'TColumnAssessor_Kramer'
p4239
(i__main__
ClassDefinition
p4240
(dp4241
g4
I1
sg5
I01
sg6
g4239
sg7
S'TColumnAssessor'
p4242
sg9
I00
sg10
(lp4243
sg12
(lp4244
sg26
(dp4245
sbsS'TEVDistGetter_Python'
p4246
(i__main__
ClassDefinition
p4247
(dp4248
g4
I1
sg5
I01
sg6
g4246
sg7
S'TEVDistGetter'
p4249
sg9
I00
sg10
(lp4250
sg12
(lp4251
sg26
(dp4252
sbsS'TDiscretization'
p4253
(i__main__
ClassDefinition
p4254
(dp4255
g4
I1
sg5
I01
sg6
g4253
sg7
S'TOrange'
p4256
sg9
I01
sg10
(lp4257
sg12
(lp4258
sg26
(dp4259
sbsS'TTreeSplitConstructor_Measure'
p4260
(i__main__
ClassDefinition
p4261
(dp4262
g4
I1
sg5
I01
sg6
g4260
sg7
S'TTreeSplitConstructor'
p4263
sg9
I01
sg10
(lp4264
sg12
(lp4265
g1214
ag1218
ag715
asg26
(dp4266
sbsS'TTreeNode'
p4267
(i__main__
ClassDefinition
p4268
(dp4269
g4
I1
sg5
I01
sg6
g4267
sg7
S'TOrange'
p4270
sg9
I00
sg10
(lp4271
sg12
(lp4272
(S'TClassifier'
p4273
S'nodeClassifier'
p4274
g4274
S'classifies an example'
p4275
I0
I0
I00
Ntp4276
a(S'TDistribution'
p4277
S'distribution'
p4278
g4278
S'distribution of classes in the node'
p4279
I0
I0
I00
Ntp4280
a(S'TDomainContingency'
p4281
S'contingency'
p4282
g4282
S'domain contingency for examples in the node'
p4283
I0
I0
I00
Ntp4284
a(S'TExampleGenerator'
p4285
S'examples'
p4286
g4286
S'learning examples (if stored)'
p4287
I0
I0
I00
Ntp4288
a(S'int'
p4289
S'weightID'
p4290
g4290
S'weightID used to construct this node'
p4291
I0
I0
I01
Ntp4292
a(S'TClassifier'
p4293
S'branchSelector'
p4294
g4294
S'classifier that select a branch for an example'
p4295
I0
I0
I00
Ntp4296
a(S'TTreeNodeList'
p4297
S'branches'
p4298
g4298
S'classifiers presenting the branches'
p4299
I0
I0
I00
Ntp4300
a(S'TStringList'
p4301
S'branchDescriptions'
p4302
g4302
S'descriptions of branches'
p4303
I0
I0
I00
Ntp4304
a(S'TDiscDistribution'
p4305
S'branchSizes'
p4306
g4306
S'numbers of examples in branches'
p4307
I0
I0
I00
Ntp4308
asg26
(dp4309
sbsS'TTransformValue_IsDefined'
p4310
(i__main__
ClassDefinition
p4311
(dp4312
g4
I1
sg5
I01
sg6
g4310
sg7
S'TTransformValue'
p4313
sg9
I00
sg10
(lp4314
sg12
(lp4315
g736
asg26
(dp4316
sbsS'TFilter_hasClassValue'
p4317
(i__main__
ClassDefinition
p4318
(dp4319
g4
I1
sg5
I01
sg6
g4317
sg7
S'TFilter'
p4320
sg9
I00
sg10
(lp4321
sg12
(lp4322
g627
ag631
asg26
(dp4323
sbsS'TStopDistributionClustering_binary'
p4324
(i__main__
ClassDefinition
p4325
(dp4326
g4
I1
sg5
I01
sg6
g4324
sg7
S'TStopDistributionClustering'
p4327
sg9
I00
sg10
(lp4328
sg12
(lp4329
sg26
(dp4330
sbsS'TIMByRows'
p4331
(i__main__
ClassDefinition
p4332
(dp4333
g4
I1
sg5
I01
sg6
g4331
sg7
S'TOrange'
p4334
sg9
I00
sg10
(lp4335
sg12
(lp4336
(S'int'
p4337
S'varType'
p4338
g4338
S' class variable type'
p4339
I0
I0
I01
S'Variable_Type'
p4340
tp4341
asg26
(dp4342
sbsS'TRuleFinder'
p4343
(i__main__
ClassDefinition
p4344
(dp4345
g4
I1
sg5
I01
sg6
g4343
sg7
S'TOrange'
p4346
sg9
I01
sg10
(lp4347
sg12
(lp4348
g3631
ag3634
asg26
(dp4349
sbsS'TProbabilityEstimatorConstructor_relative'
p4350
(i__main__
ClassDefinition
p4351
(dp4352
g4
I1
sg5
I01
sg6
g4350
sg7
S'TProbabilityEstimatorConstructor'
p4353
sg9
I00
sg10
(lp4354
sg12
(lp4355
sg26
(dp4356
sbsS'TNetworkOptimization'
p4357
(i__main__
ClassDefinition
p4358
(dp4359
g4
I1
sg5
I0
sg6
g4357
sg7
S'TOrange'
p4360
sg9
I00
sg10
(lp4361
sg12
(lp4362
(S'TNetwork'
p4363
S'network'
p4364
g4364
S'Network'
p4365
I0
I0
I00
Ntp4366
asg26
(dp4367
sbsS'TKernelFunc'
p4368
(i__main__
ClassDefinition
p4369
(dp4370
g4
I1
sg5
I01
sg6
g4368
sg7
S'TOrange'
p4371
sg9
I01
sg10
(lp4372
sg12
(lp4373
sg26
(dp4374
sbsS'TMeasureAttribute_gini'
p4375
(i__main__
ClassDefinition
p4376
(dp4377
g4
I1
sg5
I01
sg6
g4375
sg7
S'TMeasureAttributeFromProbabilities'
p4378
sg9
I00
sg10
(lp4379
sg12
(lp4380
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp4381
sbsS'TRule'
p4382
(i__main__
ClassDefinition
p4383
(dp4384
g4
I1
sg5
I01
sg6
g4382
sg7
S'TOrange'
p4385
sg9
I00
sg10
(lp4386
sg12
(lp4387
(S'TFilter'
p4388
S'filter'
p4389
g4389
S'stored filter for this rule'
p4390
I0
I0
I00
Ntp4391
a(S'TFilter'
p4392
S'valuesFilter'
p4393
g4393
S'Filter_values representation of main filter (sometimes needed)'
p4394
I0
I0
I00
Ntp4395
a(S'TClassifier'
p4396
S'classifier'
p4397
g4397
S'classifies an example'
p4398
I0
I0
I00
Ntp4399
a(S'TLearner'
p4400
S'learner'
p4401
g4401
S'learns a classifier from data'
p4402
I0
I0
I00
Ntp4403
a(S'TRule'
p4404
S'parentRule'
p4405
g4405
g540
I0
I0
I00
Ntp4406
a(S'TDistribution'
p4407
S'baseDist'
p4408
g4408
S'initial distribution'
p4409
I0
I0
I00
Ntp4410
a(S'TDistribution'
p4411
S'classDistribution'
p4412
g4412
S'distribution of classes covered by the rule'
p4413
I0
I0
I00
Ntp4414
a(S'TExampleTable'
p4415
S'examples'
p4416
g4416
S'covered examples'
p4417
I0
I0
I00
Ntp4418
a(S'int'
p4419
S'weightID'
p4420
g4420
S'weight for the stored examples'
p4421
I0
I0
I01
Ntp4422
a(S'float'
p4423
S'quality'
p4424
g4424
S'some measure of rule quality'
p4425
I0
I0
I01
Ntp4426
a(S'int'
p4427
S'complexity'
p4428
g4428
g540
I0
I0
I01
Ntp4429
a(S'float'
p4430
S'chi'
p4431
g4431
g540
I0
I0
I01
Ntp4432
a(S'int'
p4433
S'requiredConditions'
p4434
g4434
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4435
I0
I0
I01
Ntp4436
asg26
(dp4437
sbsS'TIntervalDiscretizer'
p4438
(i__main__
ClassDefinition
p4439
(dp4440
g4
I1
sg5
I01
sg6
g4438
sg7
S'TDiscretizer'
p4441
sg9
I00
sg10
(lp4442
sg12
(lp4443
(S'TFloatList'
p4444
S'points'
p4445
g4445
S'cut-off points'
p4446
I0
I0
I00
Ntp4447
ag736
asg26
(dp4448
sbsS'TClassifierByLookupTable2'
p4449
(i__main__
ClassDefinition
p4450
(dp4451
g4
I1
sg5
I01
sg6
g4449
sg7
S'TClassifierByLookupTable'
p4452
sg9
I00
sg10
(lp4453
sg12
(lp4454
(S'TVariable'
p4455
S'variable1'
p4456
g4456
S'the first attribute used for classification'
p4457
I01
I0
I00
Ntp4458
a(S'TVariable'
p4459
S'variable2'
p4460
g4460
S'the second attribute used for classification'
p4461
I01
I0
I00
Ntp4462
a(S'int'
p4463
S'noOfValues1'
p4464
g4464
S'number of values of the first attribute'
p4465
I01
I0
I01
Ntp4466
a(S'int'
p4467
S'noOfValues2'
p4468
g4468
S'number of values of the second attribute'
p4469
I01
I0
I01
Ntp4470
a(S'TEFMDataDescription'
p4471
S'dataDescription'
p4472
g4472
S'data description'
p4473
I0
I0
I00
Ntp4474
ag79
ag83
ag87
ag91
asg26
(dp4475
sbsS'TEquiDistDiscretization'
p4476
(i__main__
ClassDefinition
p4477
(dp4478
g4
I1
sg5
I01
sg6
g4476
sg7
S'TDiscretization'
p4479
sg9
I00
sg10
(lp4480
sg12
(lp4481
(S'int'
p4482
S'numberOfIntervals'
p4483
g4483
S'number of intervals'
p4484
I0
I0
I01
Ntp4485
asg26
(dp4486
sbsS'TExampleGenerator'
p4487
(i__main__
ClassDefinition
p4488
(dp4489
g4
I1
sg5
I01
sg6
g4487
sg7
S'TOrange'
p4490
sg9
I01
sg10
(lp4491
sg12
(lp4492
g277
ag281
asg26
(dp4493
sbsS'TClassifierByLookupTable1'
p4494
(i__main__
ClassDefinition
p4495
(dp4496
g4
I1
sg5
I01
sg6
g4494
sg7
S'TClassifierByLookupTable'
p4497
sg9
I00
sg10
(lp4498
sg12
(lp4499
(S'TVariable'
p4500
S'variable1'
p4501
(g4501
S'variable'
p4502
tp4503
S' attribute used for classification'
p4504
I01
I0
I00
Ntp4505
ag79
ag83
ag87
ag91
asg26
(dp4506
sbsS'TRuleClassifierConstructor_Python'
p4507
(i__main__
ClassDefinition
p4508
(dp4509
g4
I1
sg5
I01
sg6
g4507
sg7
S'TRuleClassifierConstructor'
p4510
sg9
I00
sg10
(lp4511
sg12
(lp4512
sg26
(dp4513
sbsS'TRemoveRedundantOneValue'
p4514
(i__main__
ClassDefinition
p4515
(dp4516
g4
I1
sg5
I01
sg6
g4514
sg7
S'TRemoveRedundant'
p4517
sg9
I00
sg10
(lp4518
sg12
(lp4519
(S'bool'
p4520
S'onData'
p4521
g4521
S'observe the actual number of value on the data (not on attribute definitions)'
p4522
I0
I0
I01
Ntp4523
ag1257
asg26
(dp4524
sbsS'TDistributionAssessor_Relief'
p4525
(i__main__
ClassDefinition
p4526
(dp4527
g4
I1
sg5
I01
sg6
g4525
sg7
S'TDistributionAssessor'
p4528
sg9
I00
sg10
(lp4529
sg12
(lp4530
sg26
(dp4531
sbsS'TEnumVariable'
p4532
(i__main__
ClassDefinition
p4533
(dp4534
g4
I1
sg5
I01
sg6
g4532
sg7
S'TVariable'
p4535
sg9
I00
sg10
(lp4536
sg12
(lp4537
(S'TStringList'
p4538
S'values'
p4539
g4539
S"attribute's values"
p4540
I0
I0
I00
Ntp4541
a(S'int'
p4542
S'baseValue'
p4543
g4543
S'the index of the base value'
p4544
I0
I0
I01
Ntp4545
ag300
ag305
ag309
ag313
ag317
ag321
ag325
ag329
asg26
(dp4546
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p4547
(i__main__
ClassDefinition
p4548
(dp4549
g4
I1
sg5
I01
sg6
g4547
sg7
S'TConditionalProbabilityEstimatorConstructor'
p4550
sg9
I00
sg10
(lp4551
sg12
(lp4552
(S'float'
p4553
S'windowProportion'
p4554
g4554
S'The proportion of points in a window for LR'
p4555
I0
I0
I01
Ntp4556
a(S'int'
p4557
S'nPoints'
p4558
g4558
S'The number of points on curve'
p4559
I0
I0
I01
Ntp4560
a(S'int'
p4561
S'distributionMethod'
p4562
g4562
S" Meaning of the 'nPoints'"
p4563
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p4564
tp4565
asg26
(dp4566
S'DistributionMethod'
p4567
(lp4568
(S'Minimal'
p4569
S'DISTRIBUTE_MINIMAL'
p4570
tp4571
a(S'Factor'
p4572
S'DISTRIBUTE_FACTOR'
p4573
tp4574
a(S'Fixed'
p4575
S'DISTRIBUTE_FIXED'
p4576
tp4577
a(S'Uniform'
p4578
S'DISTRIBUTE_UNIFORM'
p4579
tp4580
a(S'Maximal'
p4581
S'DISTRIBUTE_MAXIMAL'
p4582
tp4583
assbsS'TPreprocessor_addMissing'
p4584
(i__main__
ClassDefinition
p4585
(dp4586
g4
I1
sg5
I01
sg6
g4584
sg7
S'TPreprocessor'
p4587
sg9
I00
sg10
(lp4588
sg12
(lp4589
(S'TVariableFloatMap'
p4590
S'proportions'
p4591
g4591
S'proportion of removed values for individual values'
p4592
I0
I0
I00
Ntp4593
a(S'float'
p4594
S'defaultProportion'
p4595
g4595
S'default proportion of removed values (for attributes not specified above)'
p4596
I0
I0
I01
Ntp4597
a(S'int'
p4598
S'specialType'
p4599
g4599
S'special value type (1=DC, 2=DK)'
p4600
I0
I0
I01
Ntp4601
a(S'TRandomGenerator'
p4602
S'randomGenerator'
p4603
g4603
S'random number generator'
p4604
I0
I0
I00
Ntp4605
asg26
(dp4606
sbsS'TRuleBeamCandidateSelector'
p4607
(i__main__
ClassDefinition
p4608
(dp4609
g4
I1
sg5
I01
sg6
g4607
sg7
S'TOrange'
p4610
sg9
I01
sg10
(lp4611
sg12
(lp4612
sg26
(dp4613
sbsS'TSubsetsGenerator_minMaxSize'
p4614
(i__main__
ClassDefinition
p4615
(dp4616
g4
I1
sg5
I01
sg6
g4614
sg7
S'TSubsetsGenerator'
p4617
sg9
I00
sg10
(lp4618
sg12
(lp4619
(S'int'
p4620
S'min'
p4621
g4621
S'minimal subset size'
p4622
I0
I0
I01
Ntp4623
a(S'int'
p4624
S'max'
p4625
g4625
S'maximal subset size'
p4626
I0
I0
I01
Ntp4627
ag193
asg26
(dp4628
sbsS'TMakeRandomIndicesN'
p4629
(i__main__
ClassDefinition
p4630
(dp4631
g4
I1
sg5
I01
sg6
g4629
sg7
S'TMakeRandomIndices'
p4632
sg9
I00
sg10
(lp4633
sg12
(lp4634
(S'TFloatList'
p4635
g2070
g2070
S'probabilities of indices (last is 1-sum(p))'
p4636
I0
I0
I00
Ntp4637
ag650
ag654
ag658
asg26
(dp4638
sbsS'TValueFilter_stringList'
p4639
(i__main__
ClassDefinition
p4640
(dp4641
g4
I1
sg5
I01
sg6
g4639
sg7
S'TValueFilter'
p4642
sg9
I00
sg10
(lp4643
sg12
(lp4644
(S'TStringList'
p4645
S'values'
p4646
g4646
S'accepted values'
p4647
I0
I0
I00
Ntp4648
a(S'bool'
p4649
S'caseSensitive'
p4650
g4650
S'if true (default), the comparison is case sensitive'
p4651
I0
I0
I01
Ntp4652
ag994
ag998
asg26
(dp4653
sbsS'TContingencyClass'
p4654
(i__main__
ClassDefinition
p4655
(dp4656
g4
I1
sg5
I01
sg6
g4654
sg7
S'TContingency'
p4657
sg9
I01
sg10
(lp4658
sg12
(lp4659
g1513
ag1517
ag1522
ag1526
ag1530
ag1534
asg26
(dp4660
sbsS'TAssociationClassifier'
p4661
(i__main__
ClassDefinition
p4662
(dp4663
g4
I1
sg5
I01
sg6
g4661
sg7
S'TClassifierFD'
p4664
sg9
I00
sg10
(lp4665
sg12
(lp4666
(S'TAssociationRules'
p4667
S'rules'
p4668
g4668
S'association rules'
p4669
I0
I0
I00
Ntp4670
a(S'int'
p4671
S'voteWeight'
p4672
g4672
S'vote weight (s=support, c=confidence, p=product)'
p4673
I0
I0
I01
Ntp4674
ag262
ag87
ag91
asg26
(dp4675
sbsS'TDomainDistributions'
p4676
(ipyprops
ClassDefinition
p4677
(dp4678
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p4679
sg7
g133
sg9
I0
sg10
(lp4680
sg12
(lp4681
sg26
(dp4682
sbsS'TSVMLearnerSparse'
p4683
(i__main__
ClassDefinition
p4684
(dp4685
g4
I1
sg5
I01
sg6
g4683
sg7
S'TSVMLearner'
p4686
sg9
I00
sg10
(lp4687
sg12
(lp4688
(S'bool'
p4689
S'useNonMeta'
p4690
g4690
S'include non meta attributes in the learning process'
p4691
I0
I0
I01
Ntp4692
ag3762
ag3767
ag3771
ag3775
ag3779
ag3783
ag3787
ag3790
ag3794
ag3797
ag3801
ag3805
ag3809
ag3813
ag102
asg26
(dp4693
sbsS'TDomain'
p4694
(i__main__
ClassDefinition
p4695
(dp4696
g4
I1
sg5
I01
sg6
g4694
sg7
S'TOrange'
p4697
sg9
I00
sg10
(lp4698
sg12
(lp4699
(S'TVariable'
p4700
S'classVar'
p4701
g4701
S'class variable'
p4702
I01
I0
I00
Ntp4703
a(S'TVarList'
p4704
S'attributes'
p4705
g4705
S'list of attributes, excluding the class'
p4706
I01
I0
I00
Ntp4707
a(S'TVarList'
p4708
S'variables'
p4709
g4709
S'list of attributes, including the class at the end of the list'
p4710
I01
I0
I00
Ntp4711
a(S'int'
p4712
S'version'
p4713
g4713
S"unique version identifier; it's changed each time a domain is changed"
p4714
I01
I0
I01
Ntp4715
asg26
(dp4716
sbsS'TTreePruner_SameMajority'
p4717
(i__main__
ClassDefinition
p4718
(dp4719
g4
I1
sg5
I01
sg6
g4717
sg7
S'TTreePruner'
p4720
sg9
I00
sg10
(lp4721
sg12
(lp4722
sg26
(dp4723
sbsS'TSubsetsGenerator_constant_iterator'
p4724
(i__main__
ClassDefinition
p4725
(dp4726
g4
I1
sg5
I01
sg6
g4724
sg7
S'TSubsetsGenerator_iterator'
p4727
sg9
I00
sg10
(lp4728
sg12
(lp4729
(S'TVarList'
p4730
S'constant'
p4731
g4731
S'a subset that is returned (once!)'
p4732
I0
I0
I00
Ntp4733
a(S'bool'
p4734
S'moreToCome'
p4735
g4735
g540
I0
I0
I01
Ntp4736
ag464
asg26
(dp4737
sbsS'TExampleDistConstructor'
p4738
(i__main__
ClassDefinition
p4739
(dp4740
g4
I1
sg5
I01
sg6
g4738
sg7
S'TOrange'
p4741
sg9
I01
sg10
(lp4742
sg12
(lp4743
sg26
(dp4744
sbsS'TIMByIMByRows'
p4745
(i__main__
ClassDefinition
p4746
(dp4747
g4
I1
sg5
I01
sg6
g4745
sg7
S'TIMConstructor'
p4748
sg9
I00
sg10
(lp4749
sg12
(lp4750
g1163
asg26
(dp4751
sbsS'TAlignmentList'
p4752
(ipyprops
ClassDefinition
p4753
(dp4754
g4
I0
sg5
I01
sg6
g4752
sg7
g133
sg9
I0
sg10
(lp4755
sg12
(lp4756
sg26
(dp4757
sbsS'TDiscrete2Continuous'
p4758
(i__main__
ClassDefinition
p4759
(dp4760
g4
I1
sg5
I01
sg6
g4758
sg7
S'TTransformValue'
p4761
sg9
I00
sg10
(lp4762
sg12
(lp4763
(S'int'
p4764
S'value'
p4765
g4765
S'target value'
p4766
I0
I0
I01
Ntp4767
a(S'bool'
p4768
S'invert'
p4769
g4769
S'give 1.0 to values not equal to the target'
p4770
I0
I0
I01
Ntp4771
a(S'bool'
p4772
S'zeroBased'
p4773
g4773
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p4774
I0
I0
I01
Ntp4775
ag736
asg26
(dp4776
sbsS'TDomainDiscretization'
p4777
(i__main__
ClassDefinition
p4778
(dp4779
g4
I1
sg5
I01
sg6
g4777
sg7
S'TOrange'
p4780
sg9
I00
sg10
(lp4781
sg12
(lp4782
(S'TDiscretization'
p4783
S'discretization'
p4784
g4784
S'discretization'
p4785
I0
I0
I00
Ntp4786
asg26
(dp4787
sbsS'TColumnAssessor_m'
p4788
(i__main__
ClassDefinition
p4789
(dp4790
g4
I1
sg5
I01
sg6
g4788
sg7
S'TColumnAssessor'
p4791
sg9
I00
sg10
(lp4792
sg12
(lp4793
(S'float'
p4794
g1133
g1133
S'm for m-estimate'
p4795
I0
I0
I01
Ntp4796
asg26
(dp4797
sbsS'TImputer_defaults'
p4798
(i__main__
ClassDefinition
p4799
(dp4800
g4
I1
sg5
I01
sg6
g4798
sg7
S'TImputer'
p4801
sg9
I00
sg10
(lp4802
sg12
(lp4803
(S'TExample'
p4804
S'defaults'
p4805
g4805
S'values that are to be inserted instead of missing ones'
p4806
I0
I0
I00
Ntp4807
asg26
(dp4808
sbsS'TContingency'
p4809
(i__main__
ClassDefinition
p4810
(dp4811
g4
I1
sg5
I01
sg6
g4809
sg7
S'TOrange'
p4812
sg9
I00
sg10
(lp4813
sg12
(lp4814
g1513
ag1517
ag1522
ag1526
ag1530
ag1534
asg26
(dp4815
sbsS'TImputer_Python'
p4816
(i__main__
ClassDefinition
p4817
(dp4818
g4
I1
sg5
I01
sg6
g4816
sg7
S'TImputer'
p4819
sg9
I00
sg10
(lp4820
sg12
(lp4821
sg26
(dp4822
sbsS'TClassifierGenerator'
p4823
(i__main__
ClassDefinition
p4824
(dp4825
g4
I1
sg5
I01
sg6
g4823
sg7
S'TExampleGenerator'
p4826
sg9
I00
sg10
(lp4827
sg12
(lp4828
(S'TClassifier'
p4829
S'classify'
p4830
g4830
S'classifier'
p4831
I0
I0
I00
Ntp4832
ag277
ag281
asg26
(dp4833
sbsS'TRuleDataStoppingCriteria_Python'
p4834
(i__main__
ClassDefinition
p4835
(dp4836
g4
I1
sg5
I01
sg6
g4834
sg7
S'TRuleDataStoppingCriteria'
p4837
sg9
I00
sg10
(lp4838
sg12
(lp4839
sg26
(dp4840
sbsS'TTreeDescender_UnknownToCommonSelector'
p4841
(i__main__
ClassDefinition
p4842
(dp4843
g4
I1
sg5
I01
sg6
g4841
sg7
g1446
sg9
I0
sg10
(lp4844
sg12
(lp4845
sg26
(dp4846
sbsS'THierarchicalCluster'
p4847
(i__main__
ClassDefinition
p4848
(dp4849
g4
I1
sg5
I01
sg6
g4847
sg7
S'TOrange'
p4850
sg9
I00
sg10
(lp4851
sg12
(lp4852
(S'THierarchicalClusterList'
p4853
S'branches'
p4854
g4854
S'subclusters'
p4855
I0
I0
I00
Ntp4856
a(S'float'
p4857
S'height'
p4858
g4858
S'height'
p4859
I0
I0
I01
Ntp4860
a(S'TIntList'
p4861
S'mapping'
p4862
g4862
S'indices to the list of all elements in the clustering'
p4863
I0
I0
I00
Ntp4864
a(S'int'
p4865
S'first'
p4866
g4866
S"the index into 'elements' to the first element of the cluster"
p4867
I0
I0
I01
Ntp4868
a(S'int'
p4869
S'last'
p4870
g4870
S"the index into 'elements' to the one after the last element of the cluster"
p4871
I0
I0
I01
Ntp4872
asg26
(dp4873
sbsS'TPreprocessIM'
p4874
(i__main__
ClassDefinition
p4875
(dp4876
g4
I1
sg5
I01
sg6
g4874
sg7
S'TOrange'
p4877
sg9
I01
sg10
(lp4878
sg12
(lp4879
sg26
(dp4880
sbsS'TLongList'
p4881
(ipyprops
ClassDefinition
p4882
(dp4883
g4
I0
sg5
I01
sg6
g4881
sg7
g133
sg9
I0
sg10
(lp4884
sg12
(lp4885
sg26
(dp4886
sbsS'TBasketFeeder'
p4887
(i__main__
ClassDefinition
p4888
(dp4889
g4
I1
sg5
I01
sg6
g4887
sg7
S'TOrange'
p4890
sg9
I00
sg10
(lp4891
sg12
(lp4892
(S'bool'
p4893
S'dontStore'
p4894
g4894
S'disables items storing'
p4895
I0
I0
I01
Ntp4896
a(S'bool'
p4897
S'dontCheckStored'
p4898
g4898
S'disables items lookup in the global cache'
p4899
I0
I0
I01
Ntp4900
a(S'TDomain'
p4901
S'domain'
p4902
g4902
S'domain where the meta attributes are stored'
p4903
I0
I0
I00
Ntp4904
a(S'TDomain'
p4905
S'sourceDomain'
p4906
g4906
S'domain with items that can be reused'
p4907
I0
I0
I00
Ntp4908
asg26
(dp4909
sbsS'TRuleEvaluator_Laplace'
p4910
(i__main__
ClassDefinition
p4911
(dp4912
g4
I1
sg5
I01
sg6
g4910
sg7
S'TRuleEvaluator'
p4913
sg9
I00
sg10
(lp4914
sg12
(lp4915
sg26
(dp4916
sbsS'TColumnAssessor_N'
p4917
(i__main__
ClassDefinition
p4918
(dp4919
g4
I1
sg5
I01
sg6
g4917
sg7
S'TColumnAssessor'
p4920
sg9
I00
sg10
(lp4921
sg12
(lp4922
sg26
(dp4923
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p4924
(i__main__
ClassDefinition
p4925
(dp4926
g4
I1
sg5
I01
sg6
g4924
sg7
S'TSubsetsGenerator_iterator'
p4927
sg9
I00
sg10
(lp4928
sg12
(lp4929
(S'int'
p4930
g2348
g2348
g540
I01
I0
I01
Ntp4931
a(S'int'
p4932
S'max'
p4933
g4933
S'maximal subset size'
p4934
I0
I0
I01
Ntp4935
a(S'bool'
p4936
S'moreToCome'
p4937
g4937
g540
I01
I0
I01
Ntp4938
ag464
asg26
(dp4939
sbsS'TRuleEvaluator_mEVC'
p4940
(i__main__
ClassDefinition
p4941
(dp4942
g4
I1
sg5
I01
sg6
g4940
sg7
S'TRuleEvaluator'
p4943
sg9
I00
sg10
(lp4944
sg12
(lp4945
(S'float'
p4946
g1133
g1133
S'Parameter m for m-estimate after EVC correction'
p4947
I0
I0
I01
Ntp4948
a(S'TEVDistGetter'
p4949
S'evDistGetter'
p4950
g4950
S'get EVC distribution for chi correction'
p4951
I0
I0
I00
Ntp4952
a(S'TVariable'
p4953
S'probVar'
p4954
g4954
S'probability coverage variable (meta usually)'
p4955
I0
I0
I00
Ntp4956
a(S'TRuleValidator'
p4957
S'validator'
p4958
g4958
S'rule validator for best rule'
p4959
I0
I0
I00
Ntp4960
a(S'int'
p4961
S'min_improved'
p4962
g4962
S'minimal number of improved examples'
p4963
I0
I0
I01
Ntp4964
a(S'float'
p4965
S'min_improved_perc'
p4966
g4966
S'minimal percentage of improved examples'
p4967
I0
I0
I01
Ntp4968
a(S'TRule'
p4969
S'bestRule'
p4970
g4970
S'best rule found and evaluated given conditions (min_improved, validator)'
p4971
I0
I0
I00
Ntp4972
a(S'float'
p4973
S'ruleAlpha'
p4974
g4974
S"minimal 'true' rule significance"
p4975
I0
I0
I01
Ntp4976
a(S'float'
p4977
S'attributeAlpha'
p4978
g4978
S'minimal attribute significance'
p4979
I0
I0
I01
Ntp4980
a(S'bool'
p4981
S'returnExpectedProb'
p4982
g4982
S'if true, evaluator returns expected class probability, if false, current class probability'
p4983
I0
I0
I01
Ntp4984
a(S'int'
p4985
S'optimismReduction'
p4986
g4986
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p4987
I0
I0
I01
Ntp4988
asg26
(dp4989
sbsS'TRuleStoppingCriteria'
p4990
(i__main__
ClassDefinition
p4991
(dp4992
g4
I1
sg5
I01
sg6
g4990
sg7
S'TOrange'
p4993
sg9
I01
sg10
(lp4994
sg12
(lp4995
sg26
(dp4996
sbsS'TExample'
p4997
(i__main__
ClassDefinition
p4998
(dp4999
g4
I1
sg5
I01
sg6
g4997
sg7
S'TOrange'
p5000
sg9
I00
sg10
(lp5001
sg12
(lp5002
g2452
ag2455
asg26
(dp5003
sbsS'TFixedDiscretization'
p5004
(i__main__
ClassDefinition
p5005
(dp5006
g4
I1
sg5
I01
sg6
g5004
sg7
S'TDiscretization'
p5007
sg9
I00
sg10
(lp5008
sg12
(lp5009
(S'TFloatList'
p5010
S'points'
p5011
g5011
S'cut-off points'
p5012
I0
I0
I00
Ntp5013
asg26
(dp5014
sbsS'TDomainContingency'
p5015
(ipyprops
ClassDefinition
p5016
(dp5017
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5018
sg7
g133
sg9
I0
sg10
(lp5019
sg12
(lp5020
sg26
(dp5021
sbsS'TPreprocessor_addGaussianClassNoise'
p5022
(i__main__
ClassDefinition
p5023
(dp5024
g4
I1
sg5
I01
sg6
g5022
sg7
S'TPreprocessor'
p5025
sg9
I00
sg10
(lp5026
sg12
(lp5027
(S'float'
p5028
S'deviation'
p5029
g5029
S'class deviation'
p5030
I0
I0
I01
Ntp5031
a(S'TRandomGenerator'
p5032
S'randomGenerator'
p5033
g5033
S'random number generator'
p5034
I0
I0
I00
Ntp5035
asg26
(dp5036
sbsS'TRuleDataStoppingCriteria'
p5037
(i__main__
ClassDefinition
p5038
(dp5039
g4
I1
sg5
I01
sg6
g5037
sg7
S'TOrange'
p5040
sg9
I01
sg10
(lp5041
sg12
(lp5042
sg26
(dp5043
sbsS'TPreprocessor_filter'
p5044
(i__main__
ClassDefinition
p5045
(dp5046
g4
I1
sg5
I01
sg6
g5044
sg7
S'TPreprocessor'
p5047
sg9
I00
sg10
(lp5048
sg12
(lp5049
(S'TFilter'
p5050
S'filter'
p5051
g5051
S'filter'
p5052
I0
I0
I00
Ntp5053
asg26
(dp5054
sbsS'TSOMNodeList'
p5055
(ipyprops
ClassDefinition
p5056
(dp5057
g4
I0
sg5
I01
sg6
g5055
sg7
g133
sg9
I0
sg10
(lp5058
sg12
(lp5059
sg26
(dp5060
sbsS'TExampleDistBySorting'
p5061
(i__main__
ClassDefinition
p5062
(dp5063
g4
I1
sg5
I01
sg6
g5061
sg7
S'TExampleDistConstructor'
p5064
sg9
I00
sg10
(lp5065
sg12
(lp5066
sg26
(dp5067
sbsS'TGraphAsMatrix'
p5068
(i__main__
ClassDefinition
p5069
(dp5070
g4
I1
sg5
I01
sg6
g5068
sg7
S'TGraph'
p5071
sg9
I00
sg10
(lp5072
sg12
(lp5073
g1395
ag1399
ag1403
asg26
(dp5074
sbsS'TIMClustering'
p5075
(i__main__
ClassDefinition
p5076
(dp5077
g4
I1
sg5
I01
sg6
g5075
sg7
S'TOrange'
p5078
sg9
I00
sg10
(lp5079
sg12
(lp5080
(S'TIM'
p5081
S'im'
p5082
g5082
S'incompatibilty matrix'
p5083
I0
I0
I00
Ntp5084
a(S'TIntList'
p5085
S'clusters'
p5086
g5086
S'cluster index for each matrix column'
p5087
I0
I0
I00
Ntp5088
a(S'int'
p5089
S'maxCluster'
p5090
g5090
S'the highest cluster index'
p5091
I0
I0
I01
Ntp5092
a(S'float'
p5093
S'quality'
p5094
g5094
S'cluster quality'
p5095
I0
I0
I01
Ntp5096
asg26
(dp5097
sbsS'TMDS'
p5098
(i__main__
ClassDefinition
p5099
(dp5100
g4
I1
sg5
I0
sg6
g5098
sg7
S'TOrange'
p5101
sg9
I00
sg10
(lp5102
sg12
(lp5103
(S'TSymMatrix'
p5104
S'distances'
p5105
g5105
S'SymMatrix that holds the original real distances'
p5106
I0
I0
I00
Ntp5107
a(S'TSymMatrix'
p5108
S'projectedDistances'
p5109
g5109
S'SymMatrix that holds the projected distances'
p5110
I0
I0
I00
Ntp5111
a(S'TSymMatrix'
p5112
S'stress'
p5113
g5113
S'SymMatrix that holds the pointwise stress values'
p5114
I0
I0
I00
Ntp5115
a(S'TFloatListList'
p5116
S'points'
p5117
g5117
S'Holds the current projected point configuration'
p5118
I0
I0
I00
Ntp5119
a(S'TProgressCallback'
p5120
S'progressCallback'
p5121
g5121
S'progressCallback function'
p5122
I0
I0
I00
Ntp5123
a(S'bool'
p5124
S'freshD'
p5125
g5125
g540
I01
I0
I01
Ntp5126
a(S'float'
p5127
S'avgStress'
p5128
g5128
g540
I01
I0
I01
Ntp5129
a(S'int'
p5130
S'dim'
p5131
g5131
g540
I01
I0
I01
Ntp5132
a(S'int'
p5133
S'n'
p5134
g5134
g540
I01
I0
I01
Ntp5135
asg26
(dp5136
sbsS'TValueFilter_discrete'
p5137
(i__main__
ClassDefinition
p5138
(dp5139
g4
I1
sg5
I01
sg6
g5137
sg7
S'TValueFilter'
p5140
sg9
I00
sg10
(lp5141
sg12
(lp5142
(S'TValueList'
p5143
S'values'
p5144
g5144
S'accepted values'
p5145
I0
I0
I00
Ntp5146
a(S'bool'
p5147
S'negate'
p5148
g5148
S'negate'
p5149
I0
I0
I01
Ntp5150
ag994
ag998
asg26
(dp5151
sbsNNsS'TComputeDomainContingency'
p5152
(i__main__
ClassDefinition
p5153
(dp5154
g4
I1
sg5
I01
sg6
g5152
sg7
S'TOrange'
p5155
sg9
I00
sg10
(lp5156
sg12
(lp5157
g25
asg26
(dp5158
sbsS'TAssociationRulesInducer'
p5159
(i__main__
ClassDefinition
p5160
(dp5161
g4
I1
sg5
I01
sg6
g5159
sg7
S'TOrange'
p5162
sg9
I00
sg10
(lp5163
sg12
(lp5164
(S'int'
p5165
S'maxItemSets'
p5166
g5166
S'maximal number of itemsets (increase if you want)'
p5167
I0
I0
I01
Ntp5168
a(S'float'
p5169
S'confidence'
p5170
g5170
S'required confidence'
p5171
I0
I0
I01
Ntp5172
a(S'float'
p5173
S'support'
p5174
g5174
S'required support'
p5175
I0
I0
I01
Ntp5176
a(S'bool'
p5177
S'classificationRules'
p5178
g5178
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5179
I0
I0
I01
Ntp5180
a(S'bool'
p5181
S'storeExamples'
p5182
g5182
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5183
I0
I0
I01
Ntp5184
asg26
(dp5185
sbsS'TTreeStopCriteria'
p5186
(i__main__
ClassDefinition
p5187
(dp5188
g4
I1
sg5
I01
sg6
g5186
sg7
S'TOrange'
p5189
sg9
I00
sg10
(lp5190
sg12
(lp5191
sg26
(dp5192
sbsS'TPreprocessor_addMissingClasses'
p5193
(i__main__
ClassDefinition
p5194
(dp5195
g4
I1
sg5
I01
sg6
g5193
sg7
S'TPreprocessor'
p5196
sg9
I00
sg10
(lp5197
sg12
(lp5198
(S'float'
p5199
S'proportion'
p5200
g5200
S'proportion of removed class values'
p5201
I0
I0
I01
Ntp5202
a(S'int'
p5203
S'specialType'
p5204
g5204
S'special value type (1=DC, 2=DK)'
p5205
I0
I0
I01
Ntp5206
a(S'TRandomGenerator'
p5207
S'randomGenerator'
p5208
g5208
S'random number generator'
p5209
I0
I0
I00
Ntp5210
asg26
(dp5211
sbsS'TLookupLearner'
p5212
(i__main__
ClassDefinition
p5213
(dp5214
g4
I1
sg5
I01
sg6
g5212
sg7
S'TLearner'
p5215
sg9
I00
sg10
(lp5216
sg12
(lp5217
(S'TLearner'
p5218
S'learnerForUnknown'
p5219
g5219
S'a learner for classifying cases not found in the table'
p5220
I0
I0
I00
Ntp5221
a(S'bool'
p5222
S'allowFastLookups'
p5223
g5223
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5224
I0
I0
I01
Ntp5225
a(S'int'
p5226
S'unknownsHandling'
p5227
g5227
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5228
I0
I0
I01
Ntp5229
ag102
asg26
(dp5230
sbsS'TBasketExampleGenerator'
p5231
(i__main__
ClassDefinition
p5232
(dp5233
g4
I1
sg5
I01
sg6
g5231
sg7
S'TFileExampleGenerator'
p5234
sg9
I00
sg10
(lp5235
sg12
(lp5236
g1479
ag1483
ag1487
ag277
ag281
asg26
(dp5237
sbsS'TRuleEvaluator_Entropy'
p5238
(i__main__
ClassDefinition
p5239
(dp5240
g4
I1
sg5
I01
sg6
g5238
sg7
S'TRuleEvaluator'
p5241
sg9
I00
sg10
(lp5242
sg12
(lp5243
sg26
(dp5244
sbsS'TMeasureAttribute_chiSquare'
p5245
(i__main__
ClassDefinition
p5246
(dp5247
g4
I1
sg5
I01
sg6
g5245
sg7
S'TMeasureAttributeFromProbabilities'
p5248
sg9
I00
sg10
(lp5249
sg12
(lp5250
(S'bool'
p5251
S'computeProbabilities'
p5252
g5252
g540
I0
I0
I01
Ntp5253
ag840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp5254
sbsS'TDistribution'
p5255
(i__main__
ClassDefinition
p5256
(dp5257
g4
I1
sg5
I01
sg6
g5255
sg7
S'TSomeValue'
p5258
sg9
I01
sg10
(lp5259
sg12
(lp5260
g1061
ag1065
ag1069
ag1073
ag1077
ag1081
ag1085
ag1089
asg26
(dp5261
sbsS'TExamplesDistance_DTW'
p5262
(i__main__
ClassDefinition
p5263
(dp5264
g4
I1
sg5
I01
sg6
g5262
sg7
S'TExamplesDistance_Normalized'
p5265
sg9
I00
sg10
(lp5266
sg12
(lp5267
(S'int'
p5268
S'dtwDistance'
p5269
g5269
S' distance measure between individual attributes (default: square of difference)'
p5270
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5271
tp5272
ag413
ag417
ag421
ag425
ag429
ag433
ag437
asg26
(dp5273
S'DistanceType'
p5274
(lp5275
(S'Euclidean'
p5276
I0
tp5277
a(S'Derivative'
p5278
I1
tp5279
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5280
(i__main__
ClassDefinition
p5281
(dp5282
g4
I1
sg5
I01
sg6
g5280
sg7
S'TTreeExampleSplitter'
p5283
sg9
I00
sg10
(lp5284
sg12
(lp5285
sg26
(dp5286
sbsS'TTreePruner_m'
p5287
(i__main__
ClassDefinition
p5288
(dp5289
g4
I1
sg5
I01
sg6
g5287
sg7
S'TTreePruner'
p5290
sg9
I00
sg10
(lp5291
sg12
(lp5292
(S'float'
p5293
g1133
g1133
S'm for m-estimate'
p5294
I0
I0
I01
Ntp5295
asg26
(dp5296
sbsS'TImputer'
p5297
(i__main__
ClassDefinition
p5298
(dp5299
g4
I1
sg5
I01
sg6
g5297
sg7
S'TOrange'
p5300
sg9
I01
sg10
(lp5301
sg12
(lp5302
sg26
(dp5303
sbsS'TExamplesDistanceConstructor_DTW'
p5304
(i__main__
ClassDefinition
p5305
(dp5306
g4
I1
sg5
I01
sg6
g5304
sg7
S'TExamplesDistanceConstructor_Normalized'
p5307
sg9
I00
sg10
(lp5308
sg12
(lp5309
(S'int'
p5310
S'dtwDistance'
p5311
g5311
S'distance measure between individual attributes (default: square of difference)'
p5312
I0
I0
I01
Ntp5313
ag1910
ag1914
ag1276
asg26
(dp5314
sbsS'TStopIMClusteringByAssessor_n'
p5315
(i__main__
ClassDefinition
p5316
(dp5317
g4
I1
sg5
I01
sg6
g5315
sg7
S'TStopIMClusteringByAssessor'
p5318
sg9
I00
sg10
(lp5319
sg12
(lp5320
(S'int'
p5321
g2374
g2374
S'number of clusters'
p5322
I0
I0
I01
Ntp5323
asg26
(dp5324
sbsS'TVarListList'
p5325
(ipyprops
ClassDefinition
p5326
(dp5327
g4
I0
sg5
I01
sg6
g5325
sg7
g133
sg9
I0
sg10
(lp5328
sg12
(lp5329
sg26
(dp5330
sbsS'TRandomGenerator'
p5331
(i__main__
ClassDefinition
p5332
(dp5333
g4
I1
sg5
I01
sg6
g5331
sg7
S'TOrange'
p5334
sg9
I00
sg10
(lp5335
sg12
(lp5336
(S'int'
p5337
S'initseed'
p5338
g5338
S'initial random seed'
p5339
I0
I0
I01
Ntp5340
a(S'int'
p5341
S'uses'
p5342
g5342
S'#times a number was returned'
p5343
I0
I0
I01
Ntp5344
asg26
(dp5345
sbsS'TThresholdCA'
p5346
(i__main__
ClassDefinition
p5347
(dp5348
g4
I1
sg5
I01
sg6
g5346
sg7
S'TOrange'
p5349
sg9
I00
sg10
(lp5350
sg12
(lp5351
sg26
(dp5352
sbsS'TFloatListList'
p5353
(ipyprops
ClassDefinition
p5354
(dp5355
g4
I0
sg5
I01
sg6
g5353
sg7
g133
sg9
I0
sg10
(lp5356
sg12
(lp5357
sg26
(dp5358
sbsS'TPreprocessor_imputeByLearner'
p5359
(i__main__
ClassDefinition
p5360
(dp5361
g4
I1
sg5
I01
sg6
g5359
sg7
S'TPreprocessor'
p5362
sg9
I00
sg10
(lp5363
sg12
(lp5364
(S'TLearner'
p5365
S'learner'
p5366
g5366
S'learner used for inducing a model for imputation'
p5367
I0
I0
I00
Ntp5368
asg26
(dp5369
sbsS'TRuleBeamRefiner_Python'
p5370
(i__main__
ClassDefinition
p5371
(dp5372
g4
I1
sg5
I01
sg6
g5370
sg7
S'TRuleBeamRefiner'
p5373
sg9
I00
sg10
(lp5374
sg12
(lp5375
sg26
(dp5376
sbsS'TClassifierFromVarFD'
p5377
(i__main__
ClassDefinition
p5378
(dp5379
g4
I1
sg5
I01
sg6
g5377
sg7
S'TClassifierFD'
p5380
sg9
I00
sg10
(lp5381
sg12
(lp5382
(S'int'
p5383
S'position'
p5384
g5384
S'position of the attribute in domain'
p5385
I0
I0
I01
Ntp5386
a(S'TTransformValue'
p5387
S'transformer'
p5388
g5388
S'transformer'
p5389
I0
I0
I00
Ntp5390
a(S'TDistribution'
p5391
S'distributionForUnknown'
p5392
g5392
S'distribution for unknown value'
p5393
I0
I0
I00
Ntp5394
a(S'bool'
p5395
S'transformUnknowns'
p5396
g5396
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p5397
I0
I0
I01
Ntp5398
ag262
ag87
ag91
asg26
(dp5399
sbsS'TImputer_model'
p5400
(i__main__
ClassDefinition
p5401
(dp5402
g4
I1
sg5
I01
sg6
g5400
sg7
S'TImputer'
p5403
sg9
I00
sg10
(lp5404
sg12
(lp5405
(S'TClassifierList'
p5406
S'models'
p5407
g5407
S'classifiers'
p5408
I0
I0
I00
Ntp5409
asg26
(dp5410
sbsS'TLogRegLearner'
p5411
(i__main__
ClassDefinition
p5412
(dp5413
g4
I1
sg5
I01
sg6
g5411
sg7
S'TLearner'
p5414
sg9
I00
sg10
(lp5415
sg12
(lp5416
(S'TLogRegFitter'
p5417
S'fitter'
p5418
g5418
S'fits beta coefficients and calculates beta errors.'
p5419
I0
I0
I00
Ntp5420
a(S'TImputerConstructor'
p5421
S'imputerConstructor'
p5422
g5422
S'if present, it constructs an imputer for unknown values'
p5423
I0
I0
I00
Ntp5424
a(S'TDomainContinuizer'
p5425
S'domainContinuizer'
p5426
g5426
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5427
I0
I0
I00
Ntp5428
ag102
asg26
(dp5429
sbsS'TPreprocessor_takeMissing'
p5430
(i__main__
ClassDefinition
p5431
(dp5432
g4
I1
sg5
I01
sg6
g5430
sg7
S'TPreprocessor'
p5433
sg9
I00
sg10
(lp5434
sg12
(lp5435
sg26
(dp5436
sbsS'TExamplesDistance_Euclidean'
p5437
(i__main__
ClassDefinition
p5438
(dp5439
g4
I1
sg5
I01
sg6
g5437
sg7
S'TExamplesDistance_Normalized'
p5440
sg9
I00
sg10
(lp5441
sg12
(lp5442
(S'TDomainDistributions'
p5443
S'distributions'
p5444
g5444
S'distributions (of discrete attributes only)'
p5445
I0
I0
I00
Ntp5446
a(S'TAttributedFloatList'
p5447
S'bothSpecialDist'
p5448
g5448
S'distances between discrete attributes if both values are unknown'
p5449
I0
I0
I00
Ntp5450
ag413
ag417
ag421
ag425
ag429
ag433
ag437
asg26
(dp5451
sbsS'TMeasureAttribute_IM'
p5452
(i__main__
ClassDefinition
p5453
(dp5454
g4
I1
sg5
I01
sg6
g5452
sg7
S'TMeasureAttribute'
p5455
sg9
I00
sg10
(lp5456
sg12
(lp5457
(S'TIMConstructor'
p5458
S'IMconstructor'
p5459
g5459
S'incompatibility matrix constructor'
p5460
I0
I0
I00
Ntp5461
a(S'TColumnAssessor'
p5462
S'columnAssessor'
p5463
g5463
S'column quality assessor'
p5464
I0
I0
I00
Ntp5465
ag854
ag858
ag862
ag866
asg26
(dp5466
sbsS'TFeatureByDistributions'
p5467
(i__main__
ClassDefinition
p5468
(dp5469
g4
I1
sg5
I01
sg6
g5467
sg7
S'TFeatureInducer'
p5470
sg9
I00
sg10
(lp5471
sg12
(lp5472
(S'TClustersFromDistributions'
p5473
S'clustersFromDistributions'
p5474
g5474
S'clustering algorithm'
p5475
I0
I0
I00
Ntp5476
a(S'int'
p5477
S'completion'
p5478
g5478
S' decides how to determine the class for points not covered by any cluster'
p5479
I0
I0
I01
S'FeatureByDistributions_Completion'
p5480
tp5481
asg26
(dp5482
S'Completion'
p5483
(lp5484
(S'NoCompletion'
p5485
S'completion_no'
p5486
tp5487
a(S'CompletionByDefault'
p5488
S'completion_default'
p5489
tp5490
a(S'CompletionByBayes'
p5491
S'completion_bayes'
p5492
tp5493
assbsS'TCostMatrix'
p5494
(i__main__
ClassDefinition
p5495
(dp5496
g4
I1
sg5
I01
sg6
g5494
sg7
S'TOrange'
p5497
sg9
I00
sg10
(lp5498
sg12
(lp5499
(S'TVariable'
p5500
S'classVar'
p5501
g5501
S'attribute to which the matrix applies'
p5502
I0
I0
I00
Ntp5503
a(S'int'
p5504
S'dimension'
p5505
g5505
S'dimension (should equal classVar.noOfValues())'
p5506
I01
I0
I01
Ntp5507
asg26
(dp5508
sbsS'TStopIMClusteringByAssessor_noProfit'
p5509
(i__main__
ClassDefinition
p5510
(dp5511
g4
I1
sg5
I01
sg6
g5509
sg7
S'TStopIMClusteringByAssessor'
p5512
sg9
I00
sg10
(lp5513
sg12
(lp5514
(S'float'
p5515
S'minProfitProportion'
p5516
g5516
S'minimal allowable profit proportion'
p5517
I0
I0
I01
Ntp5518
asg26
(dp5519
sbsS'TRemoveUnusedValues'
p5520
(i__main__
ClassDefinition
p5521
(dp5522
g4
I1
sg5
I01
sg6
g5520
sg7
S'TOrange'
p5523
sg9
I00
sg10
(lp5524
sg12
(lp5525
(S'bool'
p5526
S'removeOneValued'
p5527
g5527
S'if true (default is false), one valued attributes are also removed'
p5528
I0
I0
I01
Ntp5529
asg26
(dp5530
sbsS'TExamplesDistance_Normalized'
p5531
(i__main__
ClassDefinition
p5532
(dp5533
g4
I1
sg5
I01
sg6
g5531
sg7
S'TExamplesDistance'
p5534
sg9
I01
sg10
(lp5535
sg12
(lp5536
g413
ag417
ag421
ag425
ag429
ag433
ag437
asg26
(dp5537
sbsS'TC45TreeNode'
p5538
(i__main__
ClassDefinition
p5539
(dp5540
g4
I1
sg5
I01
sg6
g5538
sg7
S'TOrange'
p5541
sg9
I00
sg10
(lp5542
sg12
(lp5543
(S'int'
p5544
S'nodeType'
p5545
g5545
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p5546
I0
I0
I01
S'C45TreeNode_NodeType'
p5547
tp5548
a(S'TValue'
p5549
S'leaf'
p5550
g5550
S'most frequent class at this node'
p5551
I0
I0
I01
Ntp5552
a(S'float'
p5553
S'items'
p5554
g5554
S'no of items at this node'
p5555
I0
I0
I01
Ntp5556
a(S'TDiscDistribution'
p5557
S'classDist'
p5558
g5558
S'class distribution of items'
p5559
I0
I0
I00
Ntp5560
a(S'TVariable'
p5561
S'tested'
p5562
g5562
S'attribute referenced in test'
p5563
I0
I0
I00
Ntp5564
a(S'float'
p5565
S'cut'
p5566
g5566
S'threshold for continuous attribute'
p5567
I0
I0
I01
Ntp5568
a(S'float'
p5569
S'lower'
p5570
g5570
S'lower limit of soft threshold'
p5571
I0
I0
I01
Ntp5572
a(S'float'
p5573
S'upper'
p5574
g5574
S'upper limit of soft threshold'
p5575
I0
I0
I01
Ntp5576
a(S'TIntList'
p5577
S'mapping'
p5578
g5578
S'mapping for discrete value'
p5579
I0
I0
I00
Ntp5580
a(S'TC45TreeNodeList'
p5581
S'branch'
p5582
g5582
S'branch[x] = (sub)tree for outcome x */'
p5583
I0
I0
I00
Ntp5584
asg26
(dp5585
S'NodeType'
p5586
(lp5587
(S'Leaf'
p5588
S'0'
p5589
tp5590
a(S'Branch'
p5591
I1
tp5592
a(S'Cut'
p5593
I2
tp5594
a(S'Subset'
p5595
I3
tp5596
assbsS'TDistributionAssessor_Measure'
p5597
(i__main__
ClassDefinition
p5598
(dp5599
g4
I1
sg5
I01
sg6
g5597
sg7
S'TDistributionAssessor'
p5600
sg9
I00
sg10
(lp5601
sg12
(lp5602
(S'TMeasureAttribute'
p5603
S'measure'
p5604
g5604
S'attribute quality measure'
p5605
I0
I0
I00
Ntp5606
asg26
(dp5607
sbsS'TIMConstructor'
p5608
(i__main__
ClassDefinition
p5609
(dp5610
g4
I1
sg5
I01
sg6
g5608
sg7
S'TOrange'
p5611
sg9
I01
sg10
(lp5612
sg12
(lp5613
g1163
asg26
(dp5614
sbsS'TRuleFinder_Python'
p5615
(i__main__
ClassDefinition
p5616
(dp5617
g4
I1
sg5
I01
sg6
g5615
sg7
S'TRuleFinder'
p5618
sg9
I00
sg10
(lp5619
sg12
(lp5620
g3631
ag3634
asg26
(dp5621
sbsS'TTabDelimExampleGenerator'
p5622
(i__main__
ClassDefinition
p5623
(dp5624
g4
I1
sg5
I01
sg6
g5622
sg7
S'TFileExampleGenerator'
p5625
sg9
I00
sg10
(lp5626
sg12
(lp5627
(S'TIntList'
p5628
S'attributeTypes'
p5629
g5629
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p5630
I0
I0
I00
Ntp5631
a(S'int'
p5632
S'classPos'
p5633
g5633
S'position of the class attribute'
p5634
I0
I0
I01
Ntp5635
a(S'int'
p5636
S'basketPos'
p5637
g5637
S'position of the (virtual) basket attribute'
p5638
I0
I0
I01
Ntp5639
a(S'int'
p5640
S'headerLines'
p5641
g5641
S'number of header lines (3 for .tab, 1 for .txt)'
p5642
I0
I0
I01
Ntp5643
a(S'bool'
p5644
S'csv'
p5645
g5645
S"also allow ',' as a separator"
p5646
I0
I0
I01
Ntp5647
a(S'TBasketFeeder'
p5648
S'basketFeeder'
p5649
g5649
S'takes care of inserting the meta attributes from the basket if need be'
p5650
I0
I0
I00
Ntp5651
ag1479
ag1483
ag1487
ag277
ag281
asg26
(dp5652
sbsS'TRandomClassifier'
p5653
(i__main__
ClassDefinition
p5654
(dp5655
g4
I1
sg5
I01
sg6
g5653
sg7
S'TClassifier'
p5656
sg9
I00
sg10
(lp5657
sg12
(lp5658
(S'TDistribution'
p5659
S'probabilities'
p5660
g5660
S'probabilities of predictions'
p5661
I0
I0
I00
Ntp5662
ag87
ag91
asg26
(dp5663
sbsS'TkNNLearner'
p5664
(i__main__
ClassDefinition
p5665
(dp5666
g4
I1
sg5
I01
sg6
g5664
sg7
S'TLearner'
p5667
sg9
I00
sg10
(lp5668
sg12
(lp5669
(S'float'
p5670
g1129
g1129
S'number of neighbours (0 for sqrt of #examples)'
p5671
I0
I0
I01
Ntp5672
a(S'bool'
p5673
S'rankWeight'
p5674
g5674
S'enable weighting by ranks'
p5675
I0
I0
I01
Ntp5676
a(S'TExamplesDistanceConstructor'
p5677
S'distanceConstructor'
p5678
g5678
S'metrics'
p5679
I0
I0
I00
Ntp5680
ag102
asg26
(dp5681
sbsS'TTreeDescender_UnknownToNode'
p5682
(i__main__
ClassDefinition
p5683
(dp5684
g4
I1
sg5
I01
sg6
g5682
sg7
g1446
sg9
I0
sg10
(lp5685
sg12
(lp5686
sg26
(dp5687
sbsS'TIntFloatList'
p5688
(ipyprops
ClassDefinition
p5689
(dp5690
g4
I0
sg5
I01
sg6
g5688
sg7
g133
sg9
I0
sg10
(lp5691
sg12
(lp5692
sg26
(dp5693
sbsS'TDistributionAssessor_mf'
p5694
(i__main__
ClassDefinition
p5695
(dp5696
g4
I1
sg5
I01
sg6
g5694
sg7
S'TDistributionAssessor'
p5697
sg9
I00
sg10
(lp5698
sg12
(lp5699
(S'float'
p5700
g1133
g1133
S'm for m-estimate'
p5701
I0
I0
I01
Ntp5702
asg26
(dp5703
sbsS'TExampleClusters'
p5704
(i__main__
ClassDefinition
p5705
(dp5706
g4
I1
sg5
I01
sg6
g5704
sg7
S'TGeneralExampleClustering'
p5707
sg9
I00
sg10
(lp5708
sg12
(lp5709
(S'TExampleCluster'
p5710
S'root'
p5711
g5711
S'root of cluster hierarchy'
p5712
I0
I0
I00
Ntp5713
a(S'float'
p5714
S'quality'
p5715
g5715
S"'quality' of clustering"
p5716
I0
I0
I01
Ntp5717
asg26
(dp5718
sbsS'TExamplesDistance_Python'
p5719
(i__main__
ClassDefinition
p5720
(dp5721
g4
I1
sg5
I01
sg6
g5719
sg7
S'TExamplesDistance'
p5722
sg9
I00
sg10
(lp5723
sg12
(lp5724
sg26
(dp5725
sbsS'TCostLearner'
p5726
(i__main__
ClassDefinition
p5727
(dp5728
g4
I1
sg5
I01
sg6
g5726
sg7
S'TMajorityLearner'
p5729
sg9
I00
sg10
(lp5730
sg12
(lp5731
(S'TCostMatrix'
p5732
S'cost'
p5733
g5733
S'cost matrix'
p5734
I0
I0
I00
Ntp5735
ag3746
ag3750
ag102
asg26
(dp5736
sbsS'TEFMDataDescription'
p5737
(i__main__
ClassDefinition
p5738
(dp5739
g4
I1
sg5
I01
sg6
g5737
sg7
S'TOrange'
p5740
sg9
I00
sg10
(lp5741
S'domainDistributions'
p5742
asg12
(lp5743
(S'TDomain'
p5744
S'domain'
p5745
g5745
S'domain'
p5746
I01
I0
I00
Ntp5747
asg26
(dp5748
sbsS'TClassifierFD'
p5749
(i__main__
ClassDefinition
p5750
(dp5751
g4
I1
sg5
I01
sg6
g5749
sg7
S'TClassifier'
p5752
sg9
I00
sg10
(lp5753
sg12
(lp5754
g262
ag87
ag91
asg26
(dp5755
sbsS'TPreprocessor_drop'
p5756
(i__main__
ClassDefinition
p5757
(dp5758
g4
I1
sg5
I01
sg6
g5756
sg7
S'TPreprocessor'
p5759
sg9
I00
sg10
(lp5760
sg12
(lp5761
(S'TVariableFilterMap'
p5762
S'values'
p5763
g5763
S'variable-filter pairs'
p5764
I0
I0
I00
Ntp5765
a(S'bool'
p5766
S'conjunction'
p5767
g5767
S'decides whether to take conjunction or disjunction of values'
p5768
I0
I0
I01
Ntp5769
asg26
(dp5770
sbsS'TTreeDescender_UnknownToCommonBranch'
p5771
(i__main__
ClassDefinition
p5772
(dp5773
g4
I1
sg5
I01
sg6
g5771
sg7
g1446
sg9
I0
sg10
(lp5774
sg12
(lp5775
sg26
(dp5776
sbsS'TPreprocessor_addNoise'
p5777
(i__main__
ClassDefinition
p5778
(dp5779
g4
I1
sg5
I01
sg6
g5777
sg7
S'TPreprocessor'
p5780
sg9
I00
sg10
(lp5781
sg12
(lp5782
(S'TVariableFloatMap'
p5783
S'proportions'
p5784
g5784
S'proportion of changed values for individual attributes'
p5785
I0
I0
I00
Ntp5786
a(S'float'
p5787
S'defaultProportion'
p5788
g5788
S'default proportion of changed values (for attributes not specified above)'
p5789
I0
I0
I01
Ntp5790
a(S'TRandomGenerator'
p5791
S'randomGenerator'
p5792
g5792
S'random number generator'
p5793
I0
I0
I00
Ntp5794
asg26
(dp5795
sbsS'TStopIMClusteringByAssessor_binary'
p5796
(i__main__
ClassDefinition
p5797
(dp5798
g4
I1
sg5
I01
sg6
g5796
sg7
S'TStopIMClusteringByAssessor'
p5799
sg9
I00
sg10
(lp5800
sg12
(lp5801
sg26
(dp5802
sbsS'TColumnAssessor_mf'
p5803
(i__main__
ClassDefinition
p5804
(dp5805
g4
I1
sg5
I01
sg6
g5803
sg7
S'TColumnAssessor'
p5806
sg9
I00
sg10
(lp5807
sg12
(lp5808
(S'float'
p5809
g1133
g1133
S'm for m-estimate'
p5810
I0
I0
I01
Ntp5811
asg26
(dp5812
sbsS'TKruskalStress'
p5813
(i__main__
ClassDefinition
p5814
(dp5815
g4
I1
sg5
I0
sg6
g5813
sg7
S'TStressFunc'
p5816
sg9
I00
sg10
(lp5817
sg12
(lp5818
sg26
(dp5819
sbsS'TExamplesDistanceConstructor'
p5820
(i__main__
ClassDefinition
p5821
(dp5822
g4
I1
sg5
I01
sg6
g5820
sg7
S'TOrange'
p5823
sg9
I01
sg10
(lp5824
sg12
(lp5825
g1276
asg26
(dp5826
sbsS'TSubsetsGenerator'
p5827
(i__main__
ClassDefinition
p5828
(dp5829
g4
I1
sg5
I01
sg6
g5827
sg7
S'TOrange'
p5830
sg9
I01
sg10
(lp5831
sg12
(lp5832
g193
asg26
(dp5833
sbsS'TPreprocessor_addCensorWeight'
p5834
(i__main__
ClassDefinition
p5835
(dp5836
g4
I1
sg5
I01
sg6
g5834
sg7
S'TPreprocessor'
p5837
sg9
I00
sg10
(lp5838
sg12
(lp5839
(S'TVariable'
p5840
S'outcomeVar'
p5841
g5841
S'outcome variable'
p5842
I0
I0
I00
Ntp5843
a(S'TVariable'
p5844
S'timeVar'
p5845
g5845
S'time variable'
p5846
I0
I0
I00
Ntp5847
a(S'TValue'
p5848
S'eventValue'
p5849
g5849
S'event (fail) value'
p5850
I0
I0
I01
Ntp5851
a(S'int'
p5852
S'method'
p5853
g5853
S' weighting method'
p5854
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p5855
tp5856
a(S'float'
p5857
S'maxTime'
p5858
g5858
S'maximal time'
p5859
I0
I0
I01
Ntp5860
a(S'bool'
p5861
S'addComplementary'
p5862
g5862
S'if true (default is false), complementary examples are added for censored examples'
p5863
I0
I0
I01
Ntp5864
asg26
(dp5865
S'Method'
p5866
(lp5867
(S'Linear'
p5868
S'TPreprocessor_addCensorWeight::linear'
p5869
tp5870
a(S'KM'
p5871
S'TPreprocessor_addCensorWeight::km'
p5872
tp5873
a(S'Bayes'
p5874
S'TPreprocessor_addCensorWeight::bayes'
p5875
tp5876
assbsS'TRuleBeamCandidateSelector_Python'
p5877
(i__main__
ClassDefinition
p5878
(dp5879
g4
I1
sg5
I01
sg6
g5877
sg7
S'TRuleBeamCandidateSelector'
p5880
sg9
I00
sg10
(lp5881
sg12
(lp5882
sg26
(dp5883
sbsS'TIntList'
p5884
(ipyprops
ClassDefinition
p5885
(dp5886
g4
I0
sg5
I01
sg6
g5884
sg7
g133
sg9
I0
sg10
(lp5887
sg12
(lp5888
sg26
(dp5889
sbsS'TEntropyDiscretization'
p5890
(i__main__
ClassDefinition
p5891
(dp5892
g4
I1
sg5
I01
sg6
g5890
sg7
S'TDiscretization'
p5893
sg9
I00
sg10
(lp5894
sg12
(lp5895
(S'int'
p5896
S'maxNumberOfIntervals'
p5897
g5897
S'maximal number of intervals; default = 0 (no limits)'
p5898
I0
I0
I01
Ntp5899
a(S'bool'
p5900
S'forceAttribute'
p5901
g5901
S'minimal number of intervals; default = 0 (no limits)'
p5902
I0
I0
I01
Ntp5903
asg26
(dp5904
sbsS'TIMBySorting'
p5905
(i__main__
ClassDefinition
p5906
(dp5907
g4
I1
sg5
I01
sg6
g5905
sg7
S'TIMConstructor'
p5908
sg9
I00
sg10
(lp5909
sg12
(lp5910
g1163
asg26
(dp5911
sbsS'TImputerConstructor_asValue'
p5912
(i__main__
ClassDefinition
p5913
(dp5914
g4
I1
sg5
I01
sg6
g5912
sg7
S'TImputerConstructor'
p5915
sg9
I00
sg10
(lp5916
sg12
(lp5917
g153
asg26
(dp5918
sbsS'TGaussianDistribution'
p5919
(i__main__
ClassDefinition
p5920
(dp5921
g4
I1
sg5
I01
sg6
g5919
sg7
S'TDistribution'
p5922
sg9
I00
sg10
(lp5923
sg12
(lp5924
(S'float'
p5925
S'mean'
p5926
g5926
S'mu'
p5927
I0
I0
I01
Ntp5928
a(S'float'
p5929
S'sigma'
p5930
g5930
S'sigma'
p5931
I0
I0
I01
Ntp5932
ag1061
ag1065
ag1069
ag1073
ag1077
ag1081
ag1085
ag1089
asg26
(dp5933
sbsS'TExampleDistVector'
p5934
(i__main__
ClassDefinition
p5935
(dp5936
g4
I1
sg5
I01
sg6
g5934
sg7
S'TOrange'
p5937
sg9
I00
sg10
(lp5938
sg12
(lp5939
sg26
(dp5940
sbsS'TConditionalProbabilityEstimatorList'
p5941
(ipyprops
ClassDefinition
p5942
(dp5943
g4
I0
sg5
I01
sg6
g5941
sg7
g133
sg9
I0
sg10
(lp5944
sg12
(lp5945
sg26
(dp5946
sbsS'TRuleBeamFilter_Width'
p5947
(i__main__
ClassDefinition
p5948
(dp5949
g4
I1
sg5
I01
sg6
g5947
sg7
S'TRuleBeamFilter'
p5950
sg9
I00
sg10
(lp5951
sg12
(lp5952
(S'int'
p5953
S'width'
p5954
g5954
g540
I0
I0
I01
Ntp5955
asg26
(dp5956
sbsS'TProbabilityEstimator'
p5957
(i__main__
ClassDefinition
p5958
(dp5959
g4
I1
sg5
I01
sg6
g5957
sg7
S'TOrange'
p5960
sg9
I01
sg10
(lp5961
sg12
(lp5962
g1425
ag1429
asg26
(dp5963
sbsS'TMeasureAttribute_info'
p5964
(i__main__
ClassDefinition
p5965
(dp5966
g4
I1
sg5
I01
sg6
g5964
sg7
S'TMeasureAttributeFromProbabilities'
p5967
sg9
I00
sg10
(lp5968
sg12
(lp5969
g840
ag844
ag849
ag854
ag858
ag862
ag866
asg26
(dp5970
sbsS'TImputerConstructor_model'
p5971
(i__main__
ClassDefinition
p5972
(dp5973
g4
I1
sg5
I01
sg6
g5971
sg7
S'TImputerConstructor'
p5974
sg9
I00
sg10
(lp5975
sg12
(lp5976
(S'TLearner'
p5977
S'learnerDiscrete'
p5978
g5978
S'learner for discrete attributes'
p5979
I0
I0
I00
Ntp5980
a(S'TLearner'
p5981
S'learnerContinuous'
p5982
g5982
S'learner for continuous attributes'
p5983
I0
I0
I00
Ntp5984
a(S'bool'
p5985
S'useClass'
p5986
g5986
S'tells whether to use class value in imputation (default: false)'
p5987
I0
I0
I01
Ntp5988
ag153
asg26
(dp5989
sbsS'TFindNearestConstructor_BruteForce'
p5990
(i__main__
ClassDefinition
p5991
(dp5992
g4
I1
sg5
I01
sg6
g5990
sg7
S'TFindNearestConstructor'
p5993
sg9
I00
sg10
(lp5994
sg12
(lp5995
g1702
ag1706
asg26
(dp5996
sbsS'TImputerConstructor'
p5997
(i__main__
ClassDefinition
p5998
(dp5999
g4
I1
sg5
I01
sg6
g5997
sg7
S'TOrange'
p6000
sg9
I01
sg10
(lp6001
sg12
(lp6002
g153
asg26
(dp6003
sbsS'TPreprocessor'
p6004
(i__main__
ClassDefinition
p6005
(dp6006
g4
I1
sg5
I01
sg6
g6004
sg7
S'TOrange'
p6007
sg9
I01
sg10
(lp6008
sg12
(lp6009
sg26
(dp6010
sbsS'TDiscretizer'
p6011
(i__main__
ClassDefinition
p6012
(dp6013
g4
I1
sg5
I01
sg6
g6011
sg7
S'TTransformValue'
p6014
sg9
I01
sg10
(lp6015
sg12
(lp6016
g736
asg26
(dp6017
sbsS'TIMByRowsPreprocessor'
p6018
(i__main__
ClassDefinition
p6019
(dp6020
g4
I1
sg5
I01
sg6
g6018
sg7
S'TOrange'
p6021
sg9
I01
sg10
(lp6022
sg12
(lp6023
sg26
(dp6024
sbsS'TTreeStopCriteria_common'
p6025
(i__main__
ClassDefinition
p6026
(dp6027
g4
I1
sg5
I01
sg6
g6025
sg7
S'TTreeStopCriteria'
p6028
sg9
I00
sg10
(lp6029
sg12
(lp6030
(S'float'
p6031
S'maxMajority'
p6032
g6032
S'a maximal proportion of majority class for division to continue'
p6033
I0
I0
I01
Ntp6034
a(S'float'
p6035
S'minExamples'
p6036
g6036
S'a minimal number of examples for division to continue'
p6037
I0
I0
I01
Ntp6038
asg26
(dp6039
sbsS'TTreeStopCriteria_Python'
p6040
(i__main__
ClassDefinition
p6041
(dp6042
g4
I1
sg5
I01
sg6
g6040
sg7
S'TTreeStopCriteria'
p6043
sg9
I00
sg10
(lp6044
sg12
(lp6045
sg26
(dp6046
sbsS'TExamplesDistanceConstructor_Maximal'
p6047
(i__main__
ClassDefinition
p6048
(dp6049
g4
I1
sg5
I01
sg6
g6047
sg7
S'TExamplesDistanceConstructor_Normalized'
p6050
sg9
I00
sg10
(lp6051
sg12
(lp6052
g1910
ag1914
ag1276
asg26
(dp6053
sbsS'TIGByIM'
p6054
(i__main__
ClassDefinition
p6055
(dp6056
g4
I1
sg5
I01
sg6
g6054
sg7
S'TIGConstructor'
p6057
sg9
I00
sg10
(lp6058
sg12
(lp6059
(S'TIMConstructor'
p6060
S'IMconstructor'
p6061
g6061
S'IM constructor'
p6062
I0
I0
I00
Ntp6063
asg26
(dp6064
sbsS'TRuleEvaluator_LRS'
p6065
(i__main__
ClassDefinition
p6066
(dp6067
g4
I1
sg5
I01
sg6
g6065
sg7
S'TRuleEvaluator'
p6068
sg9
I00
sg10
(lp6069
sg12
(lp6070
(S'TRuleList'
p6071
S'rules'
p6072
g6072
g540
I0
I0
I00
Ntp6073
a(S'bool'
p6074
S'storeRules'
p6075
g6075
g540
I0
I0
I01
Ntp6076
asg26
(dp6077
sbs.