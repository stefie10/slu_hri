# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cMath2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cMath2d')
    _cMath2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cMath2d', [dirname(__file__)])
        except ImportError:
            import _cMath2d
            return _cMath2d
        try:
            _mod = imp.load_module('_cMath2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cMath2d = swig_import_helper()
    del swig_import_helper
else:
    import _cMath2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def numpySquareDistances(l1, l2):
    return _cMath2d.numpySquareDistances(l1, l2)
numpySquareDistances = _cMath2d.numpySquareDistances

def setThreshold(t):
    return _cMath2d.setThreshold(t)
setThreshold = _cMath2d.setThreshold

def getThreshold():
    return _cMath2d.getThreshold()
getThreshold = _cMath2d.getThreshold
FALSE = _cMath2d.FALSE
TRUE = _cMath2d.TRUE
class poseStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, poseStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, poseStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cMath2d.poseStruct_x_set
    __swig_getmethods__["x"] = _cMath2d.poseStruct_x_get
    if _newclass:
        x = _swig_property(_cMath2d.poseStruct_x_get, _cMath2d.poseStruct_x_set)
    __swig_setmethods__["y"] = _cMath2d.poseStruct_y_set
    __swig_getmethods__["y"] = _cMath2d.poseStruct_y_get
    if _newclass:
        y = _swig_property(_cMath2d.poseStruct_y_get, _cMath2d.poseStruct_y_set)
    __swig_setmethods__["theta"] = _cMath2d.poseStruct_theta_set
    __swig_getmethods__["theta"] = _cMath2d.poseStruct_theta_get
    if _newclass:
        theta = _swig_property(_cMath2d.poseStruct_theta_get, _cMath2d.poseStruct_theta_set)

    def __init__(self):
        this = _cMath2d.new_poseStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cMath2d.delete_poseStruct
    __del__ = lambda self: None
poseStruct_swigregister = _cMath2d.poseStruct_swigregister
poseStruct_swigregister(poseStruct)

class pointStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cMath2d.pointStruct_x_set
    __swig_getmethods__["x"] = _cMath2d.pointStruct_x_get
    if _newclass:
        x = _swig_property(_cMath2d.pointStruct_x_get, _cMath2d.pointStruct_x_set)
    __swig_setmethods__["y"] = _cMath2d.pointStruct_y_set
    __swig_getmethods__["y"] = _cMath2d.pointStruct_y_get
    if _newclass:
        y = _swig_property(_cMath2d.pointStruct_y_get, _cMath2d.pointStruct_y_set)

    def __init__(self):
        this = _cMath2d.new_pointStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cMath2d.delete_pointStruct
    __del__ = lambda self: None
pointStruct_swigregister = _cMath2d.pointStruct_swigregister
pointStruct_swigregister(pointStruct)

class segmentStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segmentStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segmentStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _cMath2d.segmentStruct_start_set
    __swig_getmethods__["start"] = _cMath2d.segmentStruct_start_get
    if _newclass:
        start = _swig_property(_cMath2d.segmentStruct_start_get, _cMath2d.segmentStruct_start_set)
    __swig_setmethods__["end"] = _cMath2d.segmentStruct_end_set
    __swig_getmethods__["end"] = _cMath2d.segmentStruct_end_get
    if _newclass:
        end = _swig_property(_cMath2d.segmentStruct_end_get, _cMath2d.segmentStruct_end_set)

    def __init__(self):
        this = _cMath2d.new_segmentStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cMath2d.delete_segmentStruct
    __del__ = lambda self: None
segmentStruct_swigregister = _cMath2d.segmentStruct_swigregister
segmentStruct_swigregister(segmentStruct)

class lineStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lineStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lineStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["points"] = _cMath2d.lineStruct_points_set
    __swig_getmethods__["points"] = _cMath2d.lineStruct_points_get
    if _newclass:
        points = _swig_property(_cMath2d.lineStruct_points_get, _cMath2d.lineStruct_points_set)
    __swig_setmethods__["length"] = _cMath2d.lineStruct_length_set
    __swig_getmethods__["length"] = _cMath2d.lineStruct_length_get
    if _newclass:
        length = _swig_property(_cMath2d.lineStruct_length_get, _cMath2d.lineStruct_length_set)

    def __init__(self):
        this = _cMath2d.new_lineStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cMath2d.delete_lineStruct
    __del__ = lambda self: None
lineStruct_swigregister = _cMath2d.lineStruct_swigregister
lineStruct_swigregister(lineStruct)


def dist(p1, p2):
    return _cMath2d.dist(p1, p2)
dist = _cMath2d.dist

def squareDist(p1, p2):
    return _cMath2d.squareDist(p1, p2)
squareDist = _cMath2d.squareDist

def pointOnSegment(s, distance):
    return _cMath2d.pointOnSegment(s, distance)
pointOnSegment = _cMath2d.pointOnSegment

def segmentEqual(s1, s2):
    return _cMath2d.segmentEqual(s1, s2)
segmentEqual = _cMath2d.segmentEqual

def pointEqual(p1, p2):
    return _cMath2d.pointEqual(p1, p2)
pointEqual = _cMath2d.pointEqual

def sorta_eq(d1, d2):
    return _cMath2d.sorta_eq(d1, d2)
sorta_eq = _cMath2d.sorta_eq

def between(bound1, bound2, d):
    return _cMath2d.between(bound1, bound2, d)
between = _cMath2d.between

def isOnSegment(s, p):
    return _cMath2d.isOnSegment(s, p)
isOnSegment = _cMath2d.isOnSegment

def slope(s):
    return _cMath2d.slope(s)
slope = _cMath2d.slope

def closestPointOnLine(l, p):
    return _cMath2d.closestPointOnLine(l, p)
closestPointOnLine = _cMath2d.closestPointOnLine

def closestPointOnSegment(s, p):
    return _cMath2d.closestPointOnSegment(s, p)
closestPointOnSegment = _cMath2d.closestPointOnSegment

def closestPointOnSegmentLine(s, p):
    return _cMath2d.closestPointOnSegmentLine(s, p)
closestPointOnSegmentLine = _cMath2d.closestPointOnSegmentLine

def length(l):
    return _cMath2d.length(l)
length = _cMath2d.length

def stepAlongLine(l, stepSize):
    return _cMath2d.stepAlongLine(l, stepSize)
stepAlongLine = _cMath2d.stepAlongLine

def interpolate(t1, p1, t2, p2, offset):
    return _cMath2d.interpolate(t1, p1, t2, p2, offset)
interpolate = _cMath2d.interpolate

def isInteriorPoint(polygon, p):
    return _cMath2d.isInteriorPoint(polygon, p)
isInteriorPoint = _cMath2d.isInteriorPoint

def interiorPoints(polygon, points):
    return _cMath2d.interiorPoints(polygon, points)
interiorPoints = _cMath2d.interiorPoints

def closestPointOnPolygon(polygon, p):
    return _cMath2d.closestPointOnPolygon(polygon, p)
closestPointOnPolygon = _cMath2d.closestPointOnPolygon
# This file is compatible with both classic and new-style classes.


